/* 
 * Wire4RestAPI
 *
 * Referencia de la API de Wire4
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using MX.Wire4.Client;
using MX.Wire4.Model;

namespace MX.Wire4.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IReporteDeSolicitudesDePagosApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Consulta de solicitudes de pago por numero de orden.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="orderId">Es el identificador de la orden a buscar. (optional)</param>
        /// <returns>PaymentRequestReportDTO</returns>
        PaymentRequestReportDTO PaymentRequestIdReportByOrderIdUsingGET (string authorization, string orderId = null);

        /// <summary>
        /// Consulta de solicitudes de pago por numero de orden.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="orderId">Es el identificador de la orden a buscar. (optional)</param>
        /// <returns>ApiResponse of PaymentRequestReportDTO</returns>
        ApiResponse<PaymentRequestReportDTO> PaymentRequestIdReportByOrderIdUsingGETWithHttpInfo (string authorization, string orderId = null);
        /// <summary>
        /// Consulta de solicitudes de pago por identificador de petición
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="requestId">Identificador de la petición a buscar.</param>
        /// <returns>PaymentRequestReportDTO</returns>
        PaymentRequestReportDTO PaymentRequestIdReportUsingGET (string authorization, string requestId);

        /// <summary>
        /// Consulta de solicitudes de pago por identificador de petición
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="requestId">Identificador de la petición a buscar.</param>
        /// <returns>ApiResponse of PaymentRequestReportDTO</returns>
        ApiResponse<PaymentRequestReportDTO> PaymentRequestIdReportUsingGETWithHttpInfo (string authorization, string requestId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Consulta de solicitudes de pago por numero de orden.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="orderId">Es el identificador de la orden a buscar. (optional)</param>
        /// <returns>Task of PaymentRequestReportDTO</returns>
        System.Threading.Tasks.Task<PaymentRequestReportDTO> PaymentRequestIdReportByOrderIdUsingGETAsync (string authorization, string orderId = null);

        /// <summary>
        /// Consulta de solicitudes de pago por numero de orden.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="orderId">Es el identificador de la orden a buscar. (optional)</param>
        /// <returns>Task of ApiResponse (PaymentRequestReportDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentRequestReportDTO>> PaymentRequestIdReportByOrderIdUsingGETAsyncWithHttpInfo (string authorization, string orderId = null);
        /// <summary>
        /// Consulta de solicitudes de pago por identificador de petición
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="requestId">Identificador de la petición a buscar.</param>
        /// <returns>Task of PaymentRequestReportDTO</returns>
        System.Threading.Tasks.Task<PaymentRequestReportDTO> PaymentRequestIdReportUsingGETAsync (string authorization, string requestId);

        /// <summary>
        /// Consulta de solicitudes de pago por identificador de petición
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="requestId">Identificador de la petición a buscar.</param>
        /// <returns>Task of ApiResponse (PaymentRequestReportDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentRequestReportDTO>> PaymentRequestIdReportUsingGETAsyncWithHttpInfo (string authorization, string requestId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ReporteDeSolicitudesDePagosApi : IReporteDeSolicitudesDePagosApi
    {
        private MX.Wire4.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReporteDeSolicitudesDePagosApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReporteDeSolicitudesDePagosApi(String basePath)
        {
            this.Configuration = new MX.Wire4.Client.Configuration { BasePath = basePath };

            ExceptionFactory = MX.Wire4.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReporteDeSolicitudesDePagosApi"/> class
        /// </summary>
        /// <returns></returns>
        public ReporteDeSolicitudesDePagosApi()
        {
            this.Configuration = MX.Wire4.Client.Configuration.Default;

            ExceptionFactory = MX.Wire4.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReporteDeSolicitudesDePagosApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReporteDeSolicitudesDePagosApi(MX.Wire4.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = MX.Wire4.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = MX.Wire4.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public MX.Wire4.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MX.Wire4.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Consulta de solicitudes de pago por numero de orden. 
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="orderId">Es el identificador de la orden a buscar. (optional)</param>
        /// <returns>PaymentRequestReportDTO</returns>
        public PaymentRequestReportDTO PaymentRequestIdReportByOrderIdUsingGET (string authorization, string orderId = null)
        {
             ApiResponse<PaymentRequestReportDTO> localVarResponse = PaymentRequestIdReportByOrderIdUsingGETWithHttpInfo(authorization, orderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Consulta de solicitudes de pago por numero de orden. 
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="orderId">Es el identificador de la orden a buscar. (optional)</param>
        /// <returns>ApiResponse of PaymentRequestReportDTO</returns>
        public ApiResponse< PaymentRequestReportDTO > PaymentRequestIdReportByOrderIdUsingGETWithHttpInfo (string authorization, string orderId = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ReporteDeSolicitudesDePagosApi->PaymentRequestIdReportByOrderIdUsingGET");

            var localVarPath = "/payment-request";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_id", orderId)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PaymentRequestIdReportByOrderIdUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentRequestReportDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PaymentRequestReportDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentRequestReportDTO)));
        }

        /// <summary>
        /// Consulta de solicitudes de pago por numero de orden. 
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="orderId">Es el identificador de la orden a buscar. (optional)</param>
        /// <returns>Task of PaymentRequestReportDTO</returns>
        public async System.Threading.Tasks.Task<PaymentRequestReportDTO> PaymentRequestIdReportByOrderIdUsingGETAsync (string authorization, string orderId = null)
        {
             ApiResponse<PaymentRequestReportDTO> localVarResponse = await PaymentRequestIdReportByOrderIdUsingGETAsyncWithHttpInfo(authorization, orderId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Consulta de solicitudes de pago por numero de orden. 
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="orderId">Es el identificador de la orden a buscar. (optional)</param>
        /// <returns>Task of ApiResponse (PaymentRequestReportDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaymentRequestReportDTO>> PaymentRequestIdReportByOrderIdUsingGETAsyncWithHttpInfo (string authorization, string orderId = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ReporteDeSolicitudesDePagosApi->PaymentRequestIdReportByOrderIdUsingGET");

            var localVarPath = "/payment-request";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_id", orderId)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PaymentRequestIdReportByOrderIdUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentRequestReportDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PaymentRequestReportDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentRequestReportDTO)));
        }

        /// <summary>
        /// Consulta de solicitudes de pago por identificador de petición 
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="requestId">Identificador de la petición a buscar.</param>
        /// <returns>PaymentRequestReportDTO</returns>
        public PaymentRequestReportDTO PaymentRequestIdReportUsingGET (string authorization, string requestId)
        {
             ApiResponse<PaymentRequestReportDTO> localVarResponse = PaymentRequestIdReportUsingGETWithHttpInfo(authorization, requestId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Consulta de solicitudes de pago por identificador de petición 
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="requestId">Identificador de la petición a buscar.</param>
        /// <returns>ApiResponse of PaymentRequestReportDTO</returns>
        public ApiResponse< PaymentRequestReportDTO > PaymentRequestIdReportUsingGETWithHttpInfo (string authorization, string requestId)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ReporteDeSolicitudesDePagosApi->PaymentRequestIdReportUsingGET");
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling ReporteDeSolicitudesDePagosApi->PaymentRequestIdReportUsingGET");

            var localVarPath = "/payment-request/{requestId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestId != null) localVarPathParams.Add("requestId", this.Configuration.ApiClient.ParameterToString(requestId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PaymentRequestIdReportUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentRequestReportDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PaymentRequestReportDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentRequestReportDTO)));
        }

        /// <summary>
        /// Consulta de solicitudes de pago por identificador de petición 
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="requestId">Identificador de la petición a buscar.</param>
        /// <returns>Task of PaymentRequestReportDTO</returns>
        public async System.Threading.Tasks.Task<PaymentRequestReportDTO> PaymentRequestIdReportUsingGETAsync (string authorization, string requestId)
        {
             ApiResponse<PaymentRequestReportDTO> localVarResponse = await PaymentRequestIdReportUsingGETAsyncWithHttpInfo(authorization, requestId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Consulta de solicitudes de pago por identificador de petición 
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="requestId">Identificador de la petición a buscar.</param>
        /// <returns>Task of ApiResponse (PaymentRequestReportDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaymentRequestReportDTO>> PaymentRequestIdReportUsingGETAsyncWithHttpInfo (string authorization, string requestId)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ReporteDeSolicitudesDePagosApi->PaymentRequestIdReportUsingGET");
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling ReporteDeSolicitudesDePagosApi->PaymentRequestIdReportUsingGET");

            var localVarPath = "/payment-request/{requestId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestId != null) localVarPathParams.Add("requestId", this.Configuration.ApiClient.ParameterToString(requestId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PaymentRequestIdReportUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentRequestReportDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PaymentRequestReportDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentRequestReportDTO)));
        }

    }
}
