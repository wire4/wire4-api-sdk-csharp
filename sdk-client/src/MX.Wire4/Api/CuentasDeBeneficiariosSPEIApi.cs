/* 
 * Wire4RestAPI
 *
 * Referencia de la API de Wire4
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using MX.Wire4.Client;
using MX.Wire4.Model;

namespace MX.Wire4.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ICuentasDeBeneficiariosSPEIApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Elimina la cuenta del beneficiario
        /// </summary>
        /// <remarks>
        /// Borra la cuenta de beneficiario proporcionada relacionada al contrato perteneciente a la subscripción. La cuenta a borrar debe ser una cuenta que opere con SPEI.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="account">La cuenta del beneciario que será eliminada</param>
        /// <param name="subscription">El identificador de la suscripción a esta API</param>
        /// <returns></returns>
        void DeleteAccountUsingDELETE (string authorization, string account, string subscription);

        /// <summary>
        /// Elimina la cuenta del beneficiario
        /// </summary>
        /// <remarks>
        /// Borra la cuenta de beneficiario proporcionada relacionada al contrato perteneciente a la subscripción. La cuenta a borrar debe ser una cuenta que opere con SPEI.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="account">La cuenta del beneciario que será eliminada</param>
        /// <param name="subscription">El identificador de la suscripción a esta API</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAccountUsingDELETEWithHttpInfo (string authorization, string account, string subscription);
        /// <summary>
        /// Consulta de relaciones
        /// </summary>
        /// <remarks>
        /// Obtiene las posibles relaciones existentes para registrar beneficiarios en Monex. Se debe invocar este recurso antes de pre-registrar una cuenta de beneficiario.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Identificador de la suscripción a esta API</param>
        /// <returns>RelationshipsResponse</returns>
        RelationshipsResponse GetAvailableRelationshipsMonexUsingGET (string authorization, string subscription);

        /// <summary>
        /// Consulta de relaciones
        /// </summary>
        /// <remarks>
        /// Obtiene las posibles relaciones existentes para registrar beneficiarios en Monex. Se debe invocar este recurso antes de pre-registrar una cuenta de beneficiario.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Identificador de la suscripción a esta API</param>
        /// <returns>ApiResponse of RelationshipsResponse</returns>
        ApiResponse<RelationshipsResponse> GetAvailableRelationshipsMonexUsingGETWithHttpInfo (string authorization, string subscription);
        /// <summary>
        /// Consulta los beneficiarios por el identificador de la petición de registro
        /// </summary>
        /// <remarks>
        /// Obtiene los beneficiarios enviados para registro en una petición al contrato relacionado con la suscripción, Los beneficiarios son los que actualmente se encuentran registrados en banca Monex, que pertenezcan a la petición que se solicita.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="requestId">El identificador de la petición del registro de beneficiarios a esta API</param>
        /// <param name="subscription">El identificador de la suscripción a esta API</param>
        /// <returns>BeneficiariesResponse</returns>
        BeneficiariesResponse GetBeneficiariesByRequestId (string authorization, string requestId, string subscription);

        /// <summary>
        /// Consulta los beneficiarios por el identificador de la petición de registro
        /// </summary>
        /// <remarks>
        /// Obtiene los beneficiarios enviados para registro en una petición al contrato relacionado con la suscripción, Los beneficiarios son los que actualmente se encuentran registrados en banca Monex, que pertenezcan a la petición que se solicita.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="requestId">El identificador de la petición del registro de beneficiarios a esta API</param>
        /// <param name="subscription">El identificador de la suscripción a esta API</param>
        /// <returns>ApiResponse of BeneficiariesResponse</returns>
        ApiResponse<BeneficiariesResponse> GetBeneficiariesByRequestIdWithHttpInfo (string authorization, string requestId, string subscription);
        /// <summary>
        /// Consulta los beneficiarios registrados
        /// </summary>
        /// <remarks>
        /// Obtiene los beneficiarios registrados al contrato relacionado con la suscripción, Los beneficiarios son los que actualmente se encuentran registrados en banca Monex.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">El identificador de la suscripción a esta API</param>
        /// <param name="account">Cuenta del beneficiario, puede ser Clabe, TDD o Celular (optional)</param>
        /// <param name="rfc">RFC del beneficiario (optional)</param>
        /// <returns>BeneficiariesResponse</returns>
        BeneficiariesResponse GetBeneficiariesForAccountUsingGET (string authorization, string subscription, string account = null, string rfc = null);

        /// <summary>
        /// Consulta los beneficiarios registrados
        /// </summary>
        /// <remarks>
        /// Obtiene los beneficiarios registrados al contrato relacionado con la suscripción, Los beneficiarios son los que actualmente se encuentran registrados en banca Monex.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">El identificador de la suscripción a esta API</param>
        /// <param name="account">Cuenta del beneficiario, puede ser Clabe, TDD o Celular (optional)</param>
        /// <param name="rfc">RFC del beneficiario (optional)</param>
        /// <returns>ApiResponse of BeneficiariesResponse</returns>
        ApiResponse<BeneficiariesResponse> GetBeneficiariesForAccountUsingGETWithHttpInfo (string authorization, string subscription, string account = null, string rfc = null);
        /// <summary>
        /// Pre-registro de cuentas de beneficiarios.
        /// </summary>
        /// <remarks>
        /// Pre-registra una o más cuentas de beneficiario en la plataforma, proporcionando una URL donde el cuentahabiente Monex debe ingresar un valor de su llave digital para confirmar el alta de las cuentas de beneficiarios.&lt;br/&gt;Los posibles valores de &lt;i&gt;relationship&lt;/i&gt; y &lt;i&gt;kind_of_relationship&lt;/i&gt; se deben  obtener de /subscriptions/{subscription}/beneficiaries/relationships.&lt;br/&gt;&lt;br/&gt;La confirmación de registro en Monex se realiza a través de una llamada a los webhooks registrados con el evento ACCOUNT.CREATED.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Información de la cuenta del beneficiario</param>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">El identificador de la suscripción a esta API</param>
        /// <returns>TokenRequiredResponse</returns>
        TokenRequiredResponse PreRegisterAccountsUsingPOST (AccountRequest body, string authorization, string subscription);

        /// <summary>
        /// Pre-registro de cuentas de beneficiarios.
        /// </summary>
        /// <remarks>
        /// Pre-registra una o más cuentas de beneficiario en la plataforma, proporcionando una URL donde el cuentahabiente Monex debe ingresar un valor de su llave digital para confirmar el alta de las cuentas de beneficiarios.&lt;br/&gt;Los posibles valores de &lt;i&gt;relationship&lt;/i&gt; y &lt;i&gt;kind_of_relationship&lt;/i&gt; se deben  obtener de /subscriptions/{subscription}/beneficiaries/relationships.&lt;br/&gt;&lt;br/&gt;La confirmación de registro en Monex se realiza a través de una llamada a los webhooks registrados con el evento ACCOUNT.CREATED.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Información de la cuenta del beneficiario</param>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">El identificador de la suscripción a esta API</param>
        /// <returns>ApiResponse of TokenRequiredResponse</returns>
        ApiResponse<TokenRequiredResponse> PreRegisterAccountsUsingPOSTWithHttpInfo (AccountRequest body, string authorization, string subscription);
        /// <summary>
        /// Eliminación de beneficiarios SPEI® sin confirmar
        /// </summary>
        /// <remarks>
        /// Elimina un conjunto de beneficiarios a registrar en la cuenta del cliente Monex relacionada a la suscripción, los beneficiarios no deben haber sido confirmados por el cliente.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="requestId">Identificador de los beneficiarios a eliminar</param>
        /// <param name="subscription">El identificador de la suscripción a esta API</param>
        /// <returns></returns>
        void RemoveBeneficiariesPendingUsingDELETE (string authorization, string requestId, string subscription);

        /// <summary>
        /// Eliminación de beneficiarios SPEI® sin confirmar
        /// </summary>
        /// <remarks>
        /// Elimina un conjunto de beneficiarios a registrar en la cuenta del cliente Monex relacionada a la suscripción, los beneficiarios no deben haber sido confirmados por el cliente.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="requestId">Identificador de los beneficiarios a eliminar</param>
        /// <param name="subscription">El identificador de la suscripción a esta API</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveBeneficiariesPendingUsingDELETEWithHttpInfo (string authorization, string requestId, string subscription);
        /// <summary>
        /// Actualiza el monto límite
        /// </summary>
        /// <remarks>
        /// Actualiza el monto límite a la cuenta de beneficiario proporcionada relacionada al contrato perteneciente a la subscripción.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Información de la cuenta y el monto límite a actualizar</param>
        /// <param name="authorization">Header para token</param>
        /// <param name="account">Cuenta a actualizar</param>
        /// <param name="subscription">El identificador de la suscripción a esta API</param>
        /// <returns></returns>
        void UpdateAmountLimitAccountUsingPUT (AmountRequest body, string authorization, string account, string subscription);

        /// <summary>
        /// Actualiza el monto límite
        /// </summary>
        /// <remarks>
        /// Actualiza el monto límite a la cuenta de beneficiario proporcionada relacionada al contrato perteneciente a la subscripción.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Información de la cuenta y el monto límite a actualizar</param>
        /// <param name="authorization">Header para token</param>
        /// <param name="account">Cuenta a actualizar</param>
        /// <param name="subscription">El identificador de la suscripción a esta API</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateAmountLimitAccountUsingPUTWithHttpInfo (AmountRequest body, string authorization, string account, string subscription);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Elimina la cuenta del beneficiario
        /// </summary>
        /// <remarks>
        /// Borra la cuenta de beneficiario proporcionada relacionada al contrato perteneciente a la subscripción. La cuenta a borrar debe ser una cuenta que opere con SPEI.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="account">La cuenta del beneciario que será eliminada</param>
        /// <param name="subscription">El identificador de la suscripción a esta API</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAccountUsingDELETEAsync (string authorization, string account, string subscription);

        /// <summary>
        /// Elimina la cuenta del beneficiario
        /// </summary>
        /// <remarks>
        /// Borra la cuenta de beneficiario proporcionada relacionada al contrato perteneciente a la subscripción. La cuenta a borrar debe ser una cuenta que opere con SPEI.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="account">La cuenta del beneciario que será eliminada</param>
        /// <param name="subscription">El identificador de la suscripción a esta API</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAccountUsingDELETEAsyncWithHttpInfo (string authorization, string account, string subscription);
        /// <summary>
        /// Consulta de relaciones
        /// </summary>
        /// <remarks>
        /// Obtiene las posibles relaciones existentes para registrar beneficiarios en Monex. Se debe invocar este recurso antes de pre-registrar una cuenta de beneficiario.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Identificador de la suscripción a esta API</param>
        /// <returns>Task of RelationshipsResponse</returns>
        System.Threading.Tasks.Task<RelationshipsResponse> GetAvailableRelationshipsMonexUsingGETAsync (string authorization, string subscription);

        /// <summary>
        /// Consulta de relaciones
        /// </summary>
        /// <remarks>
        /// Obtiene las posibles relaciones existentes para registrar beneficiarios en Monex. Se debe invocar este recurso antes de pre-registrar una cuenta de beneficiario.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Identificador de la suscripción a esta API</param>
        /// <returns>Task of ApiResponse (RelationshipsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RelationshipsResponse>> GetAvailableRelationshipsMonexUsingGETAsyncWithHttpInfo (string authorization, string subscription);
        /// <summary>
        /// Consulta los beneficiarios por el identificador de la petición de registro
        /// </summary>
        /// <remarks>
        /// Obtiene los beneficiarios enviados para registro en una petición al contrato relacionado con la suscripción, Los beneficiarios son los que actualmente se encuentran registrados en banca Monex, que pertenezcan a la petición que se solicita.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="requestId">El identificador de la petición del registro de beneficiarios a esta API</param>
        /// <param name="subscription">El identificador de la suscripción a esta API</param>
        /// <returns>Task of BeneficiariesResponse</returns>
        System.Threading.Tasks.Task<BeneficiariesResponse> GetBeneficiariesByRequestIdAsync (string authorization, string requestId, string subscription);

        /// <summary>
        /// Consulta los beneficiarios por el identificador de la petición de registro
        /// </summary>
        /// <remarks>
        /// Obtiene los beneficiarios enviados para registro en una petición al contrato relacionado con la suscripción, Los beneficiarios son los que actualmente se encuentran registrados en banca Monex, que pertenezcan a la petición que se solicita.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="requestId">El identificador de la petición del registro de beneficiarios a esta API</param>
        /// <param name="subscription">El identificador de la suscripción a esta API</param>
        /// <returns>Task of ApiResponse (BeneficiariesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BeneficiariesResponse>> GetBeneficiariesByRequestIdAsyncWithHttpInfo (string authorization, string requestId, string subscription);
        /// <summary>
        /// Consulta los beneficiarios registrados
        /// </summary>
        /// <remarks>
        /// Obtiene los beneficiarios registrados al contrato relacionado con la suscripción, Los beneficiarios son los que actualmente se encuentran registrados en banca Monex.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">El identificador de la suscripción a esta API</param>
        /// <param name="account">Cuenta del beneficiario, puede ser Clabe, TDD o Celular (optional)</param>
        /// <param name="rfc">RFC del beneficiario (optional)</param>
        /// <returns>Task of BeneficiariesResponse</returns>
        System.Threading.Tasks.Task<BeneficiariesResponse> GetBeneficiariesForAccountUsingGETAsync (string authorization, string subscription, string account = null, string rfc = null);

        /// <summary>
        /// Consulta los beneficiarios registrados
        /// </summary>
        /// <remarks>
        /// Obtiene los beneficiarios registrados al contrato relacionado con la suscripción, Los beneficiarios son los que actualmente se encuentran registrados en banca Monex.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">El identificador de la suscripción a esta API</param>
        /// <param name="account">Cuenta del beneficiario, puede ser Clabe, TDD o Celular (optional)</param>
        /// <param name="rfc">RFC del beneficiario (optional)</param>
        /// <returns>Task of ApiResponse (BeneficiariesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BeneficiariesResponse>> GetBeneficiariesForAccountUsingGETAsyncWithHttpInfo (string authorization, string subscription, string account = null, string rfc = null);
        /// <summary>
        /// Pre-registro de cuentas de beneficiarios.
        /// </summary>
        /// <remarks>
        /// Pre-registra una o más cuentas de beneficiario en la plataforma, proporcionando una URL donde el cuentahabiente Monex debe ingresar un valor de su llave digital para confirmar el alta de las cuentas de beneficiarios.&lt;br/&gt;Los posibles valores de &lt;i&gt;relationship&lt;/i&gt; y &lt;i&gt;kind_of_relationship&lt;/i&gt; se deben  obtener de /subscriptions/{subscription}/beneficiaries/relationships.&lt;br/&gt;&lt;br/&gt;La confirmación de registro en Monex se realiza a través de una llamada a los webhooks registrados con el evento ACCOUNT.CREATED.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Información de la cuenta del beneficiario</param>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">El identificador de la suscripción a esta API</param>
        /// <returns>Task of TokenRequiredResponse</returns>
        System.Threading.Tasks.Task<TokenRequiredResponse> PreRegisterAccountsUsingPOSTAsync (AccountRequest body, string authorization, string subscription);

        /// <summary>
        /// Pre-registro de cuentas de beneficiarios.
        /// </summary>
        /// <remarks>
        /// Pre-registra una o más cuentas de beneficiario en la plataforma, proporcionando una URL donde el cuentahabiente Monex debe ingresar un valor de su llave digital para confirmar el alta de las cuentas de beneficiarios.&lt;br/&gt;Los posibles valores de &lt;i&gt;relationship&lt;/i&gt; y &lt;i&gt;kind_of_relationship&lt;/i&gt; se deben  obtener de /subscriptions/{subscription}/beneficiaries/relationships.&lt;br/&gt;&lt;br/&gt;La confirmación de registro en Monex se realiza a través de una llamada a los webhooks registrados con el evento ACCOUNT.CREATED.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Información de la cuenta del beneficiario</param>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">El identificador de la suscripción a esta API</param>
        /// <returns>Task of ApiResponse (TokenRequiredResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TokenRequiredResponse>> PreRegisterAccountsUsingPOSTAsyncWithHttpInfo (AccountRequest body, string authorization, string subscription);
        /// <summary>
        /// Eliminación de beneficiarios SPEI® sin confirmar
        /// </summary>
        /// <remarks>
        /// Elimina un conjunto de beneficiarios a registrar en la cuenta del cliente Monex relacionada a la suscripción, los beneficiarios no deben haber sido confirmados por el cliente.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="requestId">Identificador de los beneficiarios a eliminar</param>
        /// <param name="subscription">El identificador de la suscripción a esta API</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveBeneficiariesPendingUsingDELETEAsync (string authorization, string requestId, string subscription);

        /// <summary>
        /// Eliminación de beneficiarios SPEI® sin confirmar
        /// </summary>
        /// <remarks>
        /// Elimina un conjunto de beneficiarios a registrar en la cuenta del cliente Monex relacionada a la suscripción, los beneficiarios no deben haber sido confirmados por el cliente.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="requestId">Identificador de los beneficiarios a eliminar</param>
        /// <param name="subscription">El identificador de la suscripción a esta API</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveBeneficiariesPendingUsingDELETEAsyncWithHttpInfo (string authorization, string requestId, string subscription);
        /// <summary>
        /// Actualiza el monto límite
        /// </summary>
        /// <remarks>
        /// Actualiza el monto límite a la cuenta de beneficiario proporcionada relacionada al contrato perteneciente a la subscripción.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Información de la cuenta y el monto límite a actualizar</param>
        /// <param name="authorization">Header para token</param>
        /// <param name="account">Cuenta a actualizar</param>
        /// <param name="subscription">El identificador de la suscripción a esta API</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateAmountLimitAccountUsingPUTAsync (AmountRequest body, string authorization, string account, string subscription);

        /// <summary>
        /// Actualiza el monto límite
        /// </summary>
        /// <remarks>
        /// Actualiza el monto límite a la cuenta de beneficiario proporcionada relacionada al contrato perteneciente a la subscripción.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Información de la cuenta y el monto límite a actualizar</param>
        /// <param name="authorization">Header para token</param>
        /// <param name="account">Cuenta a actualizar</param>
        /// <param name="subscription">El identificador de la suscripción a esta API</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAmountLimitAccountUsingPUTAsyncWithHttpInfo (AmountRequest body, string authorization, string account, string subscription);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class CuentasDeBeneficiariosSPEIApi : ICuentasDeBeneficiariosSPEIApi
    {
        private MX.Wire4.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CuentasDeBeneficiariosSPEIApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CuentasDeBeneficiariosSPEIApi(String basePath)
        {
            this.Configuration = new MX.Wire4.Client.Configuration { BasePath = basePath };

            ExceptionFactory = MX.Wire4.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CuentasDeBeneficiariosSPEIApi"/> class
        /// </summary>
        /// <returns></returns>
        public CuentasDeBeneficiariosSPEIApi()
        {
            this.Configuration = MX.Wire4.Client.Configuration.Default;

            ExceptionFactory = MX.Wire4.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CuentasDeBeneficiariosSPEIApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CuentasDeBeneficiariosSPEIApi(MX.Wire4.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = MX.Wire4.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = MX.Wire4.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public MX.Wire4.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MX.Wire4.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Elimina la cuenta del beneficiario Borra la cuenta de beneficiario proporcionada relacionada al contrato perteneciente a la subscripción. La cuenta a borrar debe ser una cuenta que opere con SPEI.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="account">La cuenta del beneciario que será eliminada</param>
        /// <param name="subscription">El identificador de la suscripción a esta API</param>
        /// <returns></returns>
        public void DeleteAccountUsingDELETE (string authorization, string account, string subscription)
        {
             DeleteAccountUsingDELETEWithHttpInfo(authorization, account, subscription);
        }

        /// <summary>
        /// Elimina la cuenta del beneficiario Borra la cuenta de beneficiario proporcionada relacionada al contrato perteneciente a la subscripción. La cuenta a borrar debe ser una cuenta que opere con SPEI.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="account">La cuenta del beneciario que será eliminada</param>
        /// <param name="subscription">El identificador de la suscripción a esta API</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAccountUsingDELETEWithHttpInfo (string authorization, string account, string subscription)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CuentasDeBeneficiariosSPEIApi->DeleteAccountUsingDELETE");
            // verify the required parameter 'account' is set
            if (account == null)
                throw new ApiException(400, "Missing required parameter 'account' when calling CuentasDeBeneficiariosSPEIApi->DeleteAccountUsingDELETE");
            // verify the required parameter 'subscription' is set
            if (subscription == null)
                throw new ApiException(400, "Missing required parameter 'subscription' when calling CuentasDeBeneficiariosSPEIApi->DeleteAccountUsingDELETE");

            var localVarPath = "/subscriptions/{subscription}/beneficiaries/spei/{account}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (account != null) localVarPathParams.Add("account", this.Configuration.ApiClient.ParameterToString(account)); // path parameter
            if (subscription != null) localVarPathParams.Add("subscription", this.Configuration.ApiClient.ParameterToString(subscription)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAccountUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Elimina la cuenta del beneficiario Borra la cuenta de beneficiario proporcionada relacionada al contrato perteneciente a la subscripción. La cuenta a borrar debe ser una cuenta que opere con SPEI.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="account">La cuenta del beneciario que será eliminada</param>
        /// <param name="subscription">El identificador de la suscripción a esta API</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAccountUsingDELETEAsync (string authorization, string account, string subscription)
        {
             await DeleteAccountUsingDELETEAsyncWithHttpInfo(authorization, account, subscription);

        }

        /// <summary>
        /// Elimina la cuenta del beneficiario Borra la cuenta de beneficiario proporcionada relacionada al contrato perteneciente a la subscripción. La cuenta a borrar debe ser una cuenta que opere con SPEI.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="account">La cuenta del beneciario que será eliminada</param>
        /// <param name="subscription">El identificador de la suscripción a esta API</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAccountUsingDELETEAsyncWithHttpInfo (string authorization, string account, string subscription)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CuentasDeBeneficiariosSPEIApi->DeleteAccountUsingDELETE");
            // verify the required parameter 'account' is set
            if (account == null)
                throw new ApiException(400, "Missing required parameter 'account' when calling CuentasDeBeneficiariosSPEIApi->DeleteAccountUsingDELETE");
            // verify the required parameter 'subscription' is set
            if (subscription == null)
                throw new ApiException(400, "Missing required parameter 'subscription' when calling CuentasDeBeneficiariosSPEIApi->DeleteAccountUsingDELETE");

            var localVarPath = "/subscriptions/{subscription}/beneficiaries/spei/{account}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (account != null) localVarPathParams.Add("account", this.Configuration.ApiClient.ParameterToString(account)); // path parameter
            if (subscription != null) localVarPathParams.Add("subscription", this.Configuration.ApiClient.ParameterToString(subscription)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAccountUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Consulta de relaciones Obtiene las posibles relaciones existentes para registrar beneficiarios en Monex. Se debe invocar este recurso antes de pre-registrar una cuenta de beneficiario.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Identificador de la suscripción a esta API</param>
        /// <returns>RelationshipsResponse</returns>
        public RelationshipsResponse GetAvailableRelationshipsMonexUsingGET (string authorization, string subscription)
        {
             ApiResponse<RelationshipsResponse> localVarResponse = GetAvailableRelationshipsMonexUsingGETWithHttpInfo(authorization, subscription);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Consulta de relaciones Obtiene las posibles relaciones existentes para registrar beneficiarios en Monex. Se debe invocar este recurso antes de pre-registrar una cuenta de beneficiario.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Identificador de la suscripción a esta API</param>
        /// <returns>ApiResponse of RelationshipsResponse</returns>
        public ApiResponse< RelationshipsResponse > GetAvailableRelationshipsMonexUsingGETWithHttpInfo (string authorization, string subscription)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CuentasDeBeneficiariosSPEIApi->GetAvailableRelationshipsMonexUsingGET");
            // verify the required parameter 'subscription' is set
            if (subscription == null)
                throw new ApiException(400, "Missing required parameter 'subscription' when calling CuentasDeBeneficiariosSPEIApi->GetAvailableRelationshipsMonexUsingGET");

            var localVarPath = "/subscriptions/{subscription}/beneficiaries/relationships";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscription != null) localVarPathParams.Add("subscription", this.Configuration.ApiClient.ParameterToString(subscription)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAvailableRelationshipsMonexUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RelationshipsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RelationshipsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RelationshipsResponse)));
        }

        /// <summary>
        /// Consulta de relaciones Obtiene las posibles relaciones existentes para registrar beneficiarios en Monex. Se debe invocar este recurso antes de pre-registrar una cuenta de beneficiario.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Identificador de la suscripción a esta API</param>
        /// <returns>Task of RelationshipsResponse</returns>
        public async System.Threading.Tasks.Task<RelationshipsResponse> GetAvailableRelationshipsMonexUsingGETAsync (string authorization, string subscription)
        {
             ApiResponse<RelationshipsResponse> localVarResponse = await GetAvailableRelationshipsMonexUsingGETAsyncWithHttpInfo(authorization, subscription);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Consulta de relaciones Obtiene las posibles relaciones existentes para registrar beneficiarios en Monex. Se debe invocar este recurso antes de pre-registrar una cuenta de beneficiario.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Identificador de la suscripción a esta API</param>
        /// <returns>Task of ApiResponse (RelationshipsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RelationshipsResponse>> GetAvailableRelationshipsMonexUsingGETAsyncWithHttpInfo (string authorization, string subscription)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CuentasDeBeneficiariosSPEIApi->GetAvailableRelationshipsMonexUsingGET");
            // verify the required parameter 'subscription' is set
            if (subscription == null)
                throw new ApiException(400, "Missing required parameter 'subscription' when calling CuentasDeBeneficiariosSPEIApi->GetAvailableRelationshipsMonexUsingGET");

            var localVarPath = "/subscriptions/{subscription}/beneficiaries/relationships";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscription != null) localVarPathParams.Add("subscription", this.Configuration.ApiClient.ParameterToString(subscription)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAvailableRelationshipsMonexUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RelationshipsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RelationshipsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RelationshipsResponse)));
        }

        /// <summary>
        /// Consulta los beneficiarios por el identificador de la petición de registro Obtiene los beneficiarios enviados para registro en una petición al contrato relacionado con la suscripción, Los beneficiarios son los que actualmente se encuentran registrados en banca Monex, que pertenezcan a la petición que se solicita.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="requestId">El identificador de la petición del registro de beneficiarios a esta API</param>
        /// <param name="subscription">El identificador de la suscripción a esta API</param>
        /// <returns>BeneficiariesResponse</returns>
        public BeneficiariesResponse GetBeneficiariesByRequestId (string authorization, string requestId, string subscription)
        {
             ApiResponse<BeneficiariesResponse> localVarResponse = GetBeneficiariesByRequestIdWithHttpInfo(authorization, requestId, subscription);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Consulta los beneficiarios por el identificador de la petición de registro Obtiene los beneficiarios enviados para registro en una petición al contrato relacionado con la suscripción, Los beneficiarios son los que actualmente se encuentran registrados en banca Monex, que pertenezcan a la petición que se solicita.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="requestId">El identificador de la petición del registro de beneficiarios a esta API</param>
        /// <param name="subscription">El identificador de la suscripción a esta API</param>
        /// <returns>ApiResponse of BeneficiariesResponse</returns>
        public ApiResponse< BeneficiariesResponse > GetBeneficiariesByRequestIdWithHttpInfo (string authorization, string requestId, string subscription)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CuentasDeBeneficiariosSPEIApi->GetBeneficiariesByRequestId");
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling CuentasDeBeneficiariosSPEIApi->GetBeneficiariesByRequestId");
            // verify the required parameter 'subscription' is set
            if (subscription == null)
                throw new ApiException(400, "Missing required parameter 'subscription' when calling CuentasDeBeneficiariosSPEIApi->GetBeneficiariesByRequestId");

            var localVarPath = "/subscriptions/{subscription}/beneficiaries/spei/{requestId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestId != null) localVarPathParams.Add("requestId", this.Configuration.ApiClient.ParameterToString(requestId)); // path parameter
            if (subscription != null) localVarPathParams.Add("subscription", this.Configuration.ApiClient.ParameterToString(subscription)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBeneficiariesByRequestId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BeneficiariesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BeneficiariesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BeneficiariesResponse)));
        }

        /// <summary>
        /// Consulta los beneficiarios por el identificador de la petición de registro Obtiene los beneficiarios enviados para registro en una petición al contrato relacionado con la suscripción, Los beneficiarios son los que actualmente se encuentran registrados en banca Monex, que pertenezcan a la petición que se solicita.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="requestId">El identificador de la petición del registro de beneficiarios a esta API</param>
        /// <param name="subscription">El identificador de la suscripción a esta API</param>
        /// <returns>Task of BeneficiariesResponse</returns>
        public async System.Threading.Tasks.Task<BeneficiariesResponse> GetBeneficiariesByRequestIdAsync (string authorization, string requestId, string subscription)
        {
             ApiResponse<BeneficiariesResponse> localVarResponse = await GetBeneficiariesByRequestIdAsyncWithHttpInfo(authorization, requestId, subscription);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Consulta los beneficiarios por el identificador de la petición de registro Obtiene los beneficiarios enviados para registro en una petición al contrato relacionado con la suscripción, Los beneficiarios son los que actualmente se encuentran registrados en banca Monex, que pertenezcan a la petición que se solicita.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="requestId">El identificador de la petición del registro de beneficiarios a esta API</param>
        /// <param name="subscription">El identificador de la suscripción a esta API</param>
        /// <returns>Task of ApiResponse (BeneficiariesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BeneficiariesResponse>> GetBeneficiariesByRequestIdAsyncWithHttpInfo (string authorization, string requestId, string subscription)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CuentasDeBeneficiariosSPEIApi->GetBeneficiariesByRequestId");
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling CuentasDeBeneficiariosSPEIApi->GetBeneficiariesByRequestId");
            // verify the required parameter 'subscription' is set
            if (subscription == null)
                throw new ApiException(400, "Missing required parameter 'subscription' when calling CuentasDeBeneficiariosSPEIApi->GetBeneficiariesByRequestId");

            var localVarPath = "/subscriptions/{subscription}/beneficiaries/spei/{requestId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestId != null) localVarPathParams.Add("requestId", this.Configuration.ApiClient.ParameterToString(requestId)); // path parameter
            if (subscription != null) localVarPathParams.Add("subscription", this.Configuration.ApiClient.ParameterToString(subscription)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBeneficiariesByRequestId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BeneficiariesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BeneficiariesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BeneficiariesResponse)));
        }

        /// <summary>
        /// Consulta los beneficiarios registrados Obtiene los beneficiarios registrados al contrato relacionado con la suscripción, Los beneficiarios son los que actualmente se encuentran registrados en banca Monex.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">El identificador de la suscripción a esta API</param>
        /// <param name="account">Cuenta del beneficiario, puede ser Clabe, TDD o Celular (optional)</param>
        /// <param name="rfc">RFC del beneficiario (optional)</param>
        /// <returns>BeneficiariesResponse</returns>
        public BeneficiariesResponse GetBeneficiariesForAccountUsingGET (string authorization, string subscription, string account = null, string rfc = null)
        {
             ApiResponse<BeneficiariesResponse> localVarResponse = GetBeneficiariesForAccountUsingGETWithHttpInfo(authorization, subscription, account, rfc);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Consulta los beneficiarios registrados Obtiene los beneficiarios registrados al contrato relacionado con la suscripción, Los beneficiarios son los que actualmente se encuentran registrados en banca Monex.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">El identificador de la suscripción a esta API</param>
        /// <param name="account">Cuenta del beneficiario, puede ser Clabe, TDD o Celular (optional)</param>
        /// <param name="rfc">RFC del beneficiario (optional)</param>
        /// <returns>ApiResponse of BeneficiariesResponse</returns>
        public ApiResponse< BeneficiariesResponse > GetBeneficiariesForAccountUsingGETWithHttpInfo (string authorization, string subscription, string account = null, string rfc = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CuentasDeBeneficiariosSPEIApi->GetBeneficiariesForAccountUsingGET");
            // verify the required parameter 'subscription' is set
            if (subscription == null)
                throw new ApiException(400, "Missing required parameter 'subscription' when calling CuentasDeBeneficiariosSPEIApi->GetBeneficiariesForAccountUsingGET");

            var localVarPath = "/subscriptions/{subscription}/beneficiaries/spei";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscription != null) localVarPathParams.Add("subscription", this.Configuration.ApiClient.ParameterToString(subscription)); // path parameter
            if (account != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "account", account)); // query parameter
            if (rfc != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rfc", rfc)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBeneficiariesForAccountUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BeneficiariesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BeneficiariesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BeneficiariesResponse)));
        }

        /// <summary>
        /// Consulta los beneficiarios registrados Obtiene los beneficiarios registrados al contrato relacionado con la suscripción, Los beneficiarios son los que actualmente se encuentran registrados en banca Monex.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">El identificador de la suscripción a esta API</param>
        /// <param name="account">Cuenta del beneficiario, puede ser Clabe, TDD o Celular (optional)</param>
        /// <param name="rfc">RFC del beneficiario (optional)</param>
        /// <returns>Task of BeneficiariesResponse</returns>
        public async System.Threading.Tasks.Task<BeneficiariesResponse> GetBeneficiariesForAccountUsingGETAsync (string authorization, string subscription, string account = null, string rfc = null)
        {
             ApiResponse<BeneficiariesResponse> localVarResponse = await GetBeneficiariesForAccountUsingGETAsyncWithHttpInfo(authorization, subscription, account, rfc);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Consulta los beneficiarios registrados Obtiene los beneficiarios registrados al contrato relacionado con la suscripción, Los beneficiarios son los que actualmente se encuentran registrados en banca Monex.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">El identificador de la suscripción a esta API</param>
        /// <param name="account">Cuenta del beneficiario, puede ser Clabe, TDD o Celular (optional)</param>
        /// <param name="rfc">RFC del beneficiario (optional)</param>
        /// <returns>Task of ApiResponse (BeneficiariesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BeneficiariesResponse>> GetBeneficiariesForAccountUsingGETAsyncWithHttpInfo (string authorization, string subscription, string account = null, string rfc = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CuentasDeBeneficiariosSPEIApi->GetBeneficiariesForAccountUsingGET");
            // verify the required parameter 'subscription' is set
            if (subscription == null)
                throw new ApiException(400, "Missing required parameter 'subscription' when calling CuentasDeBeneficiariosSPEIApi->GetBeneficiariesForAccountUsingGET");

            var localVarPath = "/subscriptions/{subscription}/beneficiaries/spei";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscription != null) localVarPathParams.Add("subscription", this.Configuration.ApiClient.ParameterToString(subscription)); // path parameter
            if (account != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "account", account)); // query parameter
            if (rfc != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rfc", rfc)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBeneficiariesForAccountUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BeneficiariesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BeneficiariesResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BeneficiariesResponse)));
        }

        /// <summary>
        /// Pre-registro de cuentas de beneficiarios. Pre-registra una o más cuentas de beneficiario en la plataforma, proporcionando una URL donde el cuentahabiente Monex debe ingresar un valor de su llave digital para confirmar el alta de las cuentas de beneficiarios.&lt;br/&gt;Los posibles valores de &lt;i&gt;relationship&lt;/i&gt; y &lt;i&gt;kind_of_relationship&lt;/i&gt; se deben  obtener de /subscriptions/{subscription}/beneficiaries/relationships.&lt;br/&gt;&lt;br/&gt;La confirmación de registro en Monex se realiza a través de una llamada a los webhooks registrados con el evento ACCOUNT.CREATED.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Información de la cuenta del beneficiario</param>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">El identificador de la suscripción a esta API</param>
        /// <returns>TokenRequiredResponse</returns>
        public TokenRequiredResponse PreRegisterAccountsUsingPOST (AccountRequest body, string authorization, string subscription)
        {
             ApiResponse<TokenRequiredResponse> localVarResponse = PreRegisterAccountsUsingPOSTWithHttpInfo(body, authorization, subscription);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Pre-registro de cuentas de beneficiarios. Pre-registra una o más cuentas de beneficiario en la plataforma, proporcionando una URL donde el cuentahabiente Monex debe ingresar un valor de su llave digital para confirmar el alta de las cuentas de beneficiarios.&lt;br/&gt;Los posibles valores de &lt;i&gt;relationship&lt;/i&gt; y &lt;i&gt;kind_of_relationship&lt;/i&gt; se deben  obtener de /subscriptions/{subscription}/beneficiaries/relationships.&lt;br/&gt;&lt;br/&gt;La confirmación de registro en Monex se realiza a través de una llamada a los webhooks registrados con el evento ACCOUNT.CREATED.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Información de la cuenta del beneficiario</param>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">El identificador de la suscripción a esta API</param>
        /// <returns>ApiResponse of TokenRequiredResponse</returns>
        public ApiResponse< TokenRequiredResponse > PreRegisterAccountsUsingPOSTWithHttpInfo (AccountRequest body, string authorization, string subscription)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CuentasDeBeneficiariosSPEIApi->PreRegisterAccountsUsingPOST");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CuentasDeBeneficiariosSPEIApi->PreRegisterAccountsUsingPOST");
            // verify the required parameter 'subscription' is set
            if (subscription == null)
                throw new ApiException(400, "Missing required parameter 'subscription' when calling CuentasDeBeneficiariosSPEIApi->PreRegisterAccountsUsingPOST");

            var localVarPath = "/subscriptions/{subscription}/beneficiaries/spei";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscription != null) localVarPathParams.Add("subscription", this.Configuration.ApiClient.ParameterToString(subscription)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PreRegisterAccountsUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TokenRequiredResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TokenRequiredResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TokenRequiredResponse)));
        }

        /// <summary>
        /// Pre-registro de cuentas de beneficiarios. Pre-registra una o más cuentas de beneficiario en la plataforma, proporcionando una URL donde el cuentahabiente Monex debe ingresar un valor de su llave digital para confirmar el alta de las cuentas de beneficiarios.&lt;br/&gt;Los posibles valores de &lt;i&gt;relationship&lt;/i&gt; y &lt;i&gt;kind_of_relationship&lt;/i&gt; se deben  obtener de /subscriptions/{subscription}/beneficiaries/relationships.&lt;br/&gt;&lt;br/&gt;La confirmación de registro en Monex se realiza a través de una llamada a los webhooks registrados con el evento ACCOUNT.CREATED.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Información de la cuenta del beneficiario</param>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">El identificador de la suscripción a esta API</param>
        /// <returns>Task of TokenRequiredResponse</returns>
        public async System.Threading.Tasks.Task<TokenRequiredResponse> PreRegisterAccountsUsingPOSTAsync (AccountRequest body, string authorization, string subscription)
        {
             ApiResponse<TokenRequiredResponse> localVarResponse = await PreRegisterAccountsUsingPOSTAsyncWithHttpInfo(body, authorization, subscription);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Pre-registro de cuentas de beneficiarios. Pre-registra una o más cuentas de beneficiario en la plataforma, proporcionando una URL donde el cuentahabiente Monex debe ingresar un valor de su llave digital para confirmar el alta de las cuentas de beneficiarios.&lt;br/&gt;Los posibles valores de &lt;i&gt;relationship&lt;/i&gt; y &lt;i&gt;kind_of_relationship&lt;/i&gt; se deben  obtener de /subscriptions/{subscription}/beneficiaries/relationships.&lt;br/&gt;&lt;br/&gt;La confirmación de registro en Monex se realiza a través de una llamada a los webhooks registrados con el evento ACCOUNT.CREATED.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Información de la cuenta del beneficiario</param>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">El identificador de la suscripción a esta API</param>
        /// <returns>Task of ApiResponse (TokenRequiredResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TokenRequiredResponse>> PreRegisterAccountsUsingPOSTAsyncWithHttpInfo (AccountRequest body, string authorization, string subscription)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CuentasDeBeneficiariosSPEIApi->PreRegisterAccountsUsingPOST");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CuentasDeBeneficiariosSPEIApi->PreRegisterAccountsUsingPOST");
            // verify the required parameter 'subscription' is set
            if (subscription == null)
                throw new ApiException(400, "Missing required parameter 'subscription' when calling CuentasDeBeneficiariosSPEIApi->PreRegisterAccountsUsingPOST");

            var localVarPath = "/subscriptions/{subscription}/beneficiaries/spei";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscription != null) localVarPathParams.Add("subscription", this.Configuration.ApiClient.ParameterToString(subscription)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PreRegisterAccountsUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TokenRequiredResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TokenRequiredResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TokenRequiredResponse)));
        }

        /// <summary>
        /// Eliminación de beneficiarios SPEI® sin confirmar Elimina un conjunto de beneficiarios a registrar en la cuenta del cliente Monex relacionada a la suscripción, los beneficiarios no deben haber sido confirmados por el cliente.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="requestId">Identificador de los beneficiarios a eliminar</param>
        /// <param name="subscription">El identificador de la suscripción a esta API</param>
        /// <returns></returns>
        public void RemoveBeneficiariesPendingUsingDELETE (string authorization, string requestId, string subscription)
        {
             RemoveBeneficiariesPendingUsingDELETEWithHttpInfo(authorization, requestId, subscription);
        }

        /// <summary>
        /// Eliminación de beneficiarios SPEI® sin confirmar Elimina un conjunto de beneficiarios a registrar en la cuenta del cliente Monex relacionada a la suscripción, los beneficiarios no deben haber sido confirmados por el cliente.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="requestId">Identificador de los beneficiarios a eliminar</param>
        /// <param name="subscription">El identificador de la suscripción a esta API</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveBeneficiariesPendingUsingDELETEWithHttpInfo (string authorization, string requestId, string subscription)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CuentasDeBeneficiariosSPEIApi->RemoveBeneficiariesPendingUsingDELETE");
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling CuentasDeBeneficiariosSPEIApi->RemoveBeneficiariesPendingUsingDELETE");
            // verify the required parameter 'subscription' is set
            if (subscription == null)
                throw new ApiException(400, "Missing required parameter 'subscription' when calling CuentasDeBeneficiariosSPEIApi->RemoveBeneficiariesPendingUsingDELETE");

            var localVarPath = "/subscriptions/{subscription}/beneficiaries/spei/request/{requestId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestId != null) localVarPathParams.Add("requestId", this.Configuration.ApiClient.ParameterToString(requestId)); // path parameter
            if (subscription != null) localVarPathParams.Add("subscription", this.Configuration.ApiClient.ParameterToString(subscription)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveBeneficiariesPendingUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Eliminación de beneficiarios SPEI® sin confirmar Elimina un conjunto de beneficiarios a registrar en la cuenta del cliente Monex relacionada a la suscripción, los beneficiarios no deben haber sido confirmados por el cliente.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="requestId">Identificador de los beneficiarios a eliminar</param>
        /// <param name="subscription">El identificador de la suscripción a esta API</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveBeneficiariesPendingUsingDELETEAsync (string authorization, string requestId, string subscription)
        {
             await RemoveBeneficiariesPendingUsingDELETEAsyncWithHttpInfo(authorization, requestId, subscription);

        }

        /// <summary>
        /// Eliminación de beneficiarios SPEI® sin confirmar Elimina un conjunto de beneficiarios a registrar en la cuenta del cliente Monex relacionada a la suscripción, los beneficiarios no deben haber sido confirmados por el cliente.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="requestId">Identificador de los beneficiarios a eliminar</param>
        /// <param name="subscription">El identificador de la suscripción a esta API</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveBeneficiariesPendingUsingDELETEAsyncWithHttpInfo (string authorization, string requestId, string subscription)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CuentasDeBeneficiariosSPEIApi->RemoveBeneficiariesPendingUsingDELETE");
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling CuentasDeBeneficiariosSPEIApi->RemoveBeneficiariesPendingUsingDELETE");
            // verify the required parameter 'subscription' is set
            if (subscription == null)
                throw new ApiException(400, "Missing required parameter 'subscription' when calling CuentasDeBeneficiariosSPEIApi->RemoveBeneficiariesPendingUsingDELETE");

            var localVarPath = "/subscriptions/{subscription}/beneficiaries/spei/request/{requestId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestId != null) localVarPathParams.Add("requestId", this.Configuration.ApiClient.ParameterToString(requestId)); // path parameter
            if (subscription != null) localVarPathParams.Add("subscription", this.Configuration.ApiClient.ParameterToString(subscription)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveBeneficiariesPendingUsingDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Actualiza el monto límite Actualiza el monto límite a la cuenta de beneficiario proporcionada relacionada al contrato perteneciente a la subscripción.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Información de la cuenta y el monto límite a actualizar</param>
        /// <param name="authorization">Header para token</param>
        /// <param name="account">Cuenta a actualizar</param>
        /// <param name="subscription">El identificador de la suscripción a esta API</param>
        /// <returns></returns>
        public void UpdateAmountLimitAccountUsingPUT (AmountRequest body, string authorization, string account, string subscription)
        {
             UpdateAmountLimitAccountUsingPUTWithHttpInfo(body, authorization, account, subscription);
        }

        /// <summary>
        /// Actualiza el monto límite Actualiza el monto límite a la cuenta de beneficiario proporcionada relacionada al contrato perteneciente a la subscripción.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Información de la cuenta y el monto límite a actualizar</param>
        /// <param name="authorization">Header para token</param>
        /// <param name="account">Cuenta a actualizar</param>
        /// <param name="subscription">El identificador de la suscripción a esta API</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateAmountLimitAccountUsingPUTWithHttpInfo (AmountRequest body, string authorization, string account, string subscription)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CuentasDeBeneficiariosSPEIApi->UpdateAmountLimitAccountUsingPUT");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CuentasDeBeneficiariosSPEIApi->UpdateAmountLimitAccountUsingPUT");
            // verify the required parameter 'account' is set
            if (account == null)
                throw new ApiException(400, "Missing required parameter 'account' when calling CuentasDeBeneficiariosSPEIApi->UpdateAmountLimitAccountUsingPUT");
            // verify the required parameter 'subscription' is set
            if (subscription == null)
                throw new ApiException(400, "Missing required parameter 'subscription' when calling CuentasDeBeneficiariosSPEIApi->UpdateAmountLimitAccountUsingPUT");

            var localVarPath = "/subscriptions/{subscription}/beneficiaries/spei/{account}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (account != null) localVarPathParams.Add("account", this.Configuration.ApiClient.ParameterToString(account)); // path parameter
            if (subscription != null) localVarPathParams.Add("subscription", this.Configuration.ApiClient.ParameterToString(subscription)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAmountLimitAccountUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Actualiza el monto límite Actualiza el monto límite a la cuenta de beneficiario proporcionada relacionada al contrato perteneciente a la subscripción.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Información de la cuenta y el monto límite a actualizar</param>
        /// <param name="authorization">Header para token</param>
        /// <param name="account">Cuenta a actualizar</param>
        /// <param name="subscription">El identificador de la suscripción a esta API</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateAmountLimitAccountUsingPUTAsync (AmountRequest body, string authorization, string account, string subscription)
        {
             await UpdateAmountLimitAccountUsingPUTAsyncWithHttpInfo(body, authorization, account, subscription);

        }

        /// <summary>
        /// Actualiza el monto límite Actualiza el monto límite a la cuenta de beneficiario proporcionada relacionada al contrato perteneciente a la subscripción.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Información de la cuenta y el monto límite a actualizar</param>
        /// <param name="authorization">Header para token</param>
        /// <param name="account">Cuenta a actualizar</param>
        /// <param name="subscription">El identificador de la suscripción a esta API</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAmountLimitAccountUsingPUTAsyncWithHttpInfo (AmountRequest body, string authorization, string account, string subscription)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CuentasDeBeneficiariosSPEIApi->UpdateAmountLimitAccountUsingPUT");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CuentasDeBeneficiariosSPEIApi->UpdateAmountLimitAccountUsingPUT");
            // verify the required parameter 'account' is set
            if (account == null)
                throw new ApiException(400, "Missing required parameter 'account' when calling CuentasDeBeneficiariosSPEIApi->UpdateAmountLimitAccountUsingPUT");
            // verify the required parameter 'subscription' is set
            if (subscription == null)
                throw new ApiException(400, "Missing required parameter 'subscription' when calling CuentasDeBeneficiariosSPEIApi->UpdateAmountLimitAccountUsingPUT");

            var localVarPath = "/subscriptions/{subscription}/beneficiaries/spei/{account}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (account != null) localVarPathParams.Add("account", this.Configuration.ApiClient.ParameterToString(account)); // path parameter
            if (subscription != null) localVarPathParams.Add("subscription", this.Configuration.ApiClient.ParameterToString(subscription)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAmountLimitAccountUsingPUT", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
