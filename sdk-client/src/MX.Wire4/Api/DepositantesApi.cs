/* 
 * Wire4RestAPI
 *
 * Referencia de la API de Wire4
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using MX.Wire4.Client;
using MX.Wire4.Model;

namespace MX.Wire4.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IDepositantesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Número de depositantes por suscripción
        /// </summary>
        /// <remarks>
        /// Obtiene la cantidad el total de depositantes asociados al contrato relacionado a la suscripción.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>DepositantCountResponse</returns>
        DepositantCountResponse GetDepositantsTotalsUsingGET (string authorization, string subscription);

        /// <summary>
        /// Número de depositantes por suscripción
        /// </summary>
        /// <remarks>
        /// Obtiene la cantidad el total de depositantes asociados al contrato relacionado a la suscripción.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>ApiResponse of DepositantCountResponse</returns>
        ApiResponse<DepositantCountResponse> GetDepositantsTotalsUsingGETWithHttpInfo (string authorization, string subscription);
        /// <summary>
        /// Consulta de cuentas de depositantes
        /// </summary>
        /// <remarks>
        /// Obtiene una lista de depositantes asociados al contrato relacionado a la suscripción.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>GetDepositants</returns>
        GetDepositants GetDepositantsUsingGET (string authorization, string subscription);

        /// <summary>
        /// Consulta de cuentas de depositantes
        /// </summary>
        /// <remarks>
        /// Obtiene una lista de depositantes asociados al contrato relacionado a la suscripción.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>ApiResponse of GetDepositants</returns>
        ApiResponse<GetDepositants> GetDepositantsUsingGETWithHttpInfo (string authorization, string subscription);
        /// <summary>
        /// Registra un nuevo depositante
        /// </summary>
        /// <remarks>
        /// Registra un nuevo depositante en el contrato asociado a la suscripción. Si intenta registrar un depositante que previamente se había registrado, se devolverá la cuenta clabe asociada al Álias que está intentando registrar. Queda bajo responsabilidad del cliente verificar que los álias sean únicos en sus sistemas.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Depositant info</param>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>DepositantsResponse</returns>
        DepositantsResponse RegisterDepositantsUsingPOST (DepositantsRegister body, string authorization, string subscription);

        /// <summary>
        /// Registra un nuevo depositante
        /// </summary>
        /// <remarks>
        /// Registra un nuevo depositante en el contrato asociado a la suscripción. Si intenta registrar un depositante que previamente se había registrado, se devolverá la cuenta clabe asociada al Álias que está intentando registrar. Queda bajo responsabilidad del cliente verificar que los álias sean únicos en sus sistemas.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Depositant info</param>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>ApiResponse of DepositantsResponse</returns>
        ApiResponse<DepositantsResponse> RegisterDepositantsUsingPOSTWithHttpInfo (DepositantsRegister body, string authorization, string subscription);
        /// <summary>
        /// Solicitud para actualizar el estado de un depositante sin utilizar la suscripción
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="account">Es la cuenta que va a ser actualizada.</param>
        /// <param name="action">Es la cuenta que va a ser actualizada.</param>
        /// <param name="body">Empty value (optional)</param>
        /// <returns>Depositant</returns>
        Depositant UpdateStatusDepositantsNoSuscrptionUsingPATCH (string authorization, string account, string action, string body = null);

        /// <summary>
        /// Solicitud para actualizar el estado de un depositante sin utilizar la suscripción
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="account">Es la cuenta que va a ser actualizada.</param>
        /// <param name="action">Es la cuenta que va a ser actualizada.</param>
        /// <param name="body">Empty value (optional)</param>
        /// <returns>ApiResponse of Depositant</returns>
        ApiResponse<Depositant> UpdateStatusDepositantsNoSuscrptionUsingPATCHWithHttpInfo (string authorization, string account, string action, string body = null);
        /// <summary>
        /// Solicitud para actualizar el estado de un depossitante
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="account">Es la cuenta que va a ser actualizada.</param>
        /// <param name="action">Es la cuenta que va a ser actualizada.</param>
        /// <param name="body">Empty value (optional)</param>
        /// <returns>Depositant</returns>
        Depositant UpdateStatusDepositantsUsingPATCH (string authorization, string account, string action, string body = null);

        /// <summary>
        /// Solicitud para actualizar el estado de un depossitante
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="account">Es la cuenta que va a ser actualizada.</param>
        /// <param name="action">Es la cuenta que va a ser actualizada.</param>
        /// <param name="body">Empty value (optional)</param>
        /// <returns>ApiResponse of Depositant</returns>
        ApiResponse<Depositant> UpdateStatusDepositantsUsingPATCHWithHttpInfo (string authorization, string account, string action, string body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Número de depositantes por suscripción
        /// </summary>
        /// <remarks>
        /// Obtiene la cantidad el total de depositantes asociados al contrato relacionado a la suscripción.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>Task of DepositantCountResponse</returns>
        System.Threading.Tasks.Task<DepositantCountResponse> GetDepositantsTotalsUsingGETAsync (string authorization, string subscription);

        /// <summary>
        /// Número de depositantes por suscripción
        /// </summary>
        /// <remarks>
        /// Obtiene la cantidad el total de depositantes asociados al contrato relacionado a la suscripción.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>Task of ApiResponse (DepositantCountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DepositantCountResponse>> GetDepositantsTotalsUsingGETAsyncWithHttpInfo (string authorization, string subscription);
        /// <summary>
        /// Consulta de cuentas de depositantes
        /// </summary>
        /// <remarks>
        /// Obtiene una lista de depositantes asociados al contrato relacionado a la suscripción.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>Task of GetDepositants</returns>
        System.Threading.Tasks.Task<GetDepositants> GetDepositantsUsingGETAsync (string authorization, string subscription);

        /// <summary>
        /// Consulta de cuentas de depositantes
        /// </summary>
        /// <remarks>
        /// Obtiene una lista de depositantes asociados al contrato relacionado a la suscripción.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>Task of ApiResponse (GetDepositants)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDepositants>> GetDepositantsUsingGETAsyncWithHttpInfo (string authorization, string subscription);
        /// <summary>
        /// Registra un nuevo depositante
        /// </summary>
        /// <remarks>
        /// Registra un nuevo depositante en el contrato asociado a la suscripción. Si intenta registrar un depositante que previamente se había registrado, se devolverá la cuenta clabe asociada al Álias que está intentando registrar. Queda bajo responsabilidad del cliente verificar que los álias sean únicos en sus sistemas.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Depositant info</param>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>Task of DepositantsResponse</returns>
        System.Threading.Tasks.Task<DepositantsResponse> RegisterDepositantsUsingPOSTAsync (DepositantsRegister body, string authorization, string subscription);

        /// <summary>
        /// Registra un nuevo depositante
        /// </summary>
        /// <remarks>
        /// Registra un nuevo depositante en el contrato asociado a la suscripción. Si intenta registrar un depositante que previamente se había registrado, se devolverá la cuenta clabe asociada al Álias que está intentando registrar. Queda bajo responsabilidad del cliente verificar que los álias sean únicos en sus sistemas.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Depositant info</param>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>Task of ApiResponse (DepositantsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DepositantsResponse>> RegisterDepositantsUsingPOSTAsyncWithHttpInfo (DepositantsRegister body, string authorization, string subscription);
        /// <summary>
        /// Solicitud para actualizar el estado de un depositante sin utilizar la suscripción
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="account">Es la cuenta que va a ser actualizada.</param>
        /// <param name="action">Es la cuenta que va a ser actualizada.</param>
        /// <param name="body">Empty value (optional)</param>
        /// <returns>Task of Depositant</returns>
        System.Threading.Tasks.Task<Depositant> UpdateStatusDepositantsNoSuscrptionUsingPATCHAsync (string authorization, string account, string action, string body = null);

        /// <summary>
        /// Solicitud para actualizar el estado de un depositante sin utilizar la suscripción
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="account">Es la cuenta que va a ser actualizada.</param>
        /// <param name="action">Es la cuenta que va a ser actualizada.</param>
        /// <param name="body">Empty value (optional)</param>
        /// <returns>Task of ApiResponse (Depositant)</returns>
        System.Threading.Tasks.Task<ApiResponse<Depositant>> UpdateStatusDepositantsNoSuscrptionUsingPATCHAsyncWithHttpInfo (string authorization, string account, string action, string body = null);
        /// <summary>
        /// Solicitud para actualizar el estado de un depossitante
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="account">Es la cuenta que va a ser actualizada.</param>
        /// <param name="action">Es la cuenta que va a ser actualizada.</param>
        /// <param name="body">Empty value (optional)</param>
        /// <returns>Task of Depositant</returns>
        System.Threading.Tasks.Task<Depositant> UpdateStatusDepositantsUsingPATCHAsync (string authorization, string account, string action, string body = null);

        /// <summary>
        /// Solicitud para actualizar el estado de un depossitante
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="account">Es la cuenta que va a ser actualizada.</param>
        /// <param name="action">Es la cuenta que va a ser actualizada.</param>
        /// <param name="body">Empty value (optional)</param>
        /// <returns>Task of ApiResponse (Depositant)</returns>
        System.Threading.Tasks.Task<ApiResponse<Depositant>> UpdateStatusDepositantsUsingPATCHAsyncWithHttpInfo (string authorization, string account, string action, string body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class DepositantesApi : IDepositantesApi
    {
        private MX.Wire4.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DepositantesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DepositantesApi(String basePath)
        {
            this.Configuration = new MX.Wire4.Client.Configuration { BasePath = basePath };

            ExceptionFactory = MX.Wire4.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DepositantesApi"/> class
        /// </summary>
        /// <returns></returns>
        public DepositantesApi()
        {
            this.Configuration = MX.Wire4.Client.Configuration.Default;

            ExceptionFactory = MX.Wire4.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DepositantesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DepositantesApi(MX.Wire4.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = MX.Wire4.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = MX.Wire4.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public MX.Wire4.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MX.Wire4.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Número de depositantes por suscripción Obtiene la cantidad el total de depositantes asociados al contrato relacionado a la suscripción.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>DepositantCountResponse</returns>
        public DepositantCountResponse GetDepositantsTotalsUsingGET (string authorization, string subscription)
        {
             ApiResponse<DepositantCountResponse> localVarResponse = GetDepositantsTotalsUsingGETWithHttpInfo(authorization, subscription);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Número de depositantes por suscripción Obtiene la cantidad el total de depositantes asociados al contrato relacionado a la suscripción.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>ApiResponse of DepositantCountResponse</returns>
        public ApiResponse< DepositantCountResponse > GetDepositantsTotalsUsingGETWithHttpInfo (string authorization, string subscription)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DepositantesApi->GetDepositantsTotalsUsingGET");
            // verify the required parameter 'subscription' is set
            if (subscription == null)
                throw new ApiException(400, "Missing required parameter 'subscription' when calling DepositantesApi->GetDepositantsTotalsUsingGET");

            var localVarPath = "/subscriptions/{subscription}/depositants/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscription != null) localVarPathParams.Add("subscription", this.Configuration.ApiClient.ParameterToString(subscription)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDepositantsTotalsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DepositantCountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DepositantCountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DepositantCountResponse)));
        }

        /// <summary>
        /// Número de depositantes por suscripción Obtiene la cantidad el total de depositantes asociados al contrato relacionado a la suscripción.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>Task of DepositantCountResponse</returns>
        public async System.Threading.Tasks.Task<DepositantCountResponse> GetDepositantsTotalsUsingGETAsync (string authorization, string subscription)
        {
             ApiResponse<DepositantCountResponse> localVarResponse = await GetDepositantsTotalsUsingGETAsyncWithHttpInfo(authorization, subscription);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Número de depositantes por suscripción Obtiene la cantidad el total de depositantes asociados al contrato relacionado a la suscripción.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>Task of ApiResponse (DepositantCountResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DepositantCountResponse>> GetDepositantsTotalsUsingGETAsyncWithHttpInfo (string authorization, string subscription)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DepositantesApi->GetDepositantsTotalsUsingGET");
            // verify the required parameter 'subscription' is set
            if (subscription == null)
                throw new ApiException(400, "Missing required parameter 'subscription' when calling DepositantesApi->GetDepositantsTotalsUsingGET");

            var localVarPath = "/subscriptions/{subscription}/depositants/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscription != null) localVarPathParams.Add("subscription", this.Configuration.ApiClient.ParameterToString(subscription)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDepositantsTotalsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DepositantCountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DepositantCountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DepositantCountResponse)));
        }

        /// <summary>
        /// Consulta de cuentas de depositantes Obtiene una lista de depositantes asociados al contrato relacionado a la suscripción.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>GetDepositants</returns>
        public GetDepositants GetDepositantsUsingGET (string authorization, string subscription)
        {
             ApiResponse<GetDepositants> localVarResponse = GetDepositantsUsingGETWithHttpInfo(authorization, subscription);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Consulta de cuentas de depositantes Obtiene una lista de depositantes asociados al contrato relacionado a la suscripción.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>ApiResponse of GetDepositants</returns>
        public ApiResponse< GetDepositants > GetDepositantsUsingGETWithHttpInfo (string authorization, string subscription)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DepositantesApi->GetDepositantsUsingGET");
            // verify the required parameter 'subscription' is set
            if (subscription == null)
                throw new ApiException(400, "Missing required parameter 'subscription' when calling DepositantesApi->GetDepositantsUsingGET");

            var localVarPath = "/subscriptions/{subscription}/depositants";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscription != null) localVarPathParams.Add("subscription", this.Configuration.ApiClient.ParameterToString(subscription)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDepositantsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDepositants>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetDepositants) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDepositants)));
        }

        /// <summary>
        /// Consulta de cuentas de depositantes Obtiene una lista de depositantes asociados al contrato relacionado a la suscripción.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>Task of GetDepositants</returns>
        public async System.Threading.Tasks.Task<GetDepositants> GetDepositantsUsingGETAsync (string authorization, string subscription)
        {
             ApiResponse<GetDepositants> localVarResponse = await GetDepositantsUsingGETAsyncWithHttpInfo(authorization, subscription);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Consulta de cuentas de depositantes Obtiene una lista de depositantes asociados al contrato relacionado a la suscripción.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>Task of ApiResponse (GetDepositants)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetDepositants>> GetDepositantsUsingGETAsyncWithHttpInfo (string authorization, string subscription)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DepositantesApi->GetDepositantsUsingGET");
            // verify the required parameter 'subscription' is set
            if (subscription == null)
                throw new ApiException(400, "Missing required parameter 'subscription' when calling DepositantesApi->GetDepositantsUsingGET");

            var localVarPath = "/subscriptions/{subscription}/depositants";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscription != null) localVarPathParams.Add("subscription", this.Configuration.ApiClient.ParameterToString(subscription)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDepositantsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetDepositants>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GetDepositants) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetDepositants)));
        }

        /// <summary>
        /// Registra un nuevo depositante Registra un nuevo depositante en el contrato asociado a la suscripción. Si intenta registrar un depositante que previamente se había registrado, se devolverá la cuenta clabe asociada al Álias que está intentando registrar. Queda bajo responsabilidad del cliente verificar que los álias sean únicos en sus sistemas.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Depositant info</param>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>DepositantsResponse</returns>
        public DepositantsResponse RegisterDepositantsUsingPOST (DepositantsRegister body, string authorization, string subscription)
        {
             ApiResponse<DepositantsResponse> localVarResponse = RegisterDepositantsUsingPOSTWithHttpInfo(body, authorization, subscription);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Registra un nuevo depositante Registra un nuevo depositante en el contrato asociado a la suscripción. Si intenta registrar un depositante que previamente se había registrado, se devolverá la cuenta clabe asociada al Álias que está intentando registrar. Queda bajo responsabilidad del cliente verificar que los álias sean únicos en sus sistemas.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Depositant info</param>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>ApiResponse of DepositantsResponse</returns>
        public ApiResponse< DepositantsResponse > RegisterDepositantsUsingPOSTWithHttpInfo (DepositantsRegister body, string authorization, string subscription)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DepositantesApi->RegisterDepositantsUsingPOST");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DepositantesApi->RegisterDepositantsUsingPOST");
            // verify the required parameter 'subscription' is set
            if (subscription == null)
                throw new ApiException(400, "Missing required parameter 'subscription' when calling DepositantesApi->RegisterDepositantsUsingPOST");

            var localVarPath = "/subscriptions/{subscription}/depositants";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscription != null) localVarPathParams.Add("subscription", this.Configuration.ApiClient.ParameterToString(subscription)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterDepositantsUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DepositantsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DepositantsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DepositantsResponse)));
        }

        /// <summary>
        /// Registra un nuevo depositante Registra un nuevo depositante en el contrato asociado a la suscripción. Si intenta registrar un depositante que previamente se había registrado, se devolverá la cuenta clabe asociada al Álias que está intentando registrar. Queda bajo responsabilidad del cliente verificar que los álias sean únicos en sus sistemas.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Depositant info</param>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>Task of DepositantsResponse</returns>
        public async System.Threading.Tasks.Task<DepositantsResponse> RegisterDepositantsUsingPOSTAsync (DepositantsRegister body, string authorization, string subscription)
        {
             ApiResponse<DepositantsResponse> localVarResponse = await RegisterDepositantsUsingPOSTAsyncWithHttpInfo(body, authorization, subscription);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Registra un nuevo depositante Registra un nuevo depositante en el contrato asociado a la suscripción. Si intenta registrar un depositante que previamente se había registrado, se devolverá la cuenta clabe asociada al Álias que está intentando registrar. Queda bajo responsabilidad del cliente verificar que los álias sean únicos en sus sistemas.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Depositant info</param>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>Task of ApiResponse (DepositantsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DepositantsResponse>> RegisterDepositantsUsingPOSTAsyncWithHttpInfo (DepositantsRegister body, string authorization, string subscription)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DepositantesApi->RegisterDepositantsUsingPOST");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DepositantesApi->RegisterDepositantsUsingPOST");
            // verify the required parameter 'subscription' is set
            if (subscription == null)
                throw new ApiException(400, "Missing required parameter 'subscription' when calling DepositantesApi->RegisterDepositantsUsingPOST");

            var localVarPath = "/subscriptions/{subscription}/depositants";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscription != null) localVarPathParams.Add("subscription", this.Configuration.ApiClient.ParameterToString(subscription)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterDepositantsUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DepositantsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DepositantsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DepositantsResponse)));
        }

        /// <summary>
        /// Solicitud para actualizar el estado de un depositante sin utilizar la suscripción 
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="account">Es la cuenta que va a ser actualizada.</param>
        /// <param name="action">Es la cuenta que va a ser actualizada.</param>
        /// <param name="body">Empty value (optional)</param>
        /// <returns>Depositant</returns>
        public Depositant UpdateStatusDepositantsNoSuscrptionUsingPATCH (string authorization, string account, string action, string body = null)
        {
             ApiResponse<Depositant> localVarResponse = UpdateStatusDepositantsNoSuscrptionUsingPATCHWithHttpInfo(authorization, account, action, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Solicitud para actualizar el estado de un depositante sin utilizar la suscripción 
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="account">Es la cuenta que va a ser actualizada.</param>
        /// <param name="action">Es la cuenta que va a ser actualizada.</param>
        /// <param name="body">Empty value (optional)</param>
        /// <returns>ApiResponse of Depositant</returns>
        public ApiResponse< Depositant > UpdateStatusDepositantsNoSuscrptionUsingPATCHWithHttpInfo (string authorization, string account, string action, string body = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DepositantesApi->UpdateStatusDepositantsNoSuscrptionUsingPATCH");
            // verify the required parameter 'account' is set
            if (account == null)
                throw new ApiException(400, "Missing required parameter 'account' when calling DepositantesApi->UpdateStatusDepositantsNoSuscrptionUsingPATCH");
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling DepositantesApi->UpdateStatusDepositantsNoSuscrptionUsingPATCH");

            var localVarPath = "/depositants/{account}/{action}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (account != null) localVarPathParams.Add("account", this.Configuration.ApiClient.ParameterToString(account)); // path parameter
            if (action != null) localVarPathParams.Add("action", this.Configuration.ApiClient.ParameterToString(action)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateStatusDepositantsNoSuscrptionUsingPATCH", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Depositant>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Depositant) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Depositant)));
        }

        /// <summary>
        /// Solicitud para actualizar el estado de un depositante sin utilizar la suscripción 
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="account">Es la cuenta que va a ser actualizada.</param>
        /// <param name="action">Es la cuenta que va a ser actualizada.</param>
        /// <param name="body">Empty value (optional)</param>
        /// <returns>Task of Depositant</returns>
        public async System.Threading.Tasks.Task<Depositant> UpdateStatusDepositantsNoSuscrptionUsingPATCHAsync (string authorization, string account, string action, string body = null)
        {
             ApiResponse<Depositant> localVarResponse = await UpdateStatusDepositantsNoSuscrptionUsingPATCHAsyncWithHttpInfo(authorization, account, action, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Solicitud para actualizar el estado de un depositante sin utilizar la suscripción 
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="account">Es la cuenta que va a ser actualizada.</param>
        /// <param name="action">Es la cuenta que va a ser actualizada.</param>
        /// <param name="body">Empty value (optional)</param>
        /// <returns>Task of ApiResponse (Depositant)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Depositant>> UpdateStatusDepositantsNoSuscrptionUsingPATCHAsyncWithHttpInfo (string authorization, string account, string action, string body = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DepositantesApi->UpdateStatusDepositantsNoSuscrptionUsingPATCH");
            // verify the required parameter 'account' is set
            if (account == null)
                throw new ApiException(400, "Missing required parameter 'account' when calling DepositantesApi->UpdateStatusDepositantsNoSuscrptionUsingPATCH");
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling DepositantesApi->UpdateStatusDepositantsNoSuscrptionUsingPATCH");

            var localVarPath = "/depositants/{account}/{action}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (account != null) localVarPathParams.Add("account", this.Configuration.ApiClient.ParameterToString(account)); // path parameter
            if (action != null) localVarPathParams.Add("action", this.Configuration.ApiClient.ParameterToString(action)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateStatusDepositantsNoSuscrptionUsingPATCH", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Depositant>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Depositant) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Depositant)));
        }

        /// <summary>
        /// Solicitud para actualizar el estado de un depossitante 
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="account">Es la cuenta que va a ser actualizada.</param>
        /// <param name="action">Es la cuenta que va a ser actualizada.</param>
        /// <param name="body">Empty value (optional)</param>
        /// <returns>Depositant</returns>
        public Depositant UpdateStatusDepositantsUsingPATCH (string authorization, string account, string action, string body = null)
        {
             ApiResponse<Depositant> localVarResponse = UpdateStatusDepositantsUsingPATCHWithHttpInfo(authorization, account, action, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Solicitud para actualizar el estado de un depossitante 
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="account">Es la cuenta que va a ser actualizada.</param>
        /// <param name="action">Es la cuenta que va a ser actualizada.</param>
        /// <param name="body">Empty value (optional)</param>
        /// <returns>ApiResponse of Depositant</returns>
        public ApiResponse< Depositant > UpdateStatusDepositantsUsingPATCHWithHttpInfo (string authorization, string account, string action, string body = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DepositantesApi->UpdateStatusDepositantsUsingPATCH");
            // verify the required parameter 'account' is set
            if (account == null)
                throw new ApiException(400, "Missing required parameter 'account' when calling DepositantesApi->UpdateStatusDepositantsUsingPATCH");
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling DepositantesApi->UpdateStatusDepositantsUsingPATCH");

            var localVarPath = "/subscriptions/{subscription}/depositants/{account}/{action}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (account != null) localVarPathParams.Add("account", this.Configuration.ApiClient.ParameterToString(account)); // path parameter
            if (action != null) localVarPathParams.Add("action", this.Configuration.ApiClient.ParameterToString(action)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateStatusDepositantsUsingPATCH", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Depositant>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Depositant) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Depositant)));
        }

        /// <summary>
        /// Solicitud para actualizar el estado de un depossitante 
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="account">Es la cuenta que va a ser actualizada.</param>
        /// <param name="action">Es la cuenta que va a ser actualizada.</param>
        /// <param name="body">Empty value (optional)</param>
        /// <returns>Task of Depositant</returns>
        public async System.Threading.Tasks.Task<Depositant> UpdateStatusDepositantsUsingPATCHAsync (string authorization, string account, string action, string body = null)
        {
             ApiResponse<Depositant> localVarResponse = await UpdateStatusDepositantsUsingPATCHAsyncWithHttpInfo(authorization, account, action, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Solicitud para actualizar el estado de un depossitante 
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="account">Es la cuenta que va a ser actualizada.</param>
        /// <param name="action">Es la cuenta que va a ser actualizada.</param>
        /// <param name="body">Empty value (optional)</param>
        /// <returns>Task of ApiResponse (Depositant)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Depositant>> UpdateStatusDepositantsUsingPATCHAsyncWithHttpInfo (string authorization, string account, string action, string body = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DepositantesApi->UpdateStatusDepositantsUsingPATCH");
            // verify the required parameter 'account' is set
            if (account == null)
                throw new ApiException(400, "Missing required parameter 'account' when calling DepositantesApi->UpdateStatusDepositantsUsingPATCH");
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling DepositantesApi->UpdateStatusDepositantsUsingPATCH");

            var localVarPath = "/subscriptions/{subscription}/depositants/{account}/{action}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (account != null) localVarPathParams.Add("account", this.Configuration.ApiClient.ParameterToString(account)); // path parameter
            if (action != null) localVarPathParams.Add("action", this.Configuration.ApiClient.ParameterToString(action)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateStatusDepositantsUsingPATCH", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Depositant>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Depositant) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Depositant)));
        }

    }
}
