/* 
 * Wire4RestAPI
 *
 * Referencia de API. La API de Wire4 está organizada en torno a REST
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using MX.Wire4.Client;
using MX.Wire4.Model;

namespace MX.Wire4.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ITransferenciasSPIDApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Consulta de clasificaciones para operaciones SPID®
        /// </summary>
        /// <remarks>
        /// Obtiene las clasificaciones para operaciones con dólares (SPID®) de Monex.&lt;br/&gt;&lt;br/&gt;Este recurso se debe invocar previo al realizar una operación SPID.&lt;br/&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>SpidClassificationsResponseDTO</returns>
        SpidClassificationsResponseDTO GetSpidClassificationsUsingGET (string authorization, string subscription);

        /// <summary>
        /// Consulta de clasificaciones para operaciones SPID®
        /// </summary>
        /// <remarks>
        /// Obtiene las clasificaciones para operaciones con dólares (SPID®) de Monex.&lt;br/&gt;&lt;br/&gt;Este recurso se debe invocar previo al realizar una operación SPID.&lt;br/&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>ApiResponse of SpidClassificationsResponseDTO</returns>
        ApiResponse<SpidClassificationsResponseDTO> GetSpidClassificationsUsingGETWithHttpInfo (string authorization, string subscription);
        /// <summary>
        /// Registro de transferencias SPID®
        /// </summary>
        /// <remarks>
        /// Registra un conjunto de transferencias a realizar en la cuenta del cliente Monex relacionada a la suscripción. En la respuesta se proporcionará una dirección URL que lo llevará al centro de autorización para que las transferencias sean confirmadas (autorizadas) por el cliente para que se efectúen, para ello debe ingresar la llave electrónica (Token).&lt;br&gt; Nota: Debe considerar que el concepto de cada una de las transacciones solo debe contener caracteres alfanuméricos por lo que en caso de que se reciban caracteres como ñ o acentos serán sustituidos por n o en su caso por la letra sin acento. Los caracteres no alfanuméricos como pueden ser caracteres especiales serán eliminados.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Información de las transferencias SPID de salida</param>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>TokenRequiredResponse</returns>
        TokenRequiredResponse RegisterOutgoingSpidTransactionUsingPOST (TransactionOutgoingSpid body, string authorization, string subscription);

        /// <summary>
        /// Registro de transferencias SPID®
        /// </summary>
        /// <remarks>
        /// Registra un conjunto de transferencias a realizar en la cuenta del cliente Monex relacionada a la suscripción. En la respuesta se proporcionará una dirección URL que lo llevará al centro de autorización para que las transferencias sean confirmadas (autorizadas) por el cliente para que se efectúen, para ello debe ingresar la llave electrónica (Token).&lt;br&gt; Nota: Debe considerar que el concepto de cada una de las transacciones solo debe contener caracteres alfanuméricos por lo que en caso de que se reciban caracteres como ñ o acentos serán sustituidos por n o en su caso por la letra sin acento. Los caracteres no alfanuméricos como pueden ser caracteres especiales serán eliminados.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Información de las transferencias SPID de salida</param>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>ApiResponse of TokenRequiredResponse</returns>
        ApiResponse<TokenRequiredResponse> RegisterOutgoingSpidTransactionUsingPOSTWithHttpInfo (TransactionOutgoingSpid body, string authorization, string subscription);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Consulta de clasificaciones para operaciones SPID®
        /// </summary>
        /// <remarks>
        /// Obtiene las clasificaciones para operaciones con dólares (SPID®) de Monex.&lt;br/&gt;&lt;br/&gt;Este recurso se debe invocar previo al realizar una operación SPID.&lt;br/&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>Task of SpidClassificationsResponseDTO</returns>
        System.Threading.Tasks.Task<SpidClassificationsResponseDTO> GetSpidClassificationsUsingGETAsync (string authorization, string subscription);

        /// <summary>
        /// Consulta de clasificaciones para operaciones SPID®
        /// </summary>
        /// <remarks>
        /// Obtiene las clasificaciones para operaciones con dólares (SPID®) de Monex.&lt;br/&gt;&lt;br/&gt;Este recurso se debe invocar previo al realizar una operación SPID.&lt;br/&gt;&lt;br/&gt;
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>Task of ApiResponse (SpidClassificationsResponseDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<SpidClassificationsResponseDTO>> GetSpidClassificationsUsingGETAsyncWithHttpInfo (string authorization, string subscription);
        /// <summary>
        /// Registro de transferencias SPID®
        /// </summary>
        /// <remarks>
        /// Registra un conjunto de transferencias a realizar en la cuenta del cliente Monex relacionada a la suscripción. En la respuesta se proporcionará una dirección URL que lo llevará al centro de autorización para que las transferencias sean confirmadas (autorizadas) por el cliente para que se efectúen, para ello debe ingresar la llave electrónica (Token).&lt;br&gt; Nota: Debe considerar que el concepto de cada una de las transacciones solo debe contener caracteres alfanuméricos por lo que en caso de que se reciban caracteres como ñ o acentos serán sustituidos por n o en su caso por la letra sin acento. Los caracteres no alfanuméricos como pueden ser caracteres especiales serán eliminados.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Información de las transferencias SPID de salida</param>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>Task of TokenRequiredResponse</returns>
        System.Threading.Tasks.Task<TokenRequiredResponse> RegisterOutgoingSpidTransactionUsingPOSTAsync (TransactionOutgoingSpid body, string authorization, string subscription);

        /// <summary>
        /// Registro de transferencias SPID®
        /// </summary>
        /// <remarks>
        /// Registra un conjunto de transferencias a realizar en la cuenta del cliente Monex relacionada a la suscripción. En la respuesta se proporcionará una dirección URL que lo llevará al centro de autorización para que las transferencias sean confirmadas (autorizadas) por el cliente para que se efectúen, para ello debe ingresar la llave electrónica (Token).&lt;br&gt; Nota: Debe considerar que el concepto de cada una de las transacciones solo debe contener caracteres alfanuméricos por lo que en caso de que se reciban caracteres como ñ o acentos serán sustituidos por n o en su caso por la letra sin acento. Los caracteres no alfanuméricos como pueden ser caracteres especiales serán eliminados.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Información de las transferencias SPID de salida</param>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>Task of ApiResponse (TokenRequiredResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TokenRequiredResponse>> RegisterOutgoingSpidTransactionUsingPOSTAsyncWithHttpInfo (TransactionOutgoingSpid body, string authorization, string subscription);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class TransferenciasSPIDApi : ITransferenciasSPIDApi
    {
        private MX.Wire4.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TransferenciasSPIDApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TransferenciasSPIDApi(String basePath)
        {
            this.Configuration = new MX.Wire4.Client.Configuration { BasePath = basePath };

            ExceptionFactory = MX.Wire4.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransferenciasSPIDApi"/> class
        /// </summary>
        /// <returns></returns>
        public TransferenciasSPIDApi()
        {
            this.Configuration = MX.Wire4.Client.Configuration.Default;

            ExceptionFactory = MX.Wire4.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransferenciasSPIDApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TransferenciasSPIDApi(MX.Wire4.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = MX.Wire4.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = MX.Wire4.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public MX.Wire4.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MX.Wire4.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Consulta de clasificaciones para operaciones SPID® Obtiene las clasificaciones para operaciones con dólares (SPID®) de Monex.&lt;br/&gt;&lt;br/&gt;Este recurso se debe invocar previo al realizar una operación SPID.&lt;br/&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>SpidClassificationsResponseDTO</returns>
        public SpidClassificationsResponseDTO GetSpidClassificationsUsingGET (string authorization, string subscription)
        {
             ApiResponse<SpidClassificationsResponseDTO> localVarResponse = GetSpidClassificationsUsingGETWithHttpInfo(authorization, subscription);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Consulta de clasificaciones para operaciones SPID® Obtiene las clasificaciones para operaciones con dólares (SPID®) de Monex.&lt;br/&gt;&lt;br/&gt;Este recurso se debe invocar previo al realizar una operación SPID.&lt;br/&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>ApiResponse of SpidClassificationsResponseDTO</returns>
        public ApiResponse< SpidClassificationsResponseDTO > GetSpidClassificationsUsingGETWithHttpInfo (string authorization, string subscription)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling TransferenciasSPIDApi->GetSpidClassificationsUsingGET");
            // verify the required parameter 'subscription' is set
            if (subscription == null)
                throw new ApiException(400, "Missing required parameter 'subscription' when calling TransferenciasSPIDApi->GetSpidClassificationsUsingGET");

            var localVarPath = "/subscriptions/{subscription}/beneficiaries/spid/classifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscription != null) localVarPathParams.Add("subscription", this.Configuration.ApiClient.ParameterToString(subscription)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSpidClassificationsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SpidClassificationsResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SpidClassificationsResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SpidClassificationsResponseDTO)));
        }

        /// <summary>
        /// Consulta de clasificaciones para operaciones SPID® Obtiene las clasificaciones para operaciones con dólares (SPID®) de Monex.&lt;br/&gt;&lt;br/&gt;Este recurso se debe invocar previo al realizar una operación SPID.&lt;br/&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>Task of SpidClassificationsResponseDTO</returns>
        public async System.Threading.Tasks.Task<SpidClassificationsResponseDTO> GetSpidClassificationsUsingGETAsync (string authorization, string subscription)
        {
             ApiResponse<SpidClassificationsResponseDTO> localVarResponse = await GetSpidClassificationsUsingGETAsyncWithHttpInfo(authorization, subscription);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Consulta de clasificaciones para operaciones SPID® Obtiene las clasificaciones para operaciones con dólares (SPID®) de Monex.&lt;br/&gt;&lt;br/&gt;Este recurso se debe invocar previo al realizar una operación SPID.&lt;br/&gt;&lt;br/&gt;
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>Task of ApiResponse (SpidClassificationsResponseDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SpidClassificationsResponseDTO>> GetSpidClassificationsUsingGETAsyncWithHttpInfo (string authorization, string subscription)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling TransferenciasSPIDApi->GetSpidClassificationsUsingGET");
            // verify the required parameter 'subscription' is set
            if (subscription == null)
                throw new ApiException(400, "Missing required parameter 'subscription' when calling TransferenciasSPIDApi->GetSpidClassificationsUsingGET");

            var localVarPath = "/subscriptions/{subscription}/beneficiaries/spid/classifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscription != null) localVarPathParams.Add("subscription", this.Configuration.ApiClient.ParameterToString(subscription)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSpidClassificationsUsingGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SpidClassificationsResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SpidClassificationsResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SpidClassificationsResponseDTO)));
        }

        /// <summary>
        /// Registro de transferencias SPID® Registra un conjunto de transferencias a realizar en la cuenta del cliente Monex relacionada a la suscripción. En la respuesta se proporcionará una dirección URL que lo llevará al centro de autorización para que las transferencias sean confirmadas (autorizadas) por el cliente para que se efectúen, para ello debe ingresar la llave electrónica (Token).&lt;br&gt; Nota: Debe considerar que el concepto de cada una de las transacciones solo debe contener caracteres alfanuméricos por lo que en caso de que se reciban caracteres como ñ o acentos serán sustituidos por n o en su caso por la letra sin acento. Los caracteres no alfanuméricos como pueden ser caracteres especiales serán eliminados.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Información de las transferencias SPID de salida</param>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>TokenRequiredResponse</returns>
        public TokenRequiredResponse RegisterOutgoingSpidTransactionUsingPOST (TransactionOutgoingSpid body, string authorization, string subscription)
        {
             ApiResponse<TokenRequiredResponse> localVarResponse = RegisterOutgoingSpidTransactionUsingPOSTWithHttpInfo(body, authorization, subscription);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Registro de transferencias SPID® Registra un conjunto de transferencias a realizar en la cuenta del cliente Monex relacionada a la suscripción. En la respuesta se proporcionará una dirección URL que lo llevará al centro de autorización para que las transferencias sean confirmadas (autorizadas) por el cliente para que se efectúen, para ello debe ingresar la llave electrónica (Token).&lt;br&gt; Nota: Debe considerar que el concepto de cada una de las transacciones solo debe contener caracteres alfanuméricos por lo que en caso de que se reciban caracteres como ñ o acentos serán sustituidos por n o en su caso por la letra sin acento. Los caracteres no alfanuméricos como pueden ser caracteres especiales serán eliminados.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Información de las transferencias SPID de salida</param>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>ApiResponse of TokenRequiredResponse</returns>
        public ApiResponse< TokenRequiredResponse > RegisterOutgoingSpidTransactionUsingPOSTWithHttpInfo (TransactionOutgoingSpid body, string authorization, string subscription)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TransferenciasSPIDApi->RegisterOutgoingSpidTransactionUsingPOST");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling TransferenciasSPIDApi->RegisterOutgoingSpidTransactionUsingPOST");
            // verify the required parameter 'subscription' is set
            if (subscription == null)
                throw new ApiException(400, "Missing required parameter 'subscription' when calling TransferenciasSPIDApi->RegisterOutgoingSpidTransactionUsingPOST");

            var localVarPath = "/subscriptions/{subscription}/transactions/outcoming/spid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscription != null) localVarPathParams.Add("subscription", this.Configuration.ApiClient.ParameterToString(subscription)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterOutgoingSpidTransactionUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TokenRequiredResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TokenRequiredResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TokenRequiredResponse)));
        }

        /// <summary>
        /// Registro de transferencias SPID® Registra un conjunto de transferencias a realizar en la cuenta del cliente Monex relacionada a la suscripción. En la respuesta se proporcionará una dirección URL que lo llevará al centro de autorización para que las transferencias sean confirmadas (autorizadas) por el cliente para que se efectúen, para ello debe ingresar la llave electrónica (Token).&lt;br&gt; Nota: Debe considerar que el concepto de cada una de las transacciones solo debe contener caracteres alfanuméricos por lo que en caso de que se reciban caracteres como ñ o acentos serán sustituidos por n o en su caso por la letra sin acento. Los caracteres no alfanuméricos como pueden ser caracteres especiales serán eliminados.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Información de las transferencias SPID de salida</param>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>Task of TokenRequiredResponse</returns>
        public async System.Threading.Tasks.Task<TokenRequiredResponse> RegisterOutgoingSpidTransactionUsingPOSTAsync (TransactionOutgoingSpid body, string authorization, string subscription)
        {
             ApiResponse<TokenRequiredResponse> localVarResponse = await RegisterOutgoingSpidTransactionUsingPOSTAsyncWithHttpInfo(body, authorization, subscription);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Registro de transferencias SPID® Registra un conjunto de transferencias a realizar en la cuenta del cliente Monex relacionada a la suscripción. En la respuesta se proporcionará una dirección URL que lo llevará al centro de autorización para que las transferencias sean confirmadas (autorizadas) por el cliente para que se efectúen, para ello debe ingresar la llave electrónica (Token).&lt;br&gt; Nota: Debe considerar que el concepto de cada una de las transacciones solo debe contener caracteres alfanuméricos por lo que en caso de que se reciban caracteres como ñ o acentos serán sustituidos por n o en su caso por la letra sin acento. Los caracteres no alfanuméricos como pueden ser caracteres especiales serán eliminados.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Información de las transferencias SPID de salida</param>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>Task of ApiResponse (TokenRequiredResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TokenRequiredResponse>> RegisterOutgoingSpidTransactionUsingPOSTAsyncWithHttpInfo (TransactionOutgoingSpid body, string authorization, string subscription)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TransferenciasSPIDApi->RegisterOutgoingSpidTransactionUsingPOST");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling TransferenciasSPIDApi->RegisterOutgoingSpidTransactionUsingPOST");
            // verify the required parameter 'subscription' is set
            if (subscription == null)
                throw new ApiException(400, "Missing required parameter 'subscription' when calling TransferenciasSPIDApi->RegisterOutgoingSpidTransactionUsingPOST");

            var localVarPath = "/subscriptions/{subscription}/transactions/outcoming/spid";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscription != null) localVarPathParams.Add("subscription", this.Configuration.ApiClient.ParameterToString(subscription)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterOutgoingSpidTransactionUsingPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TokenRequiredResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TokenRequiredResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TokenRequiredResponse)));
        }

    }
}
