/* 
 * Wire4RestAPI
 *
 * Referencia de API. La API de Wire4 está organizada en torno a REST
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using MX.Wire4.Client;
using MX.Wire4.Model;

namespace MX.Wire4.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IAutorizacinDeDepsitosApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Consulta autorización de depósitos
        /// </summary>
        /// <remarks>
        /// Obtiene la información de la autorización de depósitos del contrato relacionado a la suscripción.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>DepositsAuthorizationResponse</returns>
        DepositsAuthorizationResponse GetDepositAuthConfigurations (string authorization, string subscription);

        /// <summary>
        /// Consulta autorización de depósitos
        /// </summary>
        /// <remarks>
        /// Obtiene la información de la autorización de depósitos del contrato relacionado a la suscripción.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>ApiResponse of DepositsAuthorizationResponse</returns>
        ApiResponse<DepositsAuthorizationResponse> GetDepositAuthConfigurationsWithHttpInfo (string authorization, string subscription);
        /// <summary>
        /// Habilita / Deshabilita la autorización de depósitos
        /// </summary>
        /// <remarks>
        /// Habilita o deshabilita la autorización de depósitos. Devuelve la información final de la autorización de depósitos del contrato relacionado a la suscripción al terminar.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Información para habilitar / deshabilitar la autorización de depósito</param>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>DepositsAuthorizationResponse</returns>
        DepositsAuthorizationResponse PutDepositAuthConfigurations (DepositAuthorizationRequest body, string authorization, string subscription);

        /// <summary>
        /// Habilita / Deshabilita la autorización de depósitos
        /// </summary>
        /// <remarks>
        /// Habilita o deshabilita la autorización de depósitos. Devuelve la información final de la autorización de depósitos del contrato relacionado a la suscripción al terminar.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Información para habilitar / deshabilitar la autorización de depósito</param>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>ApiResponse of DepositsAuthorizationResponse</returns>
        ApiResponse<DepositsAuthorizationResponse> PutDepositAuthConfigurationsWithHttpInfo (DepositAuthorizationRequest body, string authorization, string subscription);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Consulta autorización de depósitos
        /// </summary>
        /// <remarks>
        /// Obtiene la información de la autorización de depósitos del contrato relacionado a la suscripción.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>Task of DepositsAuthorizationResponse</returns>
        System.Threading.Tasks.Task<DepositsAuthorizationResponse> GetDepositAuthConfigurationsAsync (string authorization, string subscription);

        /// <summary>
        /// Consulta autorización de depósitos
        /// </summary>
        /// <remarks>
        /// Obtiene la información de la autorización de depósitos del contrato relacionado a la suscripción.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>Task of ApiResponse (DepositsAuthorizationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DepositsAuthorizationResponse>> GetDepositAuthConfigurationsAsyncWithHttpInfo (string authorization, string subscription);
        /// <summary>
        /// Habilita / Deshabilita la autorización de depósitos
        /// </summary>
        /// <remarks>
        /// Habilita o deshabilita la autorización de depósitos. Devuelve la información final de la autorización de depósitos del contrato relacionado a la suscripción al terminar.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Información para habilitar / deshabilitar la autorización de depósito</param>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>Task of DepositsAuthorizationResponse</returns>
        System.Threading.Tasks.Task<DepositsAuthorizationResponse> PutDepositAuthConfigurationsAsync (DepositAuthorizationRequest body, string authorization, string subscription);

        /// <summary>
        /// Habilita / Deshabilita la autorización de depósitos
        /// </summary>
        /// <remarks>
        /// Habilita o deshabilita la autorización de depósitos. Devuelve la información final de la autorización de depósitos del contrato relacionado a la suscripción al terminar.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Información para habilitar / deshabilitar la autorización de depósito</param>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>Task of ApiResponse (DepositsAuthorizationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DepositsAuthorizationResponse>> PutDepositAuthConfigurationsAsyncWithHttpInfo (DepositAuthorizationRequest body, string authorization, string subscription);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class AutorizacinDeDepsitosApi : IAutorizacinDeDepsitosApi
    {
        private MX.Wire4.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AutorizacinDeDepsitosApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AutorizacinDeDepsitosApi(String basePath)
        {
            this.Configuration = new MX.Wire4.Client.Configuration { BasePath = basePath };

            ExceptionFactory = MX.Wire4.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AutorizacinDeDepsitosApi"/> class
        /// </summary>
        /// <returns></returns>
        public AutorizacinDeDepsitosApi()
        {
            this.Configuration = MX.Wire4.Client.Configuration.Default;

            ExceptionFactory = MX.Wire4.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AutorizacinDeDepsitosApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AutorizacinDeDepsitosApi(MX.Wire4.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = MX.Wire4.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = MX.Wire4.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public MX.Wire4.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MX.Wire4.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Consulta autorización de depósitos Obtiene la información de la autorización de depósitos del contrato relacionado a la suscripción.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>DepositsAuthorizationResponse</returns>
        public DepositsAuthorizationResponse GetDepositAuthConfigurations (string authorization, string subscription)
        {
             ApiResponse<DepositsAuthorizationResponse> localVarResponse = GetDepositAuthConfigurationsWithHttpInfo(authorization, subscription);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Consulta autorización de depósitos Obtiene la información de la autorización de depósitos del contrato relacionado a la suscripción.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>ApiResponse of DepositsAuthorizationResponse</returns>
        public ApiResponse< DepositsAuthorizationResponse > GetDepositAuthConfigurationsWithHttpInfo (string authorization, string subscription)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AutorizacinDeDepsitosApi->GetDepositAuthConfigurations");
            // verify the required parameter 'subscription' is set
            if (subscription == null)
                throw new ApiException(400, "Missing required parameter 'subscription' when calling AutorizacinDeDepsitosApi->GetDepositAuthConfigurations");

            var localVarPath = "/subscriptions/{subscription}/configurations/deposit-authorization";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscription != null) localVarPathParams.Add("subscription", this.Configuration.ApiClient.ParameterToString(subscription)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDepositAuthConfigurations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DepositsAuthorizationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DepositsAuthorizationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DepositsAuthorizationResponse)));
        }

        /// <summary>
        /// Consulta autorización de depósitos Obtiene la información de la autorización de depósitos del contrato relacionado a la suscripción.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>Task of DepositsAuthorizationResponse</returns>
        public async System.Threading.Tasks.Task<DepositsAuthorizationResponse> GetDepositAuthConfigurationsAsync (string authorization, string subscription)
        {
             ApiResponse<DepositsAuthorizationResponse> localVarResponse = await GetDepositAuthConfigurationsAsyncWithHttpInfo(authorization, subscription);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Consulta autorización de depósitos Obtiene la información de la autorización de depósitos del contrato relacionado a la suscripción.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>Task of ApiResponse (DepositsAuthorizationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DepositsAuthorizationResponse>> GetDepositAuthConfigurationsAsyncWithHttpInfo (string authorization, string subscription)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AutorizacinDeDepsitosApi->GetDepositAuthConfigurations");
            // verify the required parameter 'subscription' is set
            if (subscription == null)
                throw new ApiException(400, "Missing required parameter 'subscription' when calling AutorizacinDeDepsitosApi->GetDepositAuthConfigurations");

            var localVarPath = "/subscriptions/{subscription}/configurations/deposit-authorization";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscription != null) localVarPathParams.Add("subscription", this.Configuration.ApiClient.ParameterToString(subscription)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDepositAuthConfigurations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DepositsAuthorizationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DepositsAuthorizationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DepositsAuthorizationResponse)));
        }

        /// <summary>
        /// Habilita / Deshabilita la autorización de depósitos Habilita o deshabilita la autorización de depósitos. Devuelve la información final de la autorización de depósitos del contrato relacionado a la suscripción al terminar.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Información para habilitar / deshabilitar la autorización de depósito</param>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>DepositsAuthorizationResponse</returns>
        public DepositsAuthorizationResponse PutDepositAuthConfigurations (DepositAuthorizationRequest body, string authorization, string subscription)
        {
             ApiResponse<DepositsAuthorizationResponse> localVarResponse = PutDepositAuthConfigurationsWithHttpInfo(body, authorization, subscription);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Habilita / Deshabilita la autorización de depósitos Habilita o deshabilita la autorización de depósitos. Devuelve la información final de la autorización de depósitos del contrato relacionado a la suscripción al terminar.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Información para habilitar / deshabilitar la autorización de depósito</param>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>ApiResponse of DepositsAuthorizationResponse</returns>
        public ApiResponse< DepositsAuthorizationResponse > PutDepositAuthConfigurationsWithHttpInfo (DepositAuthorizationRequest body, string authorization, string subscription)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AutorizacinDeDepsitosApi->PutDepositAuthConfigurations");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AutorizacinDeDepsitosApi->PutDepositAuthConfigurations");
            // verify the required parameter 'subscription' is set
            if (subscription == null)
                throw new ApiException(400, "Missing required parameter 'subscription' when calling AutorizacinDeDepsitosApi->PutDepositAuthConfigurations");

            var localVarPath = "/subscriptions/{subscription}/configurations/deposit-authorization";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscription != null) localVarPathParams.Add("subscription", this.Configuration.ApiClient.ParameterToString(subscription)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutDepositAuthConfigurations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DepositsAuthorizationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DepositsAuthorizationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DepositsAuthorizationResponse)));
        }

        /// <summary>
        /// Habilita / Deshabilita la autorización de depósitos Habilita o deshabilita la autorización de depósitos. Devuelve la información final de la autorización de depósitos del contrato relacionado a la suscripción al terminar.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Información para habilitar / deshabilitar la autorización de depósito</param>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>Task of DepositsAuthorizationResponse</returns>
        public async System.Threading.Tasks.Task<DepositsAuthorizationResponse> PutDepositAuthConfigurationsAsync (DepositAuthorizationRequest body, string authorization, string subscription)
        {
             ApiResponse<DepositsAuthorizationResponse> localVarResponse = await PutDepositAuthConfigurationsAsyncWithHttpInfo(body, authorization, subscription);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Habilita / Deshabilita la autorización de depósitos Habilita o deshabilita la autorización de depósitos. Devuelve la información final de la autorización de depósitos del contrato relacionado a la suscripción al terminar.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Información para habilitar / deshabilitar la autorización de depósito</param>
        /// <param name="authorization">Header para token</param>
        /// <param name="subscription">Es el identificador de la suscripción a esta API.</param>
        /// <returns>Task of ApiResponse (DepositsAuthorizationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DepositsAuthorizationResponse>> PutDepositAuthConfigurationsAsyncWithHttpInfo (DepositAuthorizationRequest body, string authorization, string subscription)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AutorizacinDeDepsitosApi->PutDepositAuthConfigurations");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AutorizacinDeDepsitosApi->PutDepositAuthConfigurations");
            // verify the required parameter 'subscription' is set
            if (subscription == null)
                throw new ApiException(400, "Missing required parameter 'subscription' when calling AutorizacinDeDepsitosApi->PutDepositAuthConfigurations");

            var localVarPath = "/subscriptions/{subscription}/configurations/deposit-authorization";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subscription != null) localVarPathParams.Add("subscription", this.Configuration.ApiClient.ParameterToString(subscription)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PutDepositAuthConfigurations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DepositsAuthorizationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DepositsAuthorizationResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DepositsAuthorizationResponse)));
        }

    }
}
