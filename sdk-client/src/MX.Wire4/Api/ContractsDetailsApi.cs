/* 
 * Wire4RestAPI
 *
 * Referencia de la API de Wire4
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using MX.Wire4.Client;
using MX.Wire4.Model;

namespace MX.Wire4.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IContractsDetailsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Devuelve la URL para autorización del usuario Monex
        /// </summary>
        /// <remarks>
        /// Se obtiene la URL para la autorización del usuario Monex.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Información para la autorización</param>
        /// <param name="authorization">Header para token</param>
        /// <returns>TokenRequiredResponse</returns>
        TokenRequiredResponse CreateAuthorization (PreMonexAuthorization body, string authorization);

        /// <summary>
        /// Devuelve la URL para autorización del usuario Monex
        /// </summary>
        /// <remarks>
        /// Se obtiene la URL para la autorización del usuario Monex.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Información para la autorización</param>
        /// <param name="authorization">Header para token</param>
        /// <returns>ApiResponse of TokenRequiredResponse</returns>
        ApiResponse<TokenRequiredResponse> CreateAuthorizationWithHttpInfo (PreMonexAuthorization body, string authorization);
        /// <summary>
        /// Obtiene los usuarios autorizados
        /// </summary>
        /// <remarks>
        /// Obtienen los detalles de los usuarios autorizados de Monex.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="X_ACCESS_KEY">La llave de acceso de la aplicación</param>
        /// <param name="requestId">El identificador de la petición a esta API</param>
        /// <returns>List&lt;AuthorizedUsers&gt;</returns>
        List<AuthorizedUsers> ObtainAuthorizedUsers (string authorization, string X_ACCESS_KEY, string requestId);

        /// <summary>
        /// Obtiene los usuarios autorizados
        /// </summary>
        /// <remarks>
        /// Obtienen los detalles de los usuarios autorizados de Monex.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="X_ACCESS_KEY">La llave de acceso de la aplicación</param>
        /// <param name="requestId">El identificador de la petición a esta API</param>
        /// <returns>ApiResponse of List&lt;AuthorizedUsers&gt;</returns>
        ApiResponse<List<AuthorizedUsers>> ObtainAuthorizedUsersWithHttpInfo (string authorization, string X_ACCESS_KEY, string requestId);
        /// <summary>
        /// Obtiene los usuarios autorizados por contrato
        /// </summary>
        /// <remarks>
        /// Obtienen los detalles de los usuarios autorizados por contrato Monex.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="X_ACCESS_KEY">La llave de acceso de la aplicación</param>
        /// <param name="contract">El contrato Monex (optional)</param>
        /// <returns>List&lt;AuthorizedUsers&gt;</returns>
        List<AuthorizedUsers> ObtainAuthorizedUsersByContract (string authorization, string X_ACCESS_KEY, string contract = null);

        /// <summary>
        /// Obtiene los usuarios autorizados por contrato
        /// </summary>
        /// <remarks>
        /// Obtienen los detalles de los usuarios autorizados por contrato Monex.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="X_ACCESS_KEY">La llave de acceso de la aplicación</param>
        /// <param name="contract">El contrato Monex (optional)</param>
        /// <returns>ApiResponse of List&lt;AuthorizedUsers&gt;</returns>
        ApiResponse<List<AuthorizedUsers>> ObtainAuthorizedUsersByContractWithHttpInfo (string authorization, string X_ACCESS_KEY, string contract = null);
        /// <summary>
        /// Obtiene los detalles de la empresa del contrato
        /// </summary>
        /// <remarks>
        /// Detalles de la compañía relacionada con el contrato de Monex.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Información para obtener los detalles de la companía</param>
        /// <param name="authorization">Header para token</param>
        /// <param name="X_ACCESS_KEY">La llave de acceso de la aplicación</param>
        /// <returns>ContractDetailResponse</returns>
        ContractDetailResponse ObtainContractDetails (ContractDetailRequest body, string authorization, string X_ACCESS_KEY);

        /// <summary>
        /// Obtiene los detalles de la empresa del contrato
        /// </summary>
        /// <remarks>
        /// Detalles de la compañía relacionada con el contrato de Monex.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Información para obtener los detalles de la companía</param>
        /// <param name="authorization">Header para token</param>
        /// <param name="X_ACCESS_KEY">La llave de acceso de la aplicación</param>
        /// <returns>ApiResponse of ContractDetailResponse</returns>
        ApiResponse<ContractDetailResponse> ObtainContractDetailsWithHttpInfo (ContractDetailRequest body, string authorization, string X_ACCESS_KEY);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Devuelve la URL para autorización del usuario Monex
        /// </summary>
        /// <remarks>
        /// Se obtiene la URL para la autorización del usuario Monex.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Información para la autorización</param>
        /// <param name="authorization">Header para token</param>
        /// <returns>Task of TokenRequiredResponse</returns>
        System.Threading.Tasks.Task<TokenRequiredResponse> CreateAuthorizationAsync (PreMonexAuthorization body, string authorization);

        /// <summary>
        /// Devuelve la URL para autorización del usuario Monex
        /// </summary>
        /// <remarks>
        /// Se obtiene la URL para la autorización del usuario Monex.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Información para la autorización</param>
        /// <param name="authorization">Header para token</param>
        /// <returns>Task of ApiResponse (TokenRequiredResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TokenRequiredResponse>> CreateAuthorizationAsyncWithHttpInfo (PreMonexAuthorization body, string authorization);
        /// <summary>
        /// Obtiene los usuarios autorizados
        /// </summary>
        /// <remarks>
        /// Obtienen los detalles de los usuarios autorizados de Monex.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="X_ACCESS_KEY">La llave de acceso de la aplicación</param>
        /// <param name="requestId">El identificador de la petición a esta API</param>
        /// <returns>Task of List&lt;AuthorizedUsers&gt;</returns>
        System.Threading.Tasks.Task<List<AuthorizedUsers>> ObtainAuthorizedUsersAsync (string authorization, string X_ACCESS_KEY, string requestId);

        /// <summary>
        /// Obtiene los usuarios autorizados
        /// </summary>
        /// <remarks>
        /// Obtienen los detalles de los usuarios autorizados de Monex.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="X_ACCESS_KEY">La llave de acceso de la aplicación</param>
        /// <param name="requestId">El identificador de la petición a esta API</param>
        /// <returns>Task of ApiResponse (List&lt;AuthorizedUsers&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AuthorizedUsers>>> ObtainAuthorizedUsersAsyncWithHttpInfo (string authorization, string X_ACCESS_KEY, string requestId);
        /// <summary>
        /// Obtiene los usuarios autorizados por contrato
        /// </summary>
        /// <remarks>
        /// Obtienen los detalles de los usuarios autorizados por contrato Monex.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="X_ACCESS_KEY">La llave de acceso de la aplicación</param>
        /// <param name="contract">El contrato Monex (optional)</param>
        /// <returns>Task of List&lt;AuthorizedUsers&gt;</returns>
        System.Threading.Tasks.Task<List<AuthorizedUsers>> ObtainAuthorizedUsersByContractAsync (string authorization, string X_ACCESS_KEY, string contract = null);

        /// <summary>
        /// Obtiene los usuarios autorizados por contrato
        /// </summary>
        /// <remarks>
        /// Obtienen los detalles de los usuarios autorizados por contrato Monex.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="X_ACCESS_KEY">La llave de acceso de la aplicación</param>
        /// <param name="contract">El contrato Monex (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AuthorizedUsers&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AuthorizedUsers>>> ObtainAuthorizedUsersByContractAsyncWithHttpInfo (string authorization, string X_ACCESS_KEY, string contract = null);
        /// <summary>
        /// Obtiene los detalles de la empresa del contrato
        /// </summary>
        /// <remarks>
        /// Detalles de la compañía relacionada con el contrato de Monex.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Información para obtener los detalles de la companía</param>
        /// <param name="authorization">Header para token</param>
        /// <param name="X_ACCESS_KEY">La llave de acceso de la aplicación</param>
        /// <returns>Task of ContractDetailResponse</returns>
        System.Threading.Tasks.Task<ContractDetailResponse> ObtainContractDetailsAsync (ContractDetailRequest body, string authorization, string X_ACCESS_KEY);

        /// <summary>
        /// Obtiene los detalles de la empresa del contrato
        /// </summary>
        /// <remarks>
        /// Detalles de la compañía relacionada con el contrato de Monex.
        /// </remarks>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Información para obtener los detalles de la companía</param>
        /// <param name="authorization">Header para token</param>
        /// <param name="X_ACCESS_KEY">La llave de acceso de la aplicación</param>
        /// <returns>Task of ApiResponse (ContractDetailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContractDetailResponse>> ObtainContractDetailsAsyncWithHttpInfo (ContractDetailRequest body, string authorization, string X_ACCESS_KEY);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ContractsDetailsApi : IContractsDetailsApi
    {
        private MX.Wire4.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ContractsDetailsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContractsDetailsApi(String basePath)
        {
            this.Configuration = new MX.Wire4.Client.Configuration { BasePath = basePath };

            ExceptionFactory = MX.Wire4.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContractsDetailsApi"/> class
        /// </summary>
        /// <returns></returns>
        public ContractsDetailsApi()
        {
            this.Configuration = MX.Wire4.Client.Configuration.Default;

            ExceptionFactory = MX.Wire4.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContractsDetailsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ContractsDetailsApi(MX.Wire4.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = MX.Wire4.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = MX.Wire4.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public MX.Wire4.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public MX.Wire4.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Devuelve la URL para autorización del usuario Monex Se obtiene la URL para la autorización del usuario Monex.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Información para la autorización</param>
        /// <param name="authorization">Header para token</param>
        /// <returns>TokenRequiredResponse</returns>
        public TokenRequiredResponse CreateAuthorization (PreMonexAuthorization body, string authorization)
        {
             ApiResponse<TokenRequiredResponse> localVarResponse = CreateAuthorizationWithHttpInfo(body, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Devuelve la URL para autorización del usuario Monex Se obtiene la URL para la autorización del usuario Monex.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Información para la autorización</param>
        /// <param name="authorization">Header para token</param>
        /// <returns>ApiResponse of TokenRequiredResponse</returns>
        public ApiResponse< TokenRequiredResponse > CreateAuthorizationWithHttpInfo (PreMonexAuthorization body, string authorization)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ContractsDetailsApi->CreateAuthorization");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ContractsDetailsApi->CreateAuthorization");

            var localVarPath = "/onboarding/accounts/authorize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAuthorization", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TokenRequiredResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TokenRequiredResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TokenRequiredResponse)));
        }

        /// <summary>
        /// Devuelve la URL para autorización del usuario Monex Se obtiene la URL para la autorización del usuario Monex.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Información para la autorización</param>
        /// <param name="authorization">Header para token</param>
        /// <returns>Task of TokenRequiredResponse</returns>
        public async System.Threading.Tasks.Task<TokenRequiredResponse> CreateAuthorizationAsync (PreMonexAuthorization body, string authorization)
        {
             ApiResponse<TokenRequiredResponse> localVarResponse = await CreateAuthorizationAsyncWithHttpInfo(body, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Devuelve la URL para autorización del usuario Monex Se obtiene la URL para la autorización del usuario Monex.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Información para la autorización</param>
        /// <param name="authorization">Header para token</param>
        /// <returns>Task of ApiResponse (TokenRequiredResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TokenRequiredResponse>> CreateAuthorizationAsyncWithHttpInfo (PreMonexAuthorization body, string authorization)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ContractsDetailsApi->CreateAuthorization");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ContractsDetailsApi->CreateAuthorization");

            var localVarPath = "/onboarding/accounts/authorize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAuthorization", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TokenRequiredResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TokenRequiredResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TokenRequiredResponse)));
        }

        /// <summary>
        /// Obtiene los usuarios autorizados Obtienen los detalles de los usuarios autorizados de Monex.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="X_ACCESS_KEY">La llave de acceso de la aplicación</param>
        /// <param name="requestId">El identificador de la petición a esta API</param>
        /// <returns>List&lt;AuthorizedUsers&gt;</returns>
        public List<AuthorizedUsers> ObtainAuthorizedUsers (string authorization, string X_ACCESS_KEY, string requestId)
        {
             ApiResponse<List<AuthorizedUsers>> localVarResponse = ObtainAuthorizedUsersWithHttpInfo(authorization, X_ACCESS_KEY, requestId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Obtiene los usuarios autorizados Obtienen los detalles de los usuarios autorizados de Monex.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="X_ACCESS_KEY">La llave de acceso de la aplicación</param>
        /// <param name="requestId">El identificador de la petición a esta API</param>
        /// <returns>ApiResponse of List&lt;AuthorizedUsers&gt;</returns>
        public ApiResponse< List<AuthorizedUsers> > ObtainAuthorizedUsersWithHttpInfo (string authorization, string X_ACCESS_KEY, string requestId)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ContractsDetailsApi->ObtainAuthorizedUsers");
            // verify the required parameter 'X_ACCESS_KEY' is set
            if (X_ACCESS_KEY == null)
                throw new ApiException(400, "Missing required parameter 'X_ACCESS_KEY' when calling ContractsDetailsApi->ObtainAuthorizedUsers");
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling ContractsDetailsApi->ObtainAuthorizedUsers");

            var localVarPath = "/onboarding/accounts/{requestId}/authorized-users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestId != null) localVarPathParams.Add("requestId", this.Configuration.ApiClient.ParameterToString(requestId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (X_ACCESS_KEY != null) localVarHeaderParams.Add("X-ACCESS-KEY", this.Configuration.ApiClient.ParameterToString(X_ACCESS_KEY)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ObtainAuthorizedUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AuthorizedUsers>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<AuthorizedUsers>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AuthorizedUsers>)));
        }

        /// <summary>
        /// Obtiene los usuarios autorizados Obtienen los detalles de los usuarios autorizados de Monex.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="X_ACCESS_KEY">La llave de acceso de la aplicación</param>
        /// <param name="requestId">El identificador de la petición a esta API</param>
        /// <returns>Task of List&lt;AuthorizedUsers&gt;</returns>
        public async System.Threading.Tasks.Task<List<AuthorizedUsers>> ObtainAuthorizedUsersAsync (string authorization, string X_ACCESS_KEY, string requestId)
        {
             ApiResponse<List<AuthorizedUsers>> localVarResponse = await ObtainAuthorizedUsersAsyncWithHttpInfo(authorization, X_ACCESS_KEY, requestId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Obtiene los usuarios autorizados Obtienen los detalles de los usuarios autorizados de Monex.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="X_ACCESS_KEY">La llave de acceso de la aplicación</param>
        /// <param name="requestId">El identificador de la petición a esta API</param>
        /// <returns>Task of ApiResponse (List&lt;AuthorizedUsers&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AuthorizedUsers>>> ObtainAuthorizedUsersAsyncWithHttpInfo (string authorization, string X_ACCESS_KEY, string requestId)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ContractsDetailsApi->ObtainAuthorizedUsers");
            // verify the required parameter 'X_ACCESS_KEY' is set
            if (X_ACCESS_KEY == null)
                throw new ApiException(400, "Missing required parameter 'X_ACCESS_KEY' when calling ContractsDetailsApi->ObtainAuthorizedUsers");
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new ApiException(400, "Missing required parameter 'requestId' when calling ContractsDetailsApi->ObtainAuthorizedUsers");

            var localVarPath = "/onboarding/accounts/{requestId}/authorized-users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (requestId != null) localVarPathParams.Add("requestId", this.Configuration.ApiClient.ParameterToString(requestId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (X_ACCESS_KEY != null) localVarHeaderParams.Add("X-ACCESS-KEY", this.Configuration.ApiClient.ParameterToString(X_ACCESS_KEY)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ObtainAuthorizedUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AuthorizedUsers>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<AuthorizedUsers>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AuthorizedUsers>)));
        }

        /// <summary>
        /// Obtiene los usuarios autorizados por contrato Obtienen los detalles de los usuarios autorizados por contrato Monex.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="X_ACCESS_KEY">La llave de acceso de la aplicación</param>
        /// <param name="contract">El contrato Monex (optional)</param>
        /// <returns>List&lt;AuthorizedUsers&gt;</returns>
        public List<AuthorizedUsers> ObtainAuthorizedUsersByContract (string authorization, string X_ACCESS_KEY, string contract = null)
        {
             ApiResponse<List<AuthorizedUsers>> localVarResponse = ObtainAuthorizedUsersByContractWithHttpInfo(authorization, X_ACCESS_KEY, contract);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Obtiene los usuarios autorizados por contrato Obtienen los detalles de los usuarios autorizados por contrato Monex.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="X_ACCESS_KEY">La llave de acceso de la aplicación</param>
        /// <param name="contract">El contrato Monex (optional)</param>
        /// <returns>ApiResponse of List&lt;AuthorizedUsers&gt;</returns>
        public ApiResponse< List<AuthorizedUsers> > ObtainAuthorizedUsersByContractWithHttpInfo (string authorization, string X_ACCESS_KEY, string contract = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ContractsDetailsApi->ObtainAuthorizedUsersByContract");
            // verify the required parameter 'X_ACCESS_KEY' is set
            if (X_ACCESS_KEY == null)
                throw new ApiException(400, "Missing required parameter 'X_ACCESS_KEY' when calling ContractsDetailsApi->ObtainAuthorizedUsersByContract");

            var localVarPath = "/onboarding/accounts/authorized-users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contract != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contract", contract)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (X_ACCESS_KEY != null) localVarHeaderParams.Add("X-ACCESS-KEY", this.Configuration.ApiClient.ParameterToString(X_ACCESS_KEY)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ObtainAuthorizedUsersByContract", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AuthorizedUsers>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<AuthorizedUsers>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AuthorizedUsers>)));
        }

        /// <summary>
        /// Obtiene los usuarios autorizados por contrato Obtienen los detalles de los usuarios autorizados por contrato Monex.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="X_ACCESS_KEY">La llave de acceso de la aplicación</param>
        /// <param name="contract">El contrato Monex (optional)</param>
        /// <returns>Task of List&lt;AuthorizedUsers&gt;</returns>
        public async System.Threading.Tasks.Task<List<AuthorizedUsers>> ObtainAuthorizedUsersByContractAsync (string authorization, string X_ACCESS_KEY, string contract = null)
        {
             ApiResponse<List<AuthorizedUsers>> localVarResponse = await ObtainAuthorizedUsersByContractAsyncWithHttpInfo(authorization, X_ACCESS_KEY, contract);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Obtiene los usuarios autorizados por contrato Obtienen los detalles de los usuarios autorizados por contrato Monex.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Header para token</param>
        /// <param name="X_ACCESS_KEY">La llave de acceso de la aplicación</param>
        /// <param name="contract">El contrato Monex (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AuthorizedUsers&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AuthorizedUsers>>> ObtainAuthorizedUsersByContractAsyncWithHttpInfo (string authorization, string X_ACCESS_KEY, string contract = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ContractsDetailsApi->ObtainAuthorizedUsersByContract");
            // verify the required parameter 'X_ACCESS_KEY' is set
            if (X_ACCESS_KEY == null)
                throw new ApiException(400, "Missing required parameter 'X_ACCESS_KEY' when calling ContractsDetailsApi->ObtainAuthorizedUsersByContract");

            var localVarPath = "/onboarding/accounts/authorized-users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contract != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "contract", contract)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (X_ACCESS_KEY != null) localVarHeaderParams.Add("X-ACCESS-KEY", this.Configuration.ApiClient.ParameterToString(X_ACCESS_KEY)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ObtainAuthorizedUsersByContract", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AuthorizedUsers>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<AuthorizedUsers>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AuthorizedUsers>)));
        }

        /// <summary>
        /// Obtiene los detalles de la empresa del contrato Detalles de la compañía relacionada con el contrato de Monex.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Información para obtener los detalles de la companía</param>
        /// <param name="authorization">Header para token</param>
        /// <param name="X_ACCESS_KEY">La llave de acceso de la aplicación</param>
        /// <returns>ContractDetailResponse</returns>
        public ContractDetailResponse ObtainContractDetails (ContractDetailRequest body, string authorization, string X_ACCESS_KEY)
        {
             ApiResponse<ContractDetailResponse> localVarResponse = ObtainContractDetailsWithHttpInfo(body, authorization, X_ACCESS_KEY);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Obtiene los detalles de la empresa del contrato Detalles de la compañía relacionada con el contrato de Monex.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Información para obtener los detalles de la companía</param>
        /// <param name="authorization">Header para token</param>
        /// <param name="X_ACCESS_KEY">La llave de acceso de la aplicación</param>
        /// <returns>ApiResponse of ContractDetailResponse</returns>
        public ApiResponse< ContractDetailResponse > ObtainContractDetailsWithHttpInfo (ContractDetailRequest body, string authorization, string X_ACCESS_KEY)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ContractsDetailsApi->ObtainContractDetails");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ContractsDetailsApi->ObtainContractDetails");
            // verify the required parameter 'X_ACCESS_KEY' is set
            if (X_ACCESS_KEY == null)
                throw new ApiException(400, "Missing required parameter 'X_ACCESS_KEY' when calling ContractsDetailsApi->ObtainContractDetails");

            var localVarPath = "/onboarding/accounts/details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (X_ACCESS_KEY != null) localVarHeaderParams.Add("X-ACCESS-KEY", this.Configuration.ApiClient.ParameterToString(X_ACCESS_KEY)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ObtainContractDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContractDetailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ContractDetailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContractDetailResponse)));
        }

        /// <summary>
        /// Obtiene los detalles de la empresa del contrato Detalles de la compañía relacionada con el contrato de Monex.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Información para obtener los detalles de la companía</param>
        /// <param name="authorization">Header para token</param>
        /// <param name="X_ACCESS_KEY">La llave de acceso de la aplicación</param>
        /// <returns>Task of ContractDetailResponse</returns>
        public async System.Threading.Tasks.Task<ContractDetailResponse> ObtainContractDetailsAsync (ContractDetailRequest body, string authorization, string X_ACCESS_KEY)
        {
             ApiResponse<ContractDetailResponse> localVarResponse = await ObtainContractDetailsAsyncWithHttpInfo(body, authorization, X_ACCESS_KEY);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Obtiene los detalles de la empresa del contrato Detalles de la compañía relacionada con el contrato de Monex.
        /// </summary>
        /// <exception cref="MX.Wire4.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Información para obtener los detalles de la companía</param>
        /// <param name="authorization">Header para token</param>
        /// <param name="X_ACCESS_KEY">La llave de acceso de la aplicación</param>
        /// <returns>Task of ApiResponse (ContractDetailResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContractDetailResponse>> ObtainContractDetailsAsyncWithHttpInfo (ContractDetailRequest body, string authorization, string X_ACCESS_KEY)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ContractsDetailsApi->ObtainContractDetails");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ContractsDetailsApi->ObtainContractDetails");
            // verify the required parameter 'X_ACCESS_KEY' is set
            if (X_ACCESS_KEY == null)
                throw new ApiException(400, "Missing required parameter 'X_ACCESS_KEY' when calling ContractsDetailsApi->ObtainContractDetails");

            var localVarPath = "/onboarding/accounts/details";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (X_ACCESS_KEY != null) localVarHeaderParams.Add("X-ACCESS-KEY", this.Configuration.ApiClient.ParameterToString(X_ACCESS_KEY)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ObtainContractDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContractDetailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ContractDetailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContractDetailResponse)));
        }

    }
}
