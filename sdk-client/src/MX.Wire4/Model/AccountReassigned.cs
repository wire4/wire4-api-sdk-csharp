/* 
 * Wire4RestAPI
 *
 * Referencia de la API de Wire4
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = MX.Wire4.Client.SwaggerDateConverter;

namespace MX.Wire4.Model
{
    /// <summary>
    /// Objeto que contiene información de las cuenta SPEI/SPID reasignadas bajo un nuevo identificador de solicitud
    /// </summary>
    [DataContract]
        public partial class AccountReassigned :  IEquatable<AccountReassigned>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountReassigned" /> class.
        /// </summary>
        /// <param name="amountLimit">Monto límite permitido registrado para la cuenta (required).</param>
        /// <param name="bank">bank.</param>
        /// <param name="beneficiaryAccount">Cuenta del beneficiario, podría ser teléfono celular, TDD o cuenta CLABE (required).</param>
        /// <param name="currencyCode">Código de moneda, este dato es opcional, al registrar una cuenta si no se cuenta con este valor se asignara MXP.</param>
        /// <param name="email">Lista de email&#x27;s, este dato es opcional.</param>
        /// <param name="institution">institution.</param>
        /// <param name="kindOfRelationship">Tipo de relación con el propietario de la cuenta, para registrar una cuenta este valor se debe obtener  del recurso relationships. &lt;br&gt; Nota: Si en la respuesta de Monex esta propiedad es nula, tampoco estará presente en esta respuesta. (required).</param>
        /// <param name="numericReferenceSpei">Referencia numérica a utilizar cuando se realice una transferencia y no se especifique una referencia.</param>
        /// <param name="paymentConceptSpei">Concepto de pago a utilizar cuando se realice una transferencia y no se especifique un concepto.</param>
        /// <param name="person">person.</param>
        /// <param name="registerDate">La fecha en la que se registro el beneficiario.</param>
        /// <param name="relationship">Relación con el propietario de la cuenta, para registrar una cuenta este valor se debe obtener  del recurso relationships. &lt;br&gt; Nota: Si en la respuesta de Monex esta propiedad es nula, tampoco estará presente en esta respuesta. (required).</param>
        /// <param name="rfc">Registro federal de contribuyentes de la persona o institución propietaria de la cuenta. &lt;br&gt; Nota: Si en la respuesta de Monex esta propiedad es nula, tampoco estará presente en esta respuesta. (required).</param>
        /// <param name="status">El estado (status) en el que se encuentra el registro del beneficiario.</param>
        public AccountReassigned(decimal? amountLimit = default(decimal?), Institution bank = default(Institution), string beneficiaryAccount = default(string), string currencyCode = default(string), List<string> email = default(List<string>), BeneficiaryInstitution institution = default(BeneficiaryInstitution), string kindOfRelationship = default(string), string numericReferenceSpei = default(string), string paymentConceptSpei = default(string), Person person = default(Person), DateTime? registerDate = default(DateTime?), string relationship = default(string), string rfc = default(string), string status = default(string))
        {
            // to ensure "amountLimit" is required (not null)
            if (amountLimit == null)
            {
                throw new InvalidDataException("amountLimit is a required property for AccountReassigned and cannot be null");
            }
            else
            {
                this.AmountLimit = amountLimit;
            }
            // to ensure "beneficiaryAccount" is required (not null)
            if (beneficiaryAccount == null)
            {
                throw new InvalidDataException("beneficiaryAccount is a required property for AccountReassigned and cannot be null");
            }
            else
            {
                this.BeneficiaryAccount = beneficiaryAccount;
            }
            // to ensure "kindOfRelationship" is required (not null)
            if (kindOfRelationship == null)
            {
                throw new InvalidDataException("kindOfRelationship is a required property for AccountReassigned and cannot be null");
            }
            else
            {
                this.KindOfRelationship = kindOfRelationship;
            }
            // to ensure "relationship" is required (not null)
            if (relationship == null)
            {
                throw new InvalidDataException("relationship is a required property for AccountReassigned and cannot be null");
            }
            else
            {
                this.Relationship = relationship;
            }
            // to ensure "rfc" is required (not null)
            if (rfc == null)
            {
                throw new InvalidDataException("rfc is a required property for AccountReassigned and cannot be null");
            }
            else
            {
                this.Rfc = rfc;
            }
            this.Bank = bank;
            this.CurrencyCode = currencyCode;
            this.Email = email;
            this.Institution = institution;
            this.NumericReferenceSpei = numericReferenceSpei;
            this.PaymentConceptSpei = paymentConceptSpei;
            this.Person = person;
            this.RegisterDate = registerDate;
            this.Status = status;
        }
        
        /// <summary>
        /// Monto límite permitido registrado para la cuenta
        /// </summary>
        /// <value>Monto límite permitido registrado para la cuenta</value>
        [DataMember(Name="amount_limit", EmitDefaultValue=false)]
        public decimal? AmountLimit { get; set; }

        /// <summary>
        /// Gets or Sets Bank
        /// </summary>
        [DataMember(Name="bank", EmitDefaultValue=false)]
        public Institution Bank { get; set; }

        /// <summary>
        /// Cuenta del beneficiario, podría ser teléfono celular, TDD o cuenta CLABE
        /// </summary>
        /// <value>Cuenta del beneficiario, podría ser teléfono celular, TDD o cuenta CLABE</value>
        [DataMember(Name="beneficiary_account", EmitDefaultValue=false)]
        public string BeneficiaryAccount { get; set; }

        /// <summary>
        /// Código de moneda, este dato es opcional, al registrar una cuenta si no se cuenta con este valor se asignara MXP
        /// </summary>
        /// <value>Código de moneda, este dato es opcional, al registrar una cuenta si no se cuenta con este valor se asignara MXP</value>
        [DataMember(Name="currency_code", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Lista de email&#x27;s, este dato es opcional
        /// </summary>
        /// <value>Lista de email&#x27;s, este dato es opcional</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public List<string> Email { get; set; }

        /// <summary>
        /// Gets or Sets Institution
        /// </summary>
        [DataMember(Name="institution", EmitDefaultValue=false)]
        public BeneficiaryInstitution Institution { get; set; }

        /// <summary>
        /// Tipo de relación con el propietario de la cuenta, para registrar una cuenta este valor se debe obtener  del recurso relationships. &lt;br&gt; Nota: Si en la respuesta de Monex esta propiedad es nula, tampoco estará presente en esta respuesta.
        /// </summary>
        /// <value>Tipo de relación con el propietario de la cuenta, para registrar una cuenta este valor se debe obtener  del recurso relationships. &lt;br&gt; Nota: Si en la respuesta de Monex esta propiedad es nula, tampoco estará presente en esta respuesta.</value>
        [DataMember(Name="kind_of_relationship", EmitDefaultValue=false)]
        public string KindOfRelationship { get; set; }

        /// <summary>
        /// Referencia numérica a utilizar cuando se realice una transferencia y no se especifique una referencia
        /// </summary>
        /// <value>Referencia numérica a utilizar cuando se realice una transferencia y no se especifique una referencia</value>
        [DataMember(Name="numeric_reference_spei", EmitDefaultValue=false)]
        public string NumericReferenceSpei { get; set; }

        /// <summary>
        /// Concepto de pago a utilizar cuando se realice una transferencia y no se especifique un concepto
        /// </summary>
        /// <value>Concepto de pago a utilizar cuando se realice una transferencia y no se especifique un concepto</value>
        [DataMember(Name="payment_concept_spei", EmitDefaultValue=false)]
        public string PaymentConceptSpei { get; set; }

        /// <summary>
        /// Gets or Sets Person
        /// </summary>
        [DataMember(Name="person", EmitDefaultValue=false)]
        public Person Person { get; set; }

        /// <summary>
        /// La fecha en la que se registro el beneficiario
        /// </summary>
        /// <value>La fecha en la que se registro el beneficiario</value>
        [DataMember(Name="register_date", EmitDefaultValue=false)]
        public DateTime? RegisterDate { get; set; }

        /// <summary>
        /// Relación con el propietario de la cuenta, para registrar una cuenta este valor se debe obtener  del recurso relationships. &lt;br&gt; Nota: Si en la respuesta de Monex esta propiedad es nula, tampoco estará presente en esta respuesta.
        /// </summary>
        /// <value>Relación con el propietario de la cuenta, para registrar una cuenta este valor se debe obtener  del recurso relationships. &lt;br&gt; Nota: Si en la respuesta de Monex esta propiedad es nula, tampoco estará presente en esta respuesta.</value>
        [DataMember(Name="relationship", EmitDefaultValue=false)]
        public string Relationship { get; set; }

        /// <summary>
        /// Registro federal de contribuyentes de la persona o institución propietaria de la cuenta. &lt;br&gt; Nota: Si en la respuesta de Monex esta propiedad es nula, tampoco estará presente en esta respuesta.
        /// </summary>
        /// <value>Registro federal de contribuyentes de la persona o institución propietaria de la cuenta. &lt;br&gt; Nota: Si en la respuesta de Monex esta propiedad es nula, tampoco estará presente en esta respuesta.</value>
        [DataMember(Name="rfc", EmitDefaultValue=false)]
        public string Rfc { get; set; }

        /// <summary>
        /// El estado (status) en el que se encuentra el registro del beneficiario
        /// </summary>
        /// <value>El estado (status) en el que se encuentra el registro del beneficiario</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountReassigned {\n");
            sb.Append("  AmountLimit: ").Append(AmountLimit).Append("\n");
            sb.Append("  Bank: ").Append(Bank).Append("\n");
            sb.Append("  BeneficiaryAccount: ").Append(BeneficiaryAccount).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Institution: ").Append(Institution).Append("\n");
            sb.Append("  KindOfRelationship: ").Append(KindOfRelationship).Append("\n");
            sb.Append("  NumericReferenceSpei: ").Append(NumericReferenceSpei).Append("\n");
            sb.Append("  PaymentConceptSpei: ").Append(PaymentConceptSpei).Append("\n");
            sb.Append("  Person: ").Append(Person).Append("\n");
            sb.Append("  RegisterDate: ").Append(RegisterDate).Append("\n");
            sb.Append("  Relationship: ").Append(Relationship).Append("\n");
            sb.Append("  Rfc: ").Append(Rfc).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountReassigned);
        }

        /// <summary>
        /// Returns true if AccountReassigned instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountReassigned to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountReassigned input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AmountLimit == input.AmountLimit ||
                    (this.AmountLimit != null &&
                    this.AmountLimit.Equals(input.AmountLimit))
                ) && 
                (
                    this.Bank == input.Bank ||
                    (this.Bank != null &&
                    this.Bank.Equals(input.Bank))
                ) && 
                (
                    this.BeneficiaryAccount == input.BeneficiaryAccount ||
                    (this.BeneficiaryAccount != null &&
                    this.BeneficiaryAccount.Equals(input.BeneficiaryAccount))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.Email == input.Email ||
                    this.Email != null &&
                    input.Email != null &&
                    this.Email.SequenceEqual(input.Email)
                ) && 
                (
                    this.Institution == input.Institution ||
                    (this.Institution != null &&
                    this.Institution.Equals(input.Institution))
                ) && 
                (
                    this.KindOfRelationship == input.KindOfRelationship ||
                    (this.KindOfRelationship != null &&
                    this.KindOfRelationship.Equals(input.KindOfRelationship))
                ) && 
                (
                    this.NumericReferenceSpei == input.NumericReferenceSpei ||
                    (this.NumericReferenceSpei != null &&
                    this.NumericReferenceSpei.Equals(input.NumericReferenceSpei))
                ) && 
                (
                    this.PaymentConceptSpei == input.PaymentConceptSpei ||
                    (this.PaymentConceptSpei != null &&
                    this.PaymentConceptSpei.Equals(input.PaymentConceptSpei))
                ) && 
                (
                    this.Person == input.Person ||
                    (this.Person != null &&
                    this.Person.Equals(input.Person))
                ) && 
                (
                    this.RegisterDate == input.RegisterDate ||
                    (this.RegisterDate != null &&
                    this.RegisterDate.Equals(input.RegisterDate))
                ) && 
                (
                    this.Relationship == input.Relationship ||
                    (this.Relationship != null &&
                    this.Relationship.Equals(input.Relationship))
                ) && 
                (
                    this.Rfc == input.Rfc ||
                    (this.Rfc != null &&
                    this.Rfc.Equals(input.Rfc))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AmountLimit != null)
                    hashCode = hashCode * 59 + this.AmountLimit.GetHashCode();
                if (this.Bank != null)
                    hashCode = hashCode * 59 + this.Bank.GetHashCode();
                if (this.BeneficiaryAccount != null)
                    hashCode = hashCode * 59 + this.BeneficiaryAccount.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Institution != null)
                    hashCode = hashCode * 59 + this.Institution.GetHashCode();
                if (this.KindOfRelationship != null)
                    hashCode = hashCode * 59 + this.KindOfRelationship.GetHashCode();
                if (this.NumericReferenceSpei != null)
                    hashCode = hashCode * 59 + this.NumericReferenceSpei.GetHashCode();
                if (this.PaymentConceptSpei != null)
                    hashCode = hashCode * 59 + this.PaymentConceptSpei.GetHashCode();
                if (this.Person != null)
                    hashCode = hashCode * 59 + this.Person.GetHashCode();
                if (this.RegisterDate != null)
                    hashCode = hashCode * 59 + this.RegisterDate.GetHashCode();
                if (this.Relationship != null)
                    hashCode = hashCode * 59 + this.Relationship.GetHashCode();
                if (this.Rfc != null)
                    hashCode = hashCode * 59 + this.Rfc.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
