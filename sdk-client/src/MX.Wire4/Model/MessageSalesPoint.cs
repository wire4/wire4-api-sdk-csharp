/* 
 * Wire4RestAPI
 *
 * Referencia de la API de Wire4
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = MX.Wire4.Client.SwaggerDateConverter;
namespace MX.Wire4.Model
{
    /// <summary>
    /// Es el objet del mensaje que se envía con la información del punto de venta registrado.
    /// </summary>
    [DataContract]
        public partial class MessageSalesPoint :  IEquatable<MessageSalesPoint>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageSalesPoint" /> class.
        /// </summary>
        /// <param name="account">Es la cuenta donde se realziarán los pagos..</param>
        /// <param name="ip">Dirección IP desde la cuál se accederá a la API..</param>
        /// <param name="name">Es el nombre del punto de venta..</param>
        public MessageSalesPoint(string account = default(string), string ip = default(string), string name = default(string))
        {
            this.Account = account;
            this.Ip = ip;
            this.Name = name;
        }
        
        /// <summary>
        /// Es la cuenta donde se realziarán los pagos.
        /// </summary>
        /// <value>Es la cuenta donde se realziarán los pagos.</value>
        [DataMember(Name="account", EmitDefaultValue=false)]
        public string Account { get; set; }

        /// <summary>
        /// Dirección IP desde la cuál se accederá a la API.
        /// </summary>
        /// <value>Dirección IP desde la cuál se accederá a la API.</value>
        [DataMember(Name="ip", EmitDefaultValue=false)]
        public string Ip { get; set; }

        /// <summary>
        /// Es el nombre del punto de venta.
        /// </summary>
        /// <value>Es el nombre del punto de venta.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MessageSalesPoint {\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  Ip: ").Append(Ip).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MessageSalesPoint);
        }

        /// <summary>
        /// Returns true if MessageSalesPoint instances are equal
        /// </summary>
        /// <param name="input">Instance of MessageSalesPoint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MessageSalesPoint input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && 
                (
                    this.Ip == input.Ip ||
                    (this.Ip != null &&
                    this.Ip.Equals(input.Ip))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Account != null)
                    hashCode = hashCode * 59 + this.Account.GetHashCode();
                if (this.Ip != null)
                    hashCode = hashCode * 59 + this.Ip.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
