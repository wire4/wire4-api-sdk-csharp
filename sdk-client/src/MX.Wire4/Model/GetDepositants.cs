/* 
 * Wire4RestAPI
 *
 * Referencia de la API de Wire4
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = MX.Wire4.Client.SwaggerDateConverter;

namespace MX.Wire4.Model
{
    /// <summary>
    /// Objeto que contiene una lista de depositantes
    /// </summary>
    [DataContract]
        public partial class GetDepositants :  IEquatable<GetDepositants>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetDepositants" /> class.
        /// </summary>
        /// <param name="depositants">Lista de depositantes que contiene cada depositante encontrado (required).</param>
        public GetDepositants(List<Depositant> depositants = default(List<Depositant>))
        {
            // to ensure "depositants" is required (not null)
            if (depositants == null)
            {
                throw new InvalidDataException("depositants is a required property for GetDepositants and cannot be null");
            }
            else
            {
                this.Depositants = depositants;
            }
        }
        
        /// <summary>
        /// Lista de depositantes que contiene cada depositante encontrado
        /// </summary>
        /// <value>Lista de depositantes que contiene cada depositante encontrado</value>
        [DataMember(Name="depositants", EmitDefaultValue=false)]
        public List<Depositant> Depositants { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetDepositants {\n");
            sb.Append("  Depositants: ").Append(Depositants).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetDepositants);
        }

        /// <summary>
        /// Returns true if GetDepositants instances are equal
        /// </summary>
        /// <param name="input">Instance of GetDepositants to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetDepositants input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Depositants == input.Depositants ||
                    this.Depositants != null &&
                    input.Depositants != null &&
                    this.Depositants.SequenceEqual(input.Depositants)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Depositants != null)
                    hashCode = hashCode * 59 + this.Depositants.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
