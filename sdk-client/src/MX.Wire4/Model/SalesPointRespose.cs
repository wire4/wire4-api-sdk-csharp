/* 
 * Wire4RestAPI
 *
 * Referencia de la API de Wire4
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = MX.Wire4.Client.SwaggerDateConverter;

namespace MX.Wire4.Model
{
    /// <summary>
    /// Objeto que contiene la información del punto de venta que se registró.
    /// </summary>
    [DataContract]
        public partial class SalesPointRespose :  IEquatable<SalesPointRespose>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SalesPointRespose" /> class.
        /// </summary>
        /// <param name="salesPointId">Es el identificador del punto de venta..</param>
        /// <param name="userKey">Es la llave de usuario para el API Wire4. Sólo para el uso de CODI®..</param>
        /// <param name="userSecret">Es la contraseña para el API Wire4. Sólo para el uso de CODI®..</param>
        /// <param name="webhook">webhook.</param>
        public SalesPointRespose(string salesPointId = default(string), string userKey = default(string), string userSecret = default(string), Webhook webhook = default(Webhook))
        {
            this.SalesPointId = salesPointId;
            this.UserKey = userKey;
            this.UserSecret = userSecret;
            this.Webhook = webhook;
        }
        
        /// <summary>
        /// Es el identificador del punto de venta.
        /// </summary>
        /// <value>Es el identificador del punto de venta.</value>
        [DataMember(Name="sales_point_id", EmitDefaultValue=false)]
        public string SalesPointId { get; set; }

        /// <summary>
        /// Es la llave de usuario para el API Wire4. Sólo para el uso de CODI®.
        /// </summary>
        /// <value>Es la llave de usuario para el API Wire4. Sólo para el uso de CODI®.</value>
        [DataMember(Name="user_key", EmitDefaultValue=false)]
        public string UserKey { get; set; }

        /// <summary>
        /// Es la contraseña para el API Wire4. Sólo para el uso de CODI®.
        /// </summary>
        /// <value>Es la contraseña para el API Wire4. Sólo para el uso de CODI®.</value>
        [DataMember(Name="user_secret", EmitDefaultValue=false)]
        public string UserSecret { get; set; }

        /// <summary>
        /// Gets or Sets Webhook
        /// </summary>
        [DataMember(Name="webhook", EmitDefaultValue=false)]
        public Webhook Webhook { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SalesPointRespose {\n");
            sb.Append("  SalesPointId: ").Append(SalesPointId).Append("\n");
            sb.Append("  UserKey: ").Append(UserKey).Append("\n");
            sb.Append("  UserSecret: ").Append(UserSecret).Append("\n");
            sb.Append("  Webhook: ").Append(Webhook).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SalesPointRespose);
        }

        /// <summary>
        /// Returns true if SalesPointRespose instances are equal
        /// </summary>
        /// <param name="input">Instance of SalesPointRespose to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SalesPointRespose input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SalesPointId == input.SalesPointId ||
                    (this.SalesPointId != null &&
                    this.SalesPointId.Equals(input.SalesPointId))
                ) && 
                (
                    this.UserKey == input.UserKey ||
                    (this.UserKey != null &&
                    this.UserKey.Equals(input.UserKey))
                ) && 
                (
                    this.UserSecret == input.UserSecret ||
                    (this.UserSecret != null &&
                    this.UserSecret.Equals(input.UserSecret))
                ) && 
                (
                    this.Webhook == input.Webhook ||
                    (this.Webhook != null &&
                    this.Webhook.Equals(input.Webhook))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SalesPointId != null)
                    hashCode = hashCode * 59 + this.SalesPointId.GetHashCode();
                if (this.UserKey != null)
                    hashCode = hashCode * 59 + this.UserKey.GetHashCode();
                if (this.UserSecret != null)
                    hashCode = hashCode * 59 + this.UserSecret.GetHashCode();
                if (this.Webhook != null)
                    hashCode = hashCode * 59 + this.Webhook.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
