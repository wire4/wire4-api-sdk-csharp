/* 
 * Wire4RestAPI
 *
 * Referencia de la API de Wire4
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = MX.Wire4.Client.SwaggerDateConverter;

namespace MX.Wire4.Model
{
    /// <summary>
    /// Certificado de la empresa que se esta registrando
    /// </summary>
    [DataContract]
        public partial class CertificateRequest :  IEquatable<CertificateRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CertificateRequest" /> class.
        /// </summary>
        /// <param name="alias">Alias del certificado.</param>
        /// <param name="certificateNumber">Numero de certificado.</param>
        /// <param name="checkDigit">Dígito verificador.</param>
        /// <param name="cipherData">Información de cifrado.</param>
        public CertificateRequest(string alias = default(string), string certificateNumber = default(string), string checkDigit = default(string), string cipherData = default(string))
        {
            this.Alias = alias;
            this.CertificateNumber = certificateNumber;
            this.CheckDigit = checkDigit;
            this.CipherData = cipherData;
        }
        
        /// <summary>
        /// Alias del certificado
        /// </summary>
        /// <value>Alias del certificado</value>
        [DataMember(Name="alias", EmitDefaultValue=false)]
        public string Alias { get; set; }

        /// <summary>
        /// Numero de certificado
        /// </summary>
        /// <value>Numero de certificado</value>
        [DataMember(Name="certificate_number", EmitDefaultValue=false)]
        public string CertificateNumber { get; set; }

        /// <summary>
        /// Dígito verificador
        /// </summary>
        /// <value>Dígito verificador</value>
        [DataMember(Name="check_digit", EmitDefaultValue=false)]
        public string CheckDigit { get; set; }

        /// <summary>
        /// Información de cifrado
        /// </summary>
        /// <value>Información de cifrado</value>
        [DataMember(Name="cipher_data", EmitDefaultValue=false)]
        public string CipherData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CertificateRequest {\n");
            sb.Append("  Alias: ").Append(Alias).Append("\n");
            sb.Append("  CertificateNumber: ").Append(CertificateNumber).Append("\n");
            sb.Append("  CheckDigit: ").Append(CheckDigit).Append("\n");
            sb.Append("  CipherData: ").Append(CipherData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CertificateRequest);
        }

        /// <summary>
        /// Returns true if CertificateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CertificateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CertificateRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Alias == input.Alias ||
                    (this.Alias != null &&
                    this.Alias.Equals(input.Alias))
                ) && 
                (
                    this.CertificateNumber == input.CertificateNumber ||
                    (this.CertificateNumber != null &&
                    this.CertificateNumber.Equals(input.CertificateNumber))
                ) && 
                (
                    this.CheckDigit == input.CheckDigit ||
                    (this.CheckDigit != null &&
                    this.CheckDigit.Equals(input.CheckDigit))
                ) && 
                (
                    this.CipherData == input.CipherData ||
                    (this.CipherData != null &&
                    this.CipherData.Equals(input.CipherData))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Alias != null)
                    hashCode = hashCode * 59 + this.Alias.GetHashCode();
                if (this.CertificateNumber != null)
                    hashCode = hashCode * 59 + this.CertificateNumber.GetHashCode();
                if (this.CheckDigit != null)
                    hashCode = hashCode * 59 + this.CheckDigit.GetHashCode();
                if (this.CipherData != null)
                    hashCode = hashCode * 59 + this.CipherData.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
