/* 
 * Wire4RestAPI
 *
 * Referencia de API. La API de Wire4 está organizada en torno a REST
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = MX.Wire4.Client.SwaggerDateConverter;

namespace MX.Wire4.Model
{
    /// <summary>
    /// Es el objeto del mensaje que se envía con la información del punto de venta registrado.
    /// </summary>
    [DataContract]
        public partial class MessageCodiAction :  IEquatable<MessageCodiAction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageCodiAction" /> class.
        /// </summary>
        /// <param name="amount">Es el monto de la operación de pago..</param>
        /// <param name="concept">Es el concepto de la transacción..</param>
        /// <param name="dueDate">Es la fecha de expiración de la operación..</param>
        /// <param name="id">Es el UUID de la operación..</param>
        /// <param name="metadata">Es el campo Metadata asociado a la petición de pago. Es información que indica guardar la petición..</param>
        /// <param name="operationDate">Es la fecha de la operación..</param>
        /// <param name="orderId">Es el identificador de la petición..</param>
        /// <param name="paymentType">Es el tipo de pago..</param>
        /// <param name="reference">Es el número de referencia..</param>
        /// <param name="salesPointId">Identidicador del punto de venta a la que pertenece la petición de pago..</param>
        /// <param name="status">Es el estado (estatus) de la operación de pago..</param>
        /// <param name="transactionId">Es el identificador de la transacción..</param>
        public MessageCodiAction(decimal? amount = default(decimal?), string concept = default(string), DateTime? dueDate = default(DateTime?), string id = default(string), string metadata = default(string), DateTime? operationDate = default(DateTime?), string orderId = default(string), string paymentType = default(string), string reference = default(string), string salesPointId = default(string), string status = default(string), string transactionId = default(string))
        {
            this.Amount = amount;
            this.Concept = concept;
            this.DueDate = dueDate;
            this.Id = id;
            this.Metadata = metadata;
            this.OperationDate = operationDate;
            this.OrderId = orderId;
            this.PaymentType = paymentType;
            this.Reference = reference;
            this.SalesPointId = salesPointId;
            this.Status = status;
            this.TransactionId = transactionId;
        }
        
        /// <summary>
        /// Es el monto de la operación de pago.
        /// </summary>
        /// <value>Es el monto de la operación de pago.</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public decimal? Amount { get; set; }

        /// <summary>
        /// Es el concepto de la transacción.
        /// </summary>
        /// <value>Es el concepto de la transacción.</value>
        [DataMember(Name="concept", EmitDefaultValue=false)]
        public string Concept { get; set; }

        /// <summary>
        /// Es la fecha de expiración de la operación.
        /// </summary>
        /// <value>Es la fecha de expiración de la operación.</value>
        [DataMember(Name="due_date", EmitDefaultValue=false)]
        public DateTime? DueDate { get; set; }

        /// <summary>
        /// Es el UUID de la operación.
        /// </summary>
        /// <value>Es el UUID de la operación.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Es el campo Metadata asociado a la petición de pago. Es información que indica guardar la petición.
        /// </summary>
        /// <value>Es el campo Metadata asociado a la petición de pago. Es información que indica guardar la petición.</value>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public string Metadata { get; set; }

        /// <summary>
        /// Es la fecha de la operación.
        /// </summary>
        /// <value>Es la fecha de la operación.</value>
        [DataMember(Name="operation_date", EmitDefaultValue=false)]
        public DateTime? OperationDate { get; set; }

        /// <summary>
        /// Es el identificador de la petición.
        /// </summary>
        /// <value>Es el identificador de la petición.</value>
        [DataMember(Name="order_id", EmitDefaultValue=false)]
        public string OrderId { get; set; }

        /// <summary>
        /// Es el tipo de pago.
        /// </summary>
        /// <value>Es el tipo de pago.</value>
        [DataMember(Name="payment_type", EmitDefaultValue=false)]
        public string PaymentType { get; set; }

        /// <summary>
        /// Es el número de referencia.
        /// </summary>
        /// <value>Es el número de referencia.</value>
        [DataMember(Name="reference", EmitDefaultValue=false)]
        public string Reference { get; set; }

        /// <summary>
        /// Identidicador del punto de venta a la que pertenece la petición de pago.
        /// </summary>
        /// <value>Identidicador del punto de venta a la que pertenece la petición de pago.</value>
        [DataMember(Name="sales_point_id", EmitDefaultValue=false)]
        public string SalesPointId { get; set; }

        /// <summary>
        /// Es el estado (estatus) de la operación de pago.
        /// </summary>
        /// <value>Es el estado (estatus) de la operación de pago.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Es el identificador de la transacción.
        /// </summary>
        /// <value>Es el identificador de la transacción.</value>
        [DataMember(Name="transaction_id", EmitDefaultValue=false)]
        public string TransactionId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MessageCodiAction {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Concept: ").Append(Concept).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  OperationDate: ").Append(OperationDate).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  PaymentType: ").Append(PaymentType).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  SalesPointId: ").Append(SalesPointId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MessageCodiAction);
        }

        /// <summary>
        /// Returns true if MessageCodiAction instances are equal
        /// </summary>
        /// <param name="input">Instance of MessageCodiAction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MessageCodiAction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Concept == input.Concept ||
                    (this.Concept != null &&
                    this.Concept.Equals(input.Concept))
                ) && 
                (
                    this.DueDate == input.DueDate ||
                    (this.DueDate != null &&
                    this.DueDate.Equals(input.DueDate))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.OperationDate == input.OperationDate ||
                    (this.OperationDate != null &&
                    this.OperationDate.Equals(input.OperationDate))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.PaymentType == input.PaymentType ||
                    (this.PaymentType != null &&
                    this.PaymentType.Equals(input.PaymentType))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.SalesPointId == input.SalesPointId ||
                    (this.SalesPointId != null &&
                    this.SalesPointId.Equals(input.SalesPointId))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.TransactionId == input.TransactionId ||
                    (this.TransactionId != null &&
                    this.TransactionId.Equals(input.TransactionId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Concept != null)
                    hashCode = hashCode * 59 + this.Concept.GetHashCode();
                if (this.DueDate != null)
                    hashCode = hashCode * 59 + this.DueDate.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.OperationDate != null)
                    hashCode = hashCode * 59 + this.OperationDate.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.PaymentType != null)
                    hashCode = hashCode * 59 + this.PaymentType.GetHashCode();
                if (this.Reference != null)
                    hashCode = hashCode * 59 + this.Reference.GetHashCode();
                if (this.SalesPointId != null)
                    hashCode = hashCode * 59 + this.SalesPointId.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.TransactionId != null)
                    hashCode = hashCode * 59 + this.TransactionId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
