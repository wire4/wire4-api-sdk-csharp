/* 
 * Wire4RestAPI
 *
 * Referencia de la API de Wire4
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = MX.Wire4.Client.SwaggerDateConverter;
namespace MX.Wire4.Model
{
    /// <summary>
    /// Contiene la información de la factura
    /// </summary>
    [DataContract]
        public partial class Billing :  IEquatable<Billing>, IValidatableObject
    {
        /// <summary>
        /// Estatus de la factura
        /// </summary>
        /// <value>Estatus de la factura</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StatusEnum
        {
            /// <summary>
            /// Enum PAID for value: PAID
            /// </summary>
            [EnumMember(Value = "PAID")]
            PAID = 1,
            /// <summary>
            /// Enum OMMITED for value: OMMITED
            /// </summary>
            [EnumMember(Value = "OMMITED")]
            OMMITED = 2,
            /// <summary>
            /// Enum WAITINGPAYMENT for value: WAITING_PAYMENT
            /// </summary>
            [EnumMember(Value = "WAITING_PAYMENT")]
            WAITINGPAYMENT = 3,
            /// <summary>
            /// Enum EMISSIONPENDING for value: EMISSION_PENDING
            /// </summary>
            [EnumMember(Value = "EMISSION_PENDING")]
            EMISSIONPENDING = 4        }
        /// <summary>
        /// Estatus de la factura
        /// </summary>
        /// <value>Estatus de la factura</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Billing" /> class.
        /// </summary>
        /// <param name="amount">Monto total de la factura.</param>
        /// <param name="emissionAt">Fecha y hora en que se emitió de la factura.</param>
        /// <param name="endDate">Fecha en que finaliza el periodo que se factura.</param>
        /// <param name="id">Identificador de la factura.</param>
        /// <param name="startDate">Fecha de inicio del periodo que se factura.</param>
        /// <param name="status">Estatus de la factura.</param>
        /// <param name="transactions">transactions.</param>
        /// <param name="urlPdf">Url de la representación impresa en pdf de la factura.</param>
        /// <param name="urlXml">Url del archivo xml de la factura.</param>
        public Billing(decimal? amount = default(decimal?), DateTime? emissionAt = default(DateTime?), DateTime? endDate = default(DateTime?), string id = default(string), DateTime? startDate = default(DateTime?), StatusEnum? status = default(StatusEnum?), List<BillingTransaction> transactions = default(List<BillingTransaction>), string urlPdf = default(string), string urlXml = default(string))
        {
            this.Amount = amount;
            this.EmissionAt = emissionAt;
            this.EndDate = endDate;
            this.Id = id;
            this.StartDate = startDate;
            this.Status = status;
            this.Transactions = transactions;
            this.UrlPdf = urlPdf;
            this.UrlXml = urlXml;
        }
        
        /// <summary>
        /// Monto total de la factura
        /// </summary>
        /// <value>Monto total de la factura</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public decimal? Amount { get; set; }

        /// <summary>
        /// Fecha y hora en que se emitió de la factura
        /// </summary>
        /// <value>Fecha y hora en que se emitió de la factura</value>
        [DataMember(Name="emission_at", EmitDefaultValue=false)]
        public DateTime? EmissionAt { get; set; }

        /// <summary>
        /// Fecha en que finaliza el periodo que se factura
        /// </summary>
        /// <value>Fecha en que finaliza el periodo que se factura</value>
        [DataMember(Name="end_date", EmitDefaultValue=false)]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Identificador de la factura
        /// </summary>
        /// <value>Identificador de la factura</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Fecha de inicio del periodo que se factura
        /// </summary>
        /// <value>Fecha de inicio del periodo que se factura</value>
        [DataMember(Name="start_date", EmitDefaultValue=false)]
        public DateTime? StartDate { get; set; }


        /// <summary>
        /// Gets or Sets Transactions
        /// </summary>
        [DataMember(Name="transactions", EmitDefaultValue=false)]
        public List<BillingTransaction> Transactions { get; set; }

        /// <summary>
        /// Url de la representación impresa en pdf de la factura
        /// </summary>
        /// <value>Url de la representación impresa en pdf de la factura</value>
        [DataMember(Name="url_pdf", EmitDefaultValue=false)]
        public string UrlPdf { get; set; }

        /// <summary>
        /// Url del archivo xml de la factura
        /// </summary>
        /// <value>Url del archivo xml de la factura</value>
        [DataMember(Name="url_xml", EmitDefaultValue=false)]
        public string UrlXml { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Billing {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  EmissionAt: ").Append(EmissionAt).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Transactions: ").Append(Transactions).Append("\n");
            sb.Append("  UrlPdf: ").Append(UrlPdf).Append("\n");
            sb.Append("  UrlXml: ").Append(UrlXml).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Billing);
        }

        /// <summary>
        /// Returns true if Billing instances are equal
        /// </summary>
        /// <param name="input">Instance of Billing to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Billing input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.EmissionAt == input.EmissionAt ||
                    (this.EmissionAt != null &&
                    this.EmissionAt.Equals(input.EmissionAt))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Transactions == input.Transactions ||
                    this.Transactions != null &&
                    input.Transactions != null &&
                    this.Transactions.SequenceEqual(input.Transactions)
                ) && 
                (
                    this.UrlPdf == input.UrlPdf ||
                    (this.UrlPdf != null &&
                    this.UrlPdf.Equals(input.UrlPdf))
                ) && 
                (
                    this.UrlXml == input.UrlXml ||
                    (this.UrlXml != null &&
                    this.UrlXml.Equals(input.UrlXml))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.EmissionAt != null)
                    hashCode = hashCode * 59 + this.EmissionAt.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Transactions != null)
                    hashCode = hashCode * 59 + this.Transactions.GetHashCode();
                if (this.UrlPdf != null)
                    hashCode = hashCode * 59 + this.UrlPdf.GetHashCode();
                if (this.UrlXml != null)
                    hashCode = hashCode * 59 + this.UrlXml.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
