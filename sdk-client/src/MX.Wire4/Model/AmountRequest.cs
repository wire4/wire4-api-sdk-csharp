/* 
 * Wire4RestAPI
 *
 * Referencia de la API de Wire4
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = MX.Wire4.Client.SwaggerDateConverter;

namespace MX.Wire4.Model
{
    /// <summary>
    /// Objeto que contiene la información del previo y nuevo monto límite
    /// </summary>
    [DataContract]
        public partial class AmountRequest :  IEquatable<AmountRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AmountRequest" /> class.
        /// </summary>
        /// <param name="amountLimit">Nuevo monto límite que reemplazará al actual, un monto de 0.0 implica que no hay límite (required).</param>
        /// <param name="currencyCode">Código de moneda de la cuenta (required).</param>
        /// <param name="previousAmountLimit">Monto límite registrado actualmente, un monto de 0.0 implica que no hay límite (required).</param>
        public AmountRequest(decimal? amountLimit = default(decimal?), string currencyCode = default(string), decimal? previousAmountLimit = default(decimal?))
        {
            // to ensure "amountLimit" is required (not null)
            if (amountLimit == null)
            {
                throw new InvalidDataException("amountLimit is a required property for AmountRequest and cannot be null");
            }
            else
            {
                this.AmountLimit = amountLimit;
            }
            // to ensure "currencyCode" is required (not null)
            if (currencyCode == null)
            {
                throw new InvalidDataException("currencyCode is a required property for AmountRequest and cannot be null");
            }
            else
            {
                this.CurrencyCode = currencyCode;
            }
            // to ensure "previousAmountLimit" is required (not null)
            if (previousAmountLimit == null)
            {
                throw new InvalidDataException("previousAmountLimit is a required property for AmountRequest and cannot be null");
            }
            else
            {
                this.PreviousAmountLimit = previousAmountLimit;
            }
        }
        
        /// <summary>
        /// Nuevo monto límite que reemplazará al actual, un monto de 0.0 implica que no hay límite
        /// </summary>
        /// <value>Nuevo monto límite que reemplazará al actual, un monto de 0.0 implica que no hay límite</value>
        [DataMember(Name="amount_limit", EmitDefaultValue=false)]
        public decimal? AmountLimit { get; set; }

        /// <summary>
        /// Código de moneda de la cuenta
        /// </summary>
        /// <value>Código de moneda de la cuenta</value>
        [DataMember(Name="currency_code", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Monto límite registrado actualmente, un monto de 0.0 implica que no hay límite
        /// </summary>
        /// <value>Monto límite registrado actualmente, un monto de 0.0 implica que no hay límite</value>
        [DataMember(Name="previous_amount_limit", EmitDefaultValue=false)]
        public decimal? PreviousAmountLimit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AmountRequest {\n");
            sb.Append("  AmountLimit: ").Append(AmountLimit).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  PreviousAmountLimit: ").Append(PreviousAmountLimit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AmountRequest);
        }

        /// <summary>
        /// Returns true if AmountRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AmountRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AmountRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AmountLimit == input.AmountLimit ||
                    (this.AmountLimit != null &&
                    this.AmountLimit.Equals(input.AmountLimit))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.PreviousAmountLimit == input.PreviousAmountLimit ||
                    (this.PreviousAmountLimit != null &&
                    this.PreviousAmountLimit.Equals(input.PreviousAmountLimit))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AmountLimit != null)
                    hashCode = hashCode * 59 + this.AmountLimit.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.PreviousAmountLimit != null)
                    hashCode = hashCode * 59 + this.PreviousAmountLimit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
