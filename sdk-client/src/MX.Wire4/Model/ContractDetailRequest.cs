/* 
 * Wire4RestAPI
 *
 * Referencia de API. La API de Wire4 está organizada en torno a REST
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = MX.Wire4.Client.SwaggerDateConverter;

namespace MX.Wire4.Model
{
    /// <summary>
    /// ContractDetailRequest
    /// </summary>
    [DataContract]
        public partial class ContractDetailRequest :  IEquatable<ContractDetailRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContractDetailRequest" /> class.
        /// </summary>
        /// <param name="contract">El contrato a consultar la información.</param>
        /// <param name="password">La contraseña del usuario.</param>
        /// <param name="tokenCode">La contraseña del usuario.</param>
        /// <param name="userName">El nombre del usuario.</param>
        public ContractDetailRequest(string contract = default(string), string password = default(string), string tokenCode = default(string), string userName = default(string))
        {
            this.Contract = contract;
            this.Password = password;
            this.TokenCode = tokenCode;
            this.UserName = userName;
        }
        
        /// <summary>
        /// El contrato a consultar la información
        /// </summary>
        /// <value>El contrato a consultar la información</value>
        [DataMember(Name="contract", EmitDefaultValue=false)]
        public string Contract { get; set; }

        /// <summary>
        /// La contraseña del usuario
        /// </summary>
        /// <value>La contraseña del usuario</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// La contraseña del usuario
        /// </summary>
        /// <value>La contraseña del usuario</value>
        [DataMember(Name="token_code", EmitDefaultValue=false)]
        public string TokenCode { get; set; }

        /// <summary>
        /// El nombre del usuario
        /// </summary>
        /// <value>El nombre del usuario</value>
        [DataMember(Name="user_name", EmitDefaultValue=false)]
        public string UserName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContractDetailRequest {\n");
            sb.Append("  Contract: ").Append(Contract).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  TokenCode: ").Append(TokenCode).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContractDetailRequest);
        }

        /// <summary>
        /// Returns true if ContractDetailRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ContractDetailRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContractDetailRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Contract == input.Contract ||
                    (this.Contract != null &&
                    this.Contract.Equals(input.Contract))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.TokenCode == input.TokenCode ||
                    (this.TokenCode != null &&
                    this.TokenCode.Equals(input.TokenCode))
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Contract != null)
                    hashCode = hashCode * 59 + this.Contract.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.TokenCode != null)
                    hashCode = hashCode * 59 + this.TokenCode.GetHashCode();
                if (this.UserName != null)
                    hashCode = hashCode * 59 + this.UserName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
