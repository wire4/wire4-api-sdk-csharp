/* 
 * Wire4RestAPI
 *
 * Referencia de API. La API de Wire4 está organizada en torno a REST
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = MX.Wire4.Client.SwaggerDateConverter;

namespace MX.Wire4.Model
{
    /// <summary>
    /// BeneficiariesQueryRegisterStatus
    /// </summary>
    [DataContract]
        public partial class BeneficiariesQueryRegisterStatus :  IEquatable<BeneficiariesQueryRegisterStatus>, IValidatableObject
    {
        /// <summary>
        /// Indica sí la petición ya fue autorizada usando el token del usuario
        /// </summary>
        /// <value>Indica sí la petición ya fue autorizada usando el token del usuario</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StatusRequestEnum
        {
            /// <summary>
            /// Enum PENDING for value: PENDING
            /// </summary>
            [EnumMember(Value = "PENDING")]
            PENDING = 0,
            /// <summary>
            /// Enum AUTHORIZED for value: AUTHORIZED
            /// </summary>
            [EnumMember(Value = "AUTHORIZED")]
            AUTHORIZED = 1        }
        /// <summary>
        /// Indica sí la petición ya fue autorizada usando el token del usuario
        /// </summary>
        /// <value>Indica sí la petición ya fue autorizada usando el token del usuario</value>
        [DataMember(Name="status_request", EmitDefaultValue=false)]
        public StatusRequestEnum? StatusRequest { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BeneficiariesQueryRegisterStatus" /> class.
        /// </summary>
        /// <param name="authorizationDate">Fecha en que el usuario propietario del token autorizo el registro de beneficiarios.</param>
        /// <param name="beneficiaries">Es una lista de beneficiarios obtenidos..</param>
        /// <param name="requestDate">Fecha en que se realizó la petición de registro de beneficiarios, .</param>
        /// <param name="requestId">Identificador de la petición del registro de beneficiarios.</param>
        /// <param name="statusRequest">Indica sí la petición ya fue autorizada usando el token del usuario.</param>
        /// <param name="totalBeneficiaries">Total de beneficiarios enviados en la petición.</param>
        public BeneficiariesQueryRegisterStatus(DateTime? authorizationDate = default(DateTime?), List<AccountResponse> beneficiaries = default(List<AccountResponse>), DateTime? requestDate = default(DateTime?), string requestId = default(string), StatusRequestEnum? statusRequest = default(StatusRequestEnum?), int? totalBeneficiaries = default(int?))
        {
            this.AuthorizationDate = authorizationDate;
            this.Beneficiaries = beneficiaries;
            this.RequestDate = requestDate;
            this.RequestId = requestId;
            this.StatusRequest = statusRequest;
            this.TotalBeneficiaries = totalBeneficiaries;
        }
        
        /// <summary>
        /// Fecha en que el usuario propietario del token autorizo el registro de beneficiarios
        /// </summary>
        /// <value>Fecha en que el usuario propietario del token autorizo el registro de beneficiarios</value>
        [DataMember(Name="authorization_date", EmitDefaultValue=false)]
        public DateTime? AuthorizationDate { get; set; }

        /// <summary>
        /// Es una lista de beneficiarios obtenidos.
        /// </summary>
        /// <value>Es una lista de beneficiarios obtenidos.</value>
        [DataMember(Name="beneficiaries", EmitDefaultValue=false)]
        public List<AccountResponse> Beneficiaries { get; set; }

        /// <summary>
        /// Fecha en que se realizó la petición de registro de beneficiarios, 
        /// </summary>
        /// <value>Fecha en que se realizó la petición de registro de beneficiarios, </value>
        [DataMember(Name="request_date", EmitDefaultValue=false)]
        public DateTime? RequestDate { get; set; }

        /// <summary>
        /// Identificador de la petición del registro de beneficiarios
        /// </summary>
        /// <value>Identificador de la petición del registro de beneficiarios</value>
        [DataMember(Name="request_id", EmitDefaultValue=false)]
        public string RequestId { get; set; }


        /// <summary>
        /// Total de beneficiarios enviados en la petición
        /// </summary>
        /// <value>Total de beneficiarios enviados en la petición</value>
        [DataMember(Name="total_beneficiaries", EmitDefaultValue=false)]
        public int? TotalBeneficiaries { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BeneficiariesQueryRegisterStatus {\n");
            sb.Append("  AuthorizationDate: ").Append(AuthorizationDate).Append("\n");
            sb.Append("  Beneficiaries: ").Append(Beneficiaries).Append("\n");
            sb.Append("  RequestDate: ").Append(RequestDate).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  StatusRequest: ").Append(StatusRequest).Append("\n");
            sb.Append("  TotalBeneficiaries: ").Append(TotalBeneficiaries).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BeneficiariesQueryRegisterStatus);
        }

        /// <summary>
        /// Returns true if BeneficiariesQueryRegisterStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of BeneficiariesQueryRegisterStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BeneficiariesQueryRegisterStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AuthorizationDate == input.AuthorizationDate ||
                    (this.AuthorizationDate != null &&
                    this.AuthorizationDate.Equals(input.AuthorizationDate))
                ) && 
                (
                    this.Beneficiaries == input.Beneficiaries ||
                    this.Beneficiaries != null &&
                    input.Beneficiaries != null &&
                    this.Beneficiaries.SequenceEqual(input.Beneficiaries)
                ) && 
                (
                    this.RequestDate == input.RequestDate ||
                    (this.RequestDate != null &&
                    this.RequestDate.Equals(input.RequestDate))
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.StatusRequest == input.StatusRequest ||
                    (this.StatusRequest != null &&
                    this.StatusRequest.Equals(input.StatusRequest))
                ) && 
                (
                    this.TotalBeneficiaries == input.TotalBeneficiaries ||
                    (this.TotalBeneficiaries != null &&
                    this.TotalBeneficiaries.Equals(input.TotalBeneficiaries))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AuthorizationDate != null)
                    hashCode = hashCode * 59 + this.AuthorizationDate.GetHashCode();
                if (this.Beneficiaries != null)
                    hashCode = hashCode * 59 + this.Beneficiaries.GetHashCode();
                if (this.RequestDate != null)
                    hashCode = hashCode * 59 + this.RequestDate.GetHashCode();
                if (this.RequestId != null)
                    hashCode = hashCode * 59 + this.RequestId.GetHashCode();
                if (this.StatusRequest != null)
                    hashCode = hashCode * 59 + this.StatusRequest.GetHashCode();
                if (this.TotalBeneficiaries != null)
                    hashCode = hashCode * 59 + this.TotalBeneficiaries.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
