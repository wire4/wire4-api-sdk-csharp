/* 
 * Wire4RestAPI
 *
 * Referencia de la API de Wire4
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = MX.Wire4.Client.SwaggerDateConverter;
namespace MX.Wire4.Model
{
    /// <summary>
    /// Objeto request para solictar la aplicación de Cargos Recurrentes
    /// </summary>
    [DataContract]
        public partial class RecurringChargeRequest :  IEquatable<RecurringChargeRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecurringChargeRequest" /> class.
        /// </summary>
        /// <param name="cancelReturnUrl">Es la dirección URL a la que se redirigirá en caso de que el usuario cancele. (required).</param>
        /// <param name="charges">Número de cargos que se aplicarán a la tarjeta del cliente final a partir de la fecha del primer cargo (required).</param>
        /// <param name="customer">customer (required).</param>
        /// <param name="firstChargeDate">Fecha en la que se aplicará el primer cargo a la tarjeta del cliente final  (required).</param>
        /// <param name="orderId">Número de orden asignado por el cliente de Wire4 (required).</param>
        /// <param name="product">product (required).</param>
        /// <param name="returnUrl">Es la dirección URL a la que se redirigirá en caso de éxito. (required).</param>
        public RecurringChargeRequest(string cancelReturnUrl = default(string), int? charges = default(int?), Customer customer = default(Customer), DateTime? firstChargeDate = default(DateTime?), string orderId = default(string), Product product = default(Product), string returnUrl = default(string))
        {
            // to ensure "cancelReturnUrl" is required (not null)
            if (cancelReturnUrl == null)
            {
                throw new InvalidDataException("cancelReturnUrl is a required property for RecurringChargeRequest and cannot be null");
            }
            else
            {
                this.CancelReturnUrl = cancelReturnUrl;
            }
            // to ensure "charges" is required (not null)
            if (charges == null)
            {
                throw new InvalidDataException("charges is a required property for RecurringChargeRequest and cannot be null");
            }
            else
            {
                this.Charges = charges;
            }
            // to ensure "customer" is required (not null)
            if (customer == null)
            {
                throw new InvalidDataException("customer is a required property for RecurringChargeRequest and cannot be null");
            }
            else
            {
                this.Customer = customer;
            }
            // to ensure "firstChargeDate" is required (not null)
            if (firstChargeDate == null)
            {
                throw new InvalidDataException("firstChargeDate is a required property for RecurringChargeRequest and cannot be null");
            }
            else
            {
                this.FirstChargeDate = firstChargeDate;
            }
            // to ensure "orderId" is required (not null)
            if (orderId == null)
            {
                throw new InvalidDataException("orderId is a required property for RecurringChargeRequest and cannot be null");
            }
            else
            {
                this.OrderId = orderId;
            }
            // to ensure "product" is required (not null)
            if (product == null)
            {
                throw new InvalidDataException("product is a required property for RecurringChargeRequest and cannot be null");
            }
            else
            {
                this.Product = product;
            }
            // to ensure "returnUrl" is required (not null)
            if (returnUrl == null)
            {
                throw new InvalidDataException("returnUrl is a required property for RecurringChargeRequest and cannot be null");
            }
            else
            {
                this.ReturnUrl = returnUrl;
            }
        }
        
        /// <summary>
        /// Es la dirección URL a la que se redirigirá en caso de que el usuario cancele.
        /// </summary>
        /// <value>Es la dirección URL a la que se redirigirá en caso de que el usuario cancele.</value>
        [DataMember(Name="cancel_return_url", EmitDefaultValue=false)]
        public string CancelReturnUrl { get; set; }

        /// <summary>
        /// Número de cargos que se aplicarán a la tarjeta del cliente final a partir de la fecha del primer cargo
        /// </summary>
        /// <value>Número de cargos que se aplicarán a la tarjeta del cliente final a partir de la fecha del primer cargo</value>
        [DataMember(Name="charges", EmitDefaultValue=false)]
        public int? Charges { get; set; }

        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [DataMember(Name="customer", EmitDefaultValue=false)]
        public Customer Customer { get; set; }

        /// <summary>
        /// Fecha en la que se aplicará el primer cargo a la tarjeta del cliente final 
        /// </summary>
        /// <value>Fecha en la que se aplicará el primer cargo a la tarjeta del cliente final </value>
        [DataMember(Name="first_charge_date", EmitDefaultValue=false)]
        public DateTime? FirstChargeDate { get; set; }

        /// <summary>
        /// Número de orden asignado por el cliente de Wire4
        /// </summary>
        /// <value>Número de orden asignado por el cliente de Wire4</value>
        [DataMember(Name="order_id", EmitDefaultValue=false)]
        public string OrderId { get; set; }

        /// <summary>
        /// Gets or Sets Product
        /// </summary>
        [DataMember(Name="product", EmitDefaultValue=false)]
        public Product Product { get; set; }

        /// <summary>
        /// Es la dirección URL a la que se redirigirá en caso de éxito.
        /// </summary>
        /// <value>Es la dirección URL a la que se redirigirá en caso de éxito.</value>
        [DataMember(Name="return_url", EmitDefaultValue=false)]
        public string ReturnUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RecurringChargeRequest {\n");
            sb.Append("  CancelReturnUrl: ").Append(CancelReturnUrl).Append("\n");
            sb.Append("  Charges: ").Append(Charges).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  FirstChargeDate: ").Append(FirstChargeDate).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("  ReturnUrl: ").Append(ReturnUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RecurringChargeRequest);
        }

        /// <summary>
        /// Returns true if RecurringChargeRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of RecurringChargeRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecurringChargeRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CancelReturnUrl == input.CancelReturnUrl ||
                    (this.CancelReturnUrl != null &&
                    this.CancelReturnUrl.Equals(input.CancelReturnUrl))
                ) && 
                (
                    this.Charges == input.Charges ||
                    (this.Charges != null &&
                    this.Charges.Equals(input.Charges))
                ) && 
                (
                    this.Customer == input.Customer ||
                    (this.Customer != null &&
                    this.Customer.Equals(input.Customer))
                ) && 
                (
                    this.FirstChargeDate == input.FirstChargeDate ||
                    (this.FirstChargeDate != null &&
                    this.FirstChargeDate.Equals(input.FirstChargeDate))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.Product == input.Product ||
                    (this.Product != null &&
                    this.Product.Equals(input.Product))
                ) && 
                (
                    this.ReturnUrl == input.ReturnUrl ||
                    (this.ReturnUrl != null &&
                    this.ReturnUrl.Equals(input.ReturnUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CancelReturnUrl != null)
                    hashCode = hashCode * 59 + this.CancelReturnUrl.GetHashCode();
                if (this.Charges != null)
                    hashCode = hashCode * 59 + this.Charges.GetHashCode();
                if (this.Customer != null)
                    hashCode = hashCode * 59 + this.Customer.GetHashCode();
                if (this.FirstChargeDate != null)
                    hashCode = hashCode * 59 + this.FirstChargeDate.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.Product != null)
                    hashCode = hashCode * 59 + this.Product.GetHashCode();
                if (this.ReturnUrl != null)
                    hashCode = hashCode * 59 + this.ReturnUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
