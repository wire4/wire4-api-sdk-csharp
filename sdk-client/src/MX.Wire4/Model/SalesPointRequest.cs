/* 
 * Wire4RestAPI
 *
 * Referencia de la API de Wire4
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = MX.Wire4.Client.SwaggerDateConverter;
namespace MX.Wire4.Model
{
    /// <summary>
    /// Información para registrar un punto de venta asociado una empresa.
    /// </summary>
    [DataContract]
        public partial class SalesPointRequest :  IEquatable<SalesPointRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SalesPointRequest" /> class.
        /// </summary>
        /// <param name="accessIp">Es la dirección IP desde donde se recibirán las peticiones de este punto de venta (required).</param>
        /// <param name="account">Es el número de cuenta CLABE donde se realizará el deposito del cobro CODI®. (required).</param>
        /// <param name="name">Es el nombre del punto de venta. (required).</param>
        /// <param name="notificationsUrl">Es la dirección URL para envíar notificaciones CODI® al punto de venta. (required).</param>
        public SalesPointRequest(string accessIp = default(string), string account = default(string), string name = default(string), string notificationsUrl = default(string))
        {
            // to ensure "accessIp" is required (not null)
            if (accessIp == null)
            {
                throw new InvalidDataException("accessIp is a required property for SalesPointRequest and cannot be null");
            }
            else
            {
                this.AccessIp = accessIp;
            }
            // to ensure "account" is required (not null)
            if (account == null)
            {
                throw new InvalidDataException("account is a required property for SalesPointRequest and cannot be null");
            }
            else
            {
                this.Account = account;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for SalesPointRequest and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "notificationsUrl" is required (not null)
            if (notificationsUrl == null)
            {
                throw new InvalidDataException("notificationsUrl is a required property for SalesPointRequest and cannot be null");
            }
            else
            {
                this.NotificationsUrl = notificationsUrl;
            }
        }
        
        /// <summary>
        /// Es la dirección IP desde donde se recibirán las peticiones de este punto de venta
        /// </summary>
        /// <value>Es la dirección IP desde donde se recibirán las peticiones de este punto de venta</value>
        [DataMember(Name="access_ip", EmitDefaultValue=false)]
        public string AccessIp { get; set; }

        /// <summary>
        /// Es el número de cuenta CLABE donde se realizará el deposito del cobro CODI®.
        /// </summary>
        /// <value>Es el número de cuenta CLABE donde se realizará el deposito del cobro CODI®.</value>
        [DataMember(Name="account", EmitDefaultValue=false)]
        public string Account { get; set; }

        /// <summary>
        /// Es el nombre del punto de venta.
        /// </summary>
        /// <value>Es el nombre del punto de venta.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Es la dirección URL para envíar notificaciones CODI® al punto de venta.
        /// </summary>
        /// <value>Es la dirección URL para envíar notificaciones CODI® al punto de venta.</value>
        [DataMember(Name="notifications_url", EmitDefaultValue=false)]
        public string NotificationsUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SalesPointRequest {\n");
            sb.Append("  AccessIp: ").Append(AccessIp).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NotificationsUrl: ").Append(NotificationsUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SalesPointRequest);
        }

        /// <summary>
        /// Returns true if SalesPointRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SalesPointRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SalesPointRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccessIp == input.AccessIp ||
                    (this.AccessIp != null &&
                    this.AccessIp.Equals(input.AccessIp))
                ) && 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.NotificationsUrl == input.NotificationsUrl ||
                    (this.NotificationsUrl != null &&
                    this.NotificationsUrl.Equals(input.NotificationsUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccessIp != null)
                    hashCode = hashCode * 59 + this.AccessIp.GetHashCode();
                if (this.Account != null)
                    hashCode = hashCode * 59 + this.Account.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.NotificationsUrl != null)
                    hashCode = hashCode * 59 + this.NotificationsUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
