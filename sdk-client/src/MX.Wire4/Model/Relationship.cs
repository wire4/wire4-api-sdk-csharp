/* 
 * Wire4RestAPI
 *
 * Referencia de la API de Wire4
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = MX.Wire4.Client.SwaggerDateConverter;

namespace MX.Wire4.Model
{
    /// <summary>
    /// Relationship
    /// </summary>
    [DataContract]
        public partial class Relationship :  IEquatable<Relationship>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Relationship" /> class.
        /// </summary>
        /// <param name="kindOfRelationship">Es el tipo de relación..</param>
        /// <param name="relationship">Es el mombre de la relación..</param>
        public Relationship(string kindOfRelationship = default(string), string relationship = default(string))
        {
            this.KindOfRelationship = kindOfRelationship;
            this._Relationship = relationship;
        }
        
        /// <summary>
        /// Es el tipo de relación.
        /// </summary>
        /// <value>Es el tipo de relación.</value>
        [DataMember(Name="kind_of_relationship", EmitDefaultValue=false)]
        public string KindOfRelationship { get; set; }

        /// <summary>
        /// Es el mombre de la relación.
        /// </summary>
        /// <value>Es el mombre de la relación.</value>
        [DataMember(Name="relationship", EmitDefaultValue=false)]
        public string _Relationship { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Relationship {\n");
            sb.Append("  KindOfRelationship: ").Append(KindOfRelationship).Append("\n");
            sb.Append("  _Relationship: ").Append(_Relationship).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Relationship);
        }

        /// <summary>
        /// Returns true if Relationship instances are equal
        /// </summary>
        /// <param name="input">Instance of Relationship to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Relationship input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.KindOfRelationship == input.KindOfRelationship ||
                    (this.KindOfRelationship != null &&
                    this.KindOfRelationship.Equals(input.KindOfRelationship))
                ) && 
                (
                    this._Relationship == input._Relationship ||
                    (this._Relationship != null &&
                    this._Relationship.Equals(input._Relationship))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.KindOfRelationship != null)
                    hashCode = hashCode * 59 + this.KindOfRelationship.GetHashCode();
                if (this._Relationship != null)
                    hashCode = hashCode * 59 + this._Relationship.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
