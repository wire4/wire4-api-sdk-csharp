/* 
 * Wire4RestAPI
 *
 * Referencia de la API de Wire4
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = MX.Wire4.Client.SwaggerDateConverter;

namespace MX.Wire4.Model
{
    /// <summary>
    /// Contiene información de las transacciones que se facturan
    /// </summary>
    [DataContract]
        public partial class BillingTransaction :  IEquatable<BillingTransaction>, IValidatableObject
    {
        /// <summary>
        /// Tipo de transaccion IN | OUT
        /// </summary>
        /// <value>Tipo de transaccion IN | OUT</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum IN for value: IN
            /// </summary>
            [EnumMember(Value = "IN")]
            IN = 0,
            /// <summary>
            /// Enum OUT for value: OUT
            /// </summary>
            [EnumMember(Value = "OUT")]
            OUT = 1        }
        /// <summary>
        /// Tipo de transaccion IN | OUT
        /// </summary>
        /// <value>Tipo de transaccion IN | OUT</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BillingTransaction" /> class.
        /// </summary>
        /// <param name="amount">Monto de la transacción.</param>
        /// <param name="claveRastreo">Clave de rastreo que se asignó a la transacción.</param>
        /// <param name="monexId">Identificador de transaccion en banco monex.</param>
        /// <param name="operationDate">Fecha y hora de la transacción.</param>
        /// <param name="orderId">Identificador de la orden.</param>
        /// <param name="paymentOrderId">Identificador de la orden de pago.</param>
        /// <param name="transactionId">Identificador de la transacción.</param>
        /// <param name="type">Tipo de transaccion IN | OUT.</param>
        public BillingTransaction(decimal? amount = default(decimal?), string claveRastreo = default(string), int? monexId = default(int?), DateTime? operationDate = default(DateTime?), string orderId = default(string), string paymentOrderId = default(string), int? transactionId = default(int?), TypeEnum? type = default(TypeEnum?))
        {
            this.Amount = amount;
            this.ClaveRastreo = claveRastreo;
            this.MonexId = monexId;
            this.OperationDate = operationDate;
            this.OrderId = orderId;
            this.PaymentOrderId = paymentOrderId;
            this.TransactionId = transactionId;
            this.Type = type;
        }
        
        /// <summary>
        /// Monto de la transacción
        /// </summary>
        /// <value>Monto de la transacción</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public decimal? Amount { get; set; }

        /// <summary>
        /// Clave de rastreo que se asignó a la transacción
        /// </summary>
        /// <value>Clave de rastreo que se asignó a la transacción</value>
        [DataMember(Name="clave_rastreo", EmitDefaultValue=false)]
        public string ClaveRastreo { get; set; }

        /// <summary>
        /// Identificador de transaccion en banco monex
        /// </summary>
        /// <value>Identificador de transaccion en banco monex</value>
        [DataMember(Name="monex_id", EmitDefaultValue=false)]
        public int? MonexId { get; set; }

        /// <summary>
        /// Fecha y hora de la transacción
        /// </summary>
        /// <value>Fecha y hora de la transacción</value>
        [DataMember(Name="operation_date", EmitDefaultValue=false)]
        public DateTime? OperationDate { get; set; }

        /// <summary>
        /// Identificador de la orden
        /// </summary>
        /// <value>Identificador de la orden</value>
        [DataMember(Name="order_id", EmitDefaultValue=false)]
        public string OrderId { get; set; }

        /// <summary>
        /// Identificador de la orden de pago
        /// </summary>
        /// <value>Identificador de la orden de pago</value>
        [DataMember(Name="payment_order_id", EmitDefaultValue=false)]
        public string PaymentOrderId { get; set; }

        /// <summary>
        /// Identificador de la transacción
        /// </summary>
        /// <value>Identificador de la transacción</value>
        [DataMember(Name="transaction_id", EmitDefaultValue=false)]
        public int? TransactionId { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BillingTransaction {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  ClaveRastreo: ").Append(ClaveRastreo).Append("\n");
            sb.Append("  MonexId: ").Append(MonexId).Append("\n");
            sb.Append("  OperationDate: ").Append(OperationDate).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  PaymentOrderId: ").Append(PaymentOrderId).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BillingTransaction);
        }

        /// <summary>
        /// Returns true if BillingTransaction instances are equal
        /// </summary>
        /// <param name="input">Instance of BillingTransaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BillingTransaction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.ClaveRastreo == input.ClaveRastreo ||
                    (this.ClaveRastreo != null &&
                    this.ClaveRastreo.Equals(input.ClaveRastreo))
                ) && 
                (
                    this.MonexId == input.MonexId ||
                    (this.MonexId != null &&
                    this.MonexId.Equals(input.MonexId))
                ) && 
                (
                    this.OperationDate == input.OperationDate ||
                    (this.OperationDate != null &&
                    this.OperationDate.Equals(input.OperationDate))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.PaymentOrderId == input.PaymentOrderId ||
                    (this.PaymentOrderId != null &&
                    this.PaymentOrderId.Equals(input.PaymentOrderId))
                ) && 
                (
                    this.TransactionId == input.TransactionId ||
                    (this.TransactionId != null &&
                    this.TransactionId.Equals(input.TransactionId))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.ClaveRastreo != null)
                    hashCode = hashCode * 59 + this.ClaveRastreo.GetHashCode();
                if (this.MonexId != null)
                    hashCode = hashCode * 59 + this.MonexId.GetHashCode();
                if (this.OperationDate != null)
                    hashCode = hashCode * 59 + this.OperationDate.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.PaymentOrderId != null)
                    hashCode = hashCode * 59 + this.PaymentOrderId.GetHashCode();
                if (this.TransactionId != null)
                    hashCode = hashCode * 59 + this.TransactionId.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
