/* 
 * Wire4RestAPI
 *
 * Referencia de la API de Wire4
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = MX.Wire4.Client.SwaggerDateConverter;

namespace MX.Wire4.Model
{
    /// <summary>
    /// PagerResponseDto
    /// </summary>
    [DataContract]
        public partial class PagerResponseDto :  IEquatable<PagerResponseDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PagerResponseDto" /> class.
        /// </summary>
        /// <param name="content">Es el contenido de la respuesta paginada..</param>
        /// <param name="numberOfElements">Es el número de elementos en la página actual..</param>
        /// <param name="page">Es el número de página..</param>
        /// <param name="size">Es el tamaño de la página, por ejemplo puede ser 20, que significa que son 20 registros por página..</param>
        /// <param name="totalItems">Es el número total de elementos de la consulta..</param>
        /// <param name="totalPages">Es el número total de paginas..</param>
        public PagerResponseDto(List<Operations> content = default(List<Operations>), int? numberOfElements = default(int?), int? page = default(int?), int? size = default(int?), long? totalItems = default(long?), int? totalPages = default(int?))
        {
            this.Content = content;
            this.NumberOfElements = numberOfElements;
            this.Page = page;
            this.Size = size;
            this.TotalItems = totalItems;
            this.TotalPages = totalPages;
        }
        
        /// <summary>
        /// Es el contenido de la respuesta paginada.
        /// </summary>
        /// <value>Es el contenido de la respuesta paginada.</value>
        [DataMember(Name="content", EmitDefaultValue=false)]
        public List<Operations> Content { get; set; }

        /// <summary>
        /// Es el número de elementos en la página actual.
        /// </summary>
        /// <value>Es el número de elementos en la página actual.</value>
        [DataMember(Name="number_of_elements", EmitDefaultValue=false)]
        public int? NumberOfElements { get; set; }

        /// <summary>
        /// Es el número de página.
        /// </summary>
        /// <value>Es el número de página.</value>
        [DataMember(Name="page", EmitDefaultValue=false)]
        public int? Page { get; set; }

        /// <summary>
        /// Es el tamaño de la página, por ejemplo puede ser 20, que significa que son 20 registros por página.
        /// </summary>
        /// <value>Es el tamaño de la página, por ejemplo puede ser 20, que significa que son 20 registros por página.</value>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public int? Size { get; set; }

        /// <summary>
        /// Es el número total de elementos de la consulta.
        /// </summary>
        /// <value>Es el número total de elementos de la consulta.</value>
        [DataMember(Name="total_items", EmitDefaultValue=false)]
        public long? TotalItems { get; set; }

        /// <summary>
        /// Es el número total de paginas.
        /// </summary>
        /// <value>Es el número total de paginas.</value>
        [DataMember(Name="total_pages", EmitDefaultValue=false)]
        public int? TotalPages { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PagerResponseDto {\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  NumberOfElements: ").Append(NumberOfElements).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  TotalItems: ").Append(TotalItems).Append("\n");
            sb.Append("  TotalPages: ").Append(TotalPages).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PagerResponseDto);
        }

        /// <summary>
        /// Returns true if PagerResponseDto instances are equal
        /// </summary>
        /// <param name="input">Instance of PagerResponseDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PagerResponseDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Content == input.Content ||
                    this.Content != null &&
                    input.Content != null &&
                    this.Content.SequenceEqual(input.Content)
                ) && 
                (
                    this.NumberOfElements == input.NumberOfElements ||
                    (this.NumberOfElements != null &&
                    this.NumberOfElements.Equals(input.NumberOfElements))
                ) && 
                (
                    this.Page == input.Page ||
                    (this.Page != null &&
                    this.Page.Equals(input.Page))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.TotalItems == input.TotalItems ||
                    (this.TotalItems != null &&
                    this.TotalItems.Equals(input.TotalItems))
                ) && 
                (
                    this.TotalPages == input.TotalPages ||
                    (this.TotalPages != null &&
                    this.TotalPages.Equals(input.TotalPages))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Content != null)
                    hashCode = hashCode * 59 + this.Content.GetHashCode();
                if (this.NumberOfElements != null)
                    hashCode = hashCode * 59 + this.NumberOfElements.GetHashCode();
                if (this.Page != null)
                    hashCode = hashCode * 59 + this.Page.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.TotalItems != null)
                    hashCode = hashCode * 59 + this.TotalItems.GetHashCode();
                if (this.TotalPages != null)
                    hashCode = hashCode * 59 + this.TotalPages.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
