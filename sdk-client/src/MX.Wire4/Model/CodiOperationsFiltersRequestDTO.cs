/* 
 * Wire4RestAPI
 *
 * Referencia de la API de Wire4
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = MX.Wire4.Client.SwaggerDateConverter;

namespace MX.Wire4.Model
{
    /// <summary>
    /// CodiOperationsFiltersRequestDTO
    /// </summary>
    [DataContract]
        public partial class CodiOperationsFiltersRequestDTO :  IEquatable<CodiOperationsFiltersRequestDTO>, IValidatableObject
    {
        /// <summary>
        /// Es el estado (estatus) de la petición.
        /// </summary>
        /// <value>Es el estado (estatus) de la petición.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StatusEnum
        {
            /// <summary>
            /// Enum ACCEPTED for value: ACCEPTED
            /// </summary>
            [EnumMember(Value = "ACCEPTED")]
            ACCEPTED = 0,
            /// <summary>
            /// Enum RECEIVED for value: RECEIVED
            /// </summary>
            [EnumMember(Value = "RECEIVED")]
            RECEIVED = 1,
            /// <summary>
            /// Enum COMPLETED for value: COMPLETED
            /// </summary>
            [EnumMember(Value = "COMPLETED")]
            COMPLETED = 2,
            /// <summary>
            /// Enum CANCELLED for value: CANCELLED
            /// </summary>
            [EnumMember(Value = "CANCELLED")]
            CANCELLED = 3,
            /// <summary>
            /// Enum POSTPONED for value: POSTPONED
            /// </summary>
            [EnumMember(Value = "POSTPONED")]
            POSTPONED = 4,
            /// <summary>
            /// Enum REJECTED for value: REJECTED
            /// </summary>
            [EnumMember(Value = "REJECTED")]
            REJECTED = 5,
            /// <summary>
            /// Enum REVERSED for value: REVERSED
            /// </summary>
            [EnumMember(Value = "REVERSED")]
            REVERSED = 6,
            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN = 7        }
        /// <summary>
        /// Es el estado (estatus) de la petición.
        /// </summary>
        /// <value>Es el estado (estatus) de la petición.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CodiOperationsFiltersRequestDTO" /> class.
        /// </summary>
        /// <param name="amountFrom">Es el monto minimo. Se permiten dos decimales. Ejemplo 1000.00.</param>
        /// <param name="amountTo">Es el monto máximo. Se permiten dos decimales. Ejemplo 1000.00.</param>
        /// <param name="operationDateFrom">Es el filtro de fecha de operación \&quot;desde\&quot;..</param>
        /// <param name="operationDateTo">Es el filtro de fecha de operación \&quot;hasta\&quot;..</param>
        /// <param name="orderId">Es el order id de la petición..</param>
        /// <param name="requestDateFrom">Es el filtro de fecha de petición \&quot;desde\&quot;..</param>
        /// <param name="requestDateTo">Es el filtro de fecha de petición \&quot;hasta\&quot;..</param>
        /// <param name="status">Es el estado (estatus) de la petición..</param>
        public CodiOperationsFiltersRequestDTO(decimal? amountFrom = default(decimal?), decimal? amountTo = default(decimal?), DateTime? operationDateFrom = default(DateTime?), DateTime? operationDateTo = default(DateTime?), string orderId = default(string), DateTime? requestDateFrom = default(DateTime?), DateTime? requestDateTo = default(DateTime?), StatusEnum? status = default(StatusEnum?))
        {
            this.AmountFrom = amountFrom;
            this.AmountTo = amountTo;
            this.OperationDateFrom = operationDateFrom;
            this.OperationDateTo = operationDateTo;
            this.OrderId = orderId;
            this.RequestDateFrom = requestDateFrom;
            this.RequestDateTo = requestDateTo;
            this.Status = status;
        }
        
        /// <summary>
        /// Es el monto minimo. Se permiten dos decimales. Ejemplo 1000.00
        /// </summary>
        /// <value>Es el monto minimo. Se permiten dos decimales. Ejemplo 1000.00</value>
        [DataMember(Name="amount_from", EmitDefaultValue=false)]
        public decimal? AmountFrom { get; set; }

        /// <summary>
        /// Es el monto máximo. Se permiten dos decimales. Ejemplo 1000.00
        /// </summary>
        /// <value>Es el monto máximo. Se permiten dos decimales. Ejemplo 1000.00</value>
        [DataMember(Name="amount_to", EmitDefaultValue=false)]
        public decimal? AmountTo { get; set; }

        /// <summary>
        /// Es el filtro de fecha de operación \&quot;desde\&quot;.
        /// </summary>
        /// <value>Es el filtro de fecha de operación \&quot;desde\&quot;.</value>
        [DataMember(Name="operation_date_from", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? OperationDateFrom { get; set; }

        /// <summary>
        /// Es el filtro de fecha de operación \&quot;hasta\&quot;.
        /// </summary>
        /// <value>Es el filtro de fecha de operación \&quot;hasta\&quot;.</value>
        [DataMember(Name="operation_date_to", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? OperationDateTo { get; set; }

        /// <summary>
        /// Es el order id de la petición.
        /// </summary>
        /// <value>Es el order id de la petición.</value>
        [DataMember(Name="order_id", EmitDefaultValue=false)]
        public string OrderId { get; set; }

        /// <summary>
        /// Es el filtro de fecha de petición \&quot;desde\&quot;.
        /// </summary>
        /// <value>Es el filtro de fecha de petición \&quot;desde\&quot;.</value>
        [DataMember(Name="request_date_from", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? RequestDateFrom { get; set; }

        /// <summary>
        /// Es el filtro de fecha de petición \&quot;hasta\&quot;.
        /// </summary>
        /// <value>Es el filtro de fecha de petición \&quot;hasta\&quot;.</value>
        [DataMember(Name="request_date_to", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? RequestDateTo { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CodiOperationsFiltersRequestDTO {\n");
            sb.Append("  AmountFrom: ").Append(AmountFrom).Append("\n");
            sb.Append("  AmountTo: ").Append(AmountTo).Append("\n");
            sb.Append("  OperationDateFrom: ").Append(OperationDateFrom).Append("\n");
            sb.Append("  OperationDateTo: ").Append(OperationDateTo).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  RequestDateFrom: ").Append(RequestDateFrom).Append("\n");
            sb.Append("  RequestDateTo: ").Append(RequestDateTo).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CodiOperationsFiltersRequestDTO);
        }

        /// <summary>
        /// Returns true if CodiOperationsFiltersRequestDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of CodiOperationsFiltersRequestDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CodiOperationsFiltersRequestDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AmountFrom == input.AmountFrom ||
                    (this.AmountFrom != null &&
                    this.AmountFrom.Equals(input.AmountFrom))
                ) && 
                (
                    this.AmountTo == input.AmountTo ||
                    (this.AmountTo != null &&
                    this.AmountTo.Equals(input.AmountTo))
                ) && 
                (
                    this.OperationDateFrom == input.OperationDateFrom ||
                    (this.OperationDateFrom != null &&
                    this.OperationDateFrom.Equals(input.OperationDateFrom))
                ) && 
                (
                    this.OperationDateTo == input.OperationDateTo ||
                    (this.OperationDateTo != null &&
                    this.OperationDateTo.Equals(input.OperationDateTo))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.RequestDateFrom == input.RequestDateFrom ||
                    (this.RequestDateFrom != null &&
                    this.RequestDateFrom.Equals(input.RequestDateFrom))
                ) && 
                (
                    this.RequestDateTo == input.RequestDateTo ||
                    (this.RequestDateTo != null &&
                    this.RequestDateTo.Equals(input.RequestDateTo))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AmountFrom != null)
                    hashCode = hashCode * 59 + this.AmountFrom.GetHashCode();
                if (this.AmountTo != null)
                    hashCode = hashCode * 59 + this.AmountTo.GetHashCode();
                if (this.OperationDateFrom != null)
                    hashCode = hashCode * 59 + this.OperationDateFrom.GetHashCode();
                if (this.OperationDateTo != null)
                    hashCode = hashCode * 59 + this.OperationDateTo.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.RequestDateFrom != null)
                    hashCode = hashCode * 59 + this.RequestDateFrom.GetHashCode();
                if (this.RequestDateTo != null)
                    hashCode = hashCode * 59 + this.RequestDateTo.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
