/* 
 * Wire4RestAPI
 *
 * Referencia de la API de Wire4
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = MX.Wire4.Client.SwaggerDateConverter;

namespace MX.Wire4.Model
{
    /// <summary>
    /// CodiCodeQrResponseDTO
    /// </summary>
    [DataContract]
        public partial class CodiCodeQrResponseDTO :  IEquatable<CodiCodeQrResponseDTO>, IValidatableObject
    {
        /// <summary>
        /// El estado del código QR para pago CODI®.
        /// </summary>
        /// <value>El estado del código QR para pago CODI®.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StatusEnum
        {
            /// <summary>
            /// Enum ACCEPTED for value: ACCEPTED
            /// </summary>
            [EnumMember(Value = "ACCEPTED")]
            ACCEPTED = 0,
            /// <summary>
            /// Enum RECEIVED for value: RECEIVED
            /// </summary>
            [EnumMember(Value = "RECEIVED")]
            RECEIVED = 1,
            /// <summary>
            /// Enum COMPLETED for value: COMPLETED
            /// </summary>
            [EnumMember(Value = "COMPLETED")]
            COMPLETED = 2,
            /// <summary>
            /// Enum CANCELLED for value: CANCELLED
            /// </summary>
            [EnumMember(Value = "CANCELLED")]
            CANCELLED = 3,
            /// <summary>
            /// Enum POSTPONED for value: POSTPONED
            /// </summary>
            [EnumMember(Value = "POSTPONED")]
            POSTPONED = 4,
            /// <summary>
            /// Enum REJECTED for value: REJECTED
            /// </summary>
            [EnumMember(Value = "REJECTED")]
            REJECTED = 5,
            /// <summary>
            /// Enum REVERSED for value: REVERSED
            /// </summary>
            [EnumMember(Value = "REVERSED")]
            REVERSED = 6,
            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN = 7        }
        /// <summary>
        /// El estado del código QR para pago CODI®.
        /// </summary>
        /// <value>El estado del código QR para pago CODI®.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Es el tipo de código QR para pago con CODI®.
        /// </summary>
        /// <value>Es el tipo de código QR para pago con CODI®.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum PUSHNOTIFICATION for value: PUSH_NOTIFICATION
            /// </summary>
            [EnumMember(Value = "PUSH_NOTIFICATION")]
            PUSHNOTIFICATION = 0,
            /// <summary>
            /// Enum QRCODE for value: QR_CODE
            /// </summary>
            [EnumMember(Value = "QR_CODE")]
            QRCODE = 1,
            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN = 2        }
        /// <summary>
        /// Es el tipo de código QR para pago con CODI®.
        /// </summary>
        /// <value>Es el tipo de código QR para pago con CODI®.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CodiCodeQrResponseDTO" /> class.
        /// </summary>
        /// <param name="amount">Es el monto del pago CODI®..</param>
        /// <param name="barcodeBase64">El código QR en su represantación base 64..</param>
        /// <param name="barcodeUrl">Es la dirección URL del código QR..</param>
        /// <param name="concept">Es la descripción del pago CODI®..</param>
        /// <param name="creationDate">Es la fecha de creación del código QR para pago CODI®. Ésta fecha viene en formato ISO 8601 con zona horaria, ejemplo: &lt;strong&gt;2020-10-27T11:03:15.000-06:00&lt;/strong&gt;..</param>
        /// <param name="dueDate">Es la fecha de operación del pago CODI®. Ésta fecha viene en formato ISO 8601 con zona horaria, ejemplo: &lt;strong&gt;2020-10-27T11:03:15.000-06:00&lt;/strong&gt;..</param>
        /// <param name="orderId">Es la referencia de la transferencia asignada por el cliente..</param>
        /// <param name="phoneNumber">Es el Número de teléfono móvil en caso de ser un pago CODI® usando \&quot;PUSH_NOTIFICATION\&quot;..</param>
        /// <param name="reference">Referencia numérica del pago CODI®..</param>
        /// <param name="status">El estado del código QR para pago CODI®..</param>
        /// <param name="type">Es el tipo de código QR para pago con CODI®..</param>
        public CodiCodeQrResponseDTO(decimal? amount = default(decimal?), string barcodeBase64 = default(string), string barcodeUrl = default(string), string concept = default(string), DateTime? creationDate = default(DateTime?), DateTime? dueDate = default(DateTime?), string orderId = default(string), string phoneNumber = default(string), int? reference = default(int?), StatusEnum? status = default(StatusEnum?), TypeEnum? type = default(TypeEnum?))
        {
            this.Amount = amount;
            this.BarcodeBase64 = barcodeBase64;
            this.BarcodeUrl = barcodeUrl;
            this.Concept = concept;
            this.CreationDate = creationDate;
            this.DueDate = dueDate;
            this.OrderId = orderId;
            this.PhoneNumber = phoneNumber;
            this.Reference = reference;
            this.Status = status;
            this.Type = type;
        }
        
        /// <summary>
        /// Es el monto del pago CODI®.
        /// </summary>
        /// <value>Es el monto del pago CODI®.</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public decimal? Amount { get; set; }

        /// <summary>
        /// El código QR en su represantación base 64.
        /// </summary>
        /// <value>El código QR en su represantación base 64.</value>
        [DataMember(Name="barcode_base64", EmitDefaultValue=false)]
        public string BarcodeBase64 { get; set; }

        /// <summary>
        /// Es la dirección URL del código QR.
        /// </summary>
        /// <value>Es la dirección URL del código QR.</value>
        [DataMember(Name="barcode_url", EmitDefaultValue=false)]
        public string BarcodeUrl { get; set; }

        /// <summary>
        /// Es la descripción del pago CODI®.
        /// </summary>
        /// <value>Es la descripción del pago CODI®.</value>
        [DataMember(Name="concept", EmitDefaultValue=false)]
        public string Concept { get; set; }

        /// <summary>
        /// Es la fecha de creación del código QR para pago CODI®. Ésta fecha viene en formato ISO 8601 con zona horaria, ejemplo: &lt;strong&gt;2020-10-27T11:03:15.000-06:00&lt;/strong&gt;.
        /// </summary>
        /// <value>Es la fecha de creación del código QR para pago CODI®. Ésta fecha viene en formato ISO 8601 con zona horaria, ejemplo: &lt;strong&gt;2020-10-27T11:03:15.000-06:00&lt;/strong&gt;.</value>
        [DataMember(Name="creation_date", EmitDefaultValue=false)]
        public DateTime? CreationDate { get; set; }

        /// <summary>
        /// Es la fecha de operación del pago CODI®. Ésta fecha viene en formato ISO 8601 con zona horaria, ejemplo: &lt;strong&gt;2020-10-27T11:03:15.000-06:00&lt;/strong&gt;.
        /// </summary>
        /// <value>Es la fecha de operación del pago CODI®. Ésta fecha viene en formato ISO 8601 con zona horaria, ejemplo: &lt;strong&gt;2020-10-27T11:03:15.000-06:00&lt;/strong&gt;.</value>
        [DataMember(Name="due_date", EmitDefaultValue=false)]
        public DateTime? DueDate { get; set; }

        /// <summary>
        /// Es la referencia de la transferencia asignada por el cliente.
        /// </summary>
        /// <value>Es la referencia de la transferencia asignada por el cliente.</value>
        [DataMember(Name="order_id", EmitDefaultValue=false)]
        public string OrderId { get; set; }

        /// <summary>
        /// Es el Número de teléfono móvil en caso de ser un pago CODI® usando \&quot;PUSH_NOTIFICATION\&quot;.
        /// </summary>
        /// <value>Es el Número de teléfono móvil en caso de ser un pago CODI® usando \&quot;PUSH_NOTIFICATION\&quot;.</value>
        [DataMember(Name="phone_number", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Referencia numérica del pago CODI®.
        /// </summary>
        /// <value>Referencia numérica del pago CODI®.</value>
        [DataMember(Name="reference", EmitDefaultValue=false)]
        public int? Reference { get; set; }



        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CodiCodeQrResponseDTO {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  BarcodeBase64: ").Append(BarcodeBase64).Append("\n");
            sb.Append("  BarcodeUrl: ").Append(BarcodeUrl).Append("\n");
            sb.Append("  Concept: ").Append(Concept).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CodiCodeQrResponseDTO);
        }

        /// <summary>
        /// Returns true if CodiCodeQrResponseDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of CodiCodeQrResponseDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CodiCodeQrResponseDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.BarcodeBase64 == input.BarcodeBase64 ||
                    (this.BarcodeBase64 != null &&
                    this.BarcodeBase64.Equals(input.BarcodeBase64))
                ) && 
                (
                    this.BarcodeUrl == input.BarcodeUrl ||
                    (this.BarcodeUrl != null &&
                    this.BarcodeUrl.Equals(input.BarcodeUrl))
                ) && 
                (
                    this.Concept == input.Concept ||
                    (this.Concept != null &&
                    this.Concept.Equals(input.Concept))
                ) && 
                (
                    this.CreationDate == input.CreationDate ||
                    (this.CreationDate != null &&
                    this.CreationDate.Equals(input.CreationDate))
                ) && 
                (
                    this.DueDate == input.DueDate ||
                    (this.DueDate != null &&
                    this.DueDate.Equals(input.DueDate))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.BarcodeBase64 != null)
                    hashCode = hashCode * 59 + this.BarcodeBase64.GetHashCode();
                if (this.BarcodeUrl != null)
                    hashCode = hashCode * 59 + this.BarcodeUrl.GetHashCode();
                if (this.Concept != null)
                    hashCode = hashCode * 59 + this.Concept.GetHashCode();
                if (this.CreationDate != null)
                    hashCode = hashCode * 59 + this.CreationDate.GetHashCode();
                if (this.DueDate != null)
                    hashCode = hashCode * 59 + this.DueDate.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.PhoneNumber != null)
                    hashCode = hashCode * 59 + this.PhoneNumber.GetHashCode();
                if (this.Reference != null)
                    hashCode = hashCode * 59 + this.Reference.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
