/* 
 * Wire4RestAPI
 *
 * Referencia de la API de Wire4
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = MX.Wire4.Client.SwaggerDateConverter;

namespace MX.Wire4.Model
{
    /// <summary>
    /// CodiCodeQrResponseDTO
    /// </summary>
    [DataContract]
        public partial class CodiCodeQrResponseDTO :  IEquatable<CodiCodeQrResponseDTO>, IValidatableObject
    {
        /// <summary>
        /// El estado del código QR para pago CODI®
        /// </summary>
        /// <value>El estado del código QR para pago CODI®</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StatusEnum
        {
            /// <summary>
            /// Enum RECEIVED for value: RECEIVED
            /// </summary>
            [EnumMember(Value = "RECEIVED")]
            RECEIVED = 0,
            /// <summary>
            /// Enum COMPLETED for value: COMPLETED
            /// </summary>
            [EnumMember(Value = "COMPLETED")]
            COMPLETED = 1,
            /// <summary>
            /// Enum CANCELLED for value: CANCELLED
            /// </summary>
            [EnumMember(Value = "CANCELLED")]
            CANCELLED = 2        }
        /// <summary>
        /// El estado del código QR para pago CODI®
        /// </summary>
        /// <value>El estado del código QR para pago CODI®</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// El tipo de código QR para pago con CODI®
        /// </summary>
        /// <value>El tipo de código QR para pago con CODI®</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum PUSHNOTIFICATION for value: PUSH_NOTIFICATION
            /// </summary>
            [EnumMember(Value = "PUSH_NOTIFICATION")]
            PUSHNOTIFICATION = 0,
            /// <summary>
            /// Enum QRCODE for value: QR_CODE
            /// </summary>
            [EnumMember(Value = "QR_CODE")]
            QRCODE = 1        }
        /// <summary>
        /// El tipo de código QR para pago con CODI®
        /// </summary>
        /// <value>El tipo de código QR para pago con CODI®</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CodiCodeQrResponseDTO" /> class.
        /// </summary>
        /// <param name="amount">Monto del pago CODI®.</param>
        /// <param name="barcodeBase64">El código QR en su represantación base 64.</param>
        /// <param name="barcodeUrl">La URL del código QR.</param>
        /// <param name="concept">Descripción del pago CODI®.</param>
        /// <param name="creationDate">Fecha de creación del código QR para pago CODI®.</param>
        /// <param name="dueDate">Fecha de operación del pago CODI®.</param>
        /// <param name="orderId">Referencia de la transferencia asignada por el cliente.</param>
        /// <param name="phoneNumber">Número de teléfono móvil en caso de ser un pago CODI® usando &#x27;PUSH_NOTIFICATION&#x27;.</param>
        /// <param name="status">El estado del código QR para pago CODI®.</param>
        /// <param name="type">El tipo de código QR para pago con CODI®.</param>
        public CodiCodeQrResponseDTO(decimal? amount = default(decimal?), string barcodeBase64 = default(string), string barcodeUrl = default(string), string concept = default(string), DateTime? creationDate = default(DateTime?), DateTime? dueDate = default(DateTime?), string orderId = default(string), string phoneNumber = default(string), StatusEnum? status = default(StatusEnum?), TypeEnum? type = default(TypeEnum?))
        {
            this.Amount = amount;
            this.BarcodeBase64 = barcodeBase64;
            this.BarcodeUrl = barcodeUrl;
            this.Concept = concept;
            this.CreationDate = creationDate;
            this.DueDate = dueDate;
            this.OrderId = orderId;
            this.PhoneNumber = phoneNumber;
            this.Status = status;
            this.Type = type;
        }
        
        /// <summary>
        /// Monto del pago CODI®
        /// </summary>
        /// <value>Monto del pago CODI®</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public decimal? Amount { get; set; }

        /// <summary>
        /// El código QR en su represantación base 64
        /// </summary>
        /// <value>El código QR en su represantación base 64</value>
        [DataMember(Name="barcode_base64", EmitDefaultValue=false)]
        public string BarcodeBase64 { get; set; }

        /// <summary>
        /// La URL del código QR
        /// </summary>
        /// <value>La URL del código QR</value>
        [DataMember(Name="barcode_url", EmitDefaultValue=false)]
        public string BarcodeUrl { get; set; }

        /// <summary>
        /// Descripción del pago CODI®
        /// </summary>
        /// <value>Descripción del pago CODI®</value>
        [DataMember(Name="concept", EmitDefaultValue=false)]
        public string Concept { get; set; }

        /// <summary>
        /// Fecha de creación del código QR para pago CODI®
        /// </summary>
        /// <value>Fecha de creación del código QR para pago CODI®</value>
        [DataMember(Name="creation_date", EmitDefaultValue=false)]
        public DateTime? CreationDate { get; set; }

        /// <summary>
        /// Fecha de operación del pago CODI®
        /// </summary>
        /// <value>Fecha de operación del pago CODI®</value>
        [DataMember(Name="due_date", EmitDefaultValue=false)]
        public DateTime? DueDate { get; set; }

        /// <summary>
        /// Referencia de la transferencia asignada por el cliente
        /// </summary>
        /// <value>Referencia de la transferencia asignada por el cliente</value>
        [DataMember(Name="order_id", EmitDefaultValue=false)]
        public string OrderId { get; set; }

        /// <summary>
        /// Número de teléfono móvil en caso de ser un pago CODI® usando &#x27;PUSH_NOTIFICATION&#x27;
        /// </summary>
        /// <value>Número de teléfono móvil en caso de ser un pago CODI® usando &#x27;PUSH_NOTIFICATION&#x27;</value>
        [DataMember(Name="phone_number", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }



        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CodiCodeQrResponseDTO {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  BarcodeBase64: ").Append(BarcodeBase64).Append("\n");
            sb.Append("  BarcodeUrl: ").Append(BarcodeUrl).Append("\n");
            sb.Append("  Concept: ").Append(Concept).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CodiCodeQrResponseDTO);
        }

        /// <summary>
        /// Returns true if CodiCodeQrResponseDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of CodiCodeQrResponseDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CodiCodeQrResponseDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.BarcodeBase64 == input.BarcodeBase64 ||
                    (this.BarcodeBase64 != null &&
                    this.BarcodeBase64.Equals(input.BarcodeBase64))
                ) && 
                (
                    this.BarcodeUrl == input.BarcodeUrl ||
                    (this.BarcodeUrl != null &&
                    this.BarcodeUrl.Equals(input.BarcodeUrl))
                ) && 
                (
                    this.Concept == input.Concept ||
                    (this.Concept != null &&
                    this.Concept.Equals(input.Concept))
                ) && 
                (
                    this.CreationDate == input.CreationDate ||
                    (this.CreationDate != null &&
                    this.CreationDate.Equals(input.CreationDate))
                ) && 
                (
                    this.DueDate == input.DueDate ||
                    (this.DueDate != null &&
                    this.DueDate.Equals(input.DueDate))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.BarcodeBase64 != null)
                    hashCode = hashCode * 59 + this.BarcodeBase64.GetHashCode();
                if (this.BarcodeUrl != null)
                    hashCode = hashCode * 59 + this.BarcodeUrl.GetHashCode();
                if (this.Concept != null)
                    hashCode = hashCode * 59 + this.Concept.GetHashCode();
                if (this.CreationDate != null)
                    hashCode = hashCode * 59 + this.CreationDate.GetHashCode();
                if (this.DueDate != null)
                    hashCode = hashCode * 59 + this.DueDate.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.PhoneNumber != null)
                    hashCode = hashCode * 59 + this.PhoneNumber.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
