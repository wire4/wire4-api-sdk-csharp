/* 
 * Wire4RestAPI
 *
 * Referencia de la API de Wire4
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = MX.Wire4.Client.SwaggerDateConverter;
namespace MX.Wire4.Model
{
    /// <summary>
    /// Objeto request para solicitud de pago
    /// </summary>
    [DataContract]
        public partial class PaymentRequestReq :  IEquatable<PaymentRequestReq>, IValidatableObject
    {
        /// <summary>
        /// Defines Method
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum MethodEnum
        {
            /// <summary>
            /// Enum CARD for value: CARD
            /// </summary>
            [EnumMember(Value = "CARD")]
            CARD = 1,
            /// <summary>
            /// Enum CASH for value: CASH
            /// </summary>
            [EnumMember(Value = "CASH")]
            CASH = 2,
            /// <summary>
            /// Enum SPEI for value: SPEI
            /// </summary>
            [EnumMember(Value = "SPEI")]
            SPEI = 3        }
        /// <summary>
        /// Gets or Sets Method
        /// </summary>
        [DataMember(Name="method", EmitDefaultValue=false)]
        public MethodEnum Method { get; set; }
        /// <summary>
        /// Tipo de pago por paycash
        /// </summary>
        /// <value>Tipo de pago por paycash</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum RECURRENT for value: RECURRENT
            /// </summary>
            [EnumMember(Value = "RECURRENT")]
            RECURRENT = 1,
            /// <summary>
            /// Enum ONEOCCASION for value: ONE_OCCASION
            /// </summary>
            [EnumMember(Value = "ONE_OCCASION")]
            ONEOCCASION = 2        }
        /// <summary>
        /// Tipo de pago por paycash
        /// </summary>
        /// <value>Tipo de pago por paycash</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentRequestReq" /> class.
        /// </summary>
        /// <param name="amount">Es el monto de la solicitud de pago (required).</param>
        /// <param name="cancelReturnUrl">Es la dirección URL a la que se redirigirá en caso de que el usuario cancele..</param>
        /// <param name="customer">customer.</param>
        /// <param name="depositantAccount">Es el número de cuenta CLABE donde se realizará el deposito..</param>
        /// <param name="description">Es la descripción de la solicitud de pago..</param>
        /// <param name="dueDate">Es la fecha de operación de la solicitud de pago..</param>
        /// <param name="fromDate">Es la fecha de inicio de la solicitud de pago. .</param>
        /// <param name="method">method (required).</param>
        /// <param name="orderId">Número de orden asignado por el cliente de Wire4 (required).</param>
        /// <param name="returnUrl">Es la dirección URL a la que se redirigirá en caso de éxito..</param>
        /// <param name="type">Tipo de pago por paycash.</param>
        public PaymentRequestReq(decimal? amount = default(decimal?), string cancelReturnUrl = default(string), Customer customer = default(Customer), string depositantAccount = default(string), string description = default(string), DateTime? dueDate = default(DateTime?), DateTime? fromDate = default(DateTime?), MethodEnum method = default(MethodEnum), string orderId = default(string), string returnUrl = default(string), TypeEnum? type = default(TypeEnum?))
        {
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new InvalidDataException("amount is a required property for PaymentRequestReq and cannot be null");
            }
            else
            {
                this.Amount = amount;
            }
            // to ensure "method" is required (not null)
            if (method == null)
            {
                throw new InvalidDataException("method is a required property for PaymentRequestReq and cannot be null");
            }
            else
            {
                this.Method = method;
            }
            // to ensure "orderId" is required (not null)
            if (orderId == null)
            {
                throw new InvalidDataException("orderId is a required property for PaymentRequestReq and cannot be null");
            }
            else
            {
                this.OrderId = orderId;
            }
            this.CancelReturnUrl = cancelReturnUrl;
            this.Customer = customer;
            this.DepositantAccount = depositantAccount;
            this.Description = description;
            this.DueDate = dueDate;
            this.FromDate = fromDate;
            this.ReturnUrl = returnUrl;
            this.Type = type;
        }
        
        /// <summary>
        /// Es el monto de la solicitud de pago
        /// </summary>
        /// <value>Es el monto de la solicitud de pago</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public decimal? Amount { get; set; }

        /// <summary>
        /// Es la dirección URL a la que se redirigirá en caso de que el usuario cancele.
        /// </summary>
        /// <value>Es la dirección URL a la que se redirigirá en caso de que el usuario cancele.</value>
        [DataMember(Name="cancel_return_url", EmitDefaultValue=false)]
        public string CancelReturnUrl { get; set; }

        /// <summary>
        /// Gets or Sets Customer
        /// </summary>
        [DataMember(Name="customer", EmitDefaultValue=false)]
        public Customer Customer { get; set; }

        /// <summary>
        /// Es el número de cuenta CLABE donde se realizará el deposito.
        /// </summary>
        /// <value>Es el número de cuenta CLABE donde se realizará el deposito.</value>
        [DataMember(Name="depositant_account", EmitDefaultValue=false)]
        public string DepositantAccount { get; set; }

        /// <summary>
        /// Es la descripción de la solicitud de pago.
        /// </summary>
        /// <value>Es la descripción de la solicitud de pago.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Es la fecha de operación de la solicitud de pago.
        /// </summary>
        /// <value>Es la fecha de operación de la solicitud de pago.</value>
        [DataMember(Name="due_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? DueDate { get; set; }

        /// <summary>
        /// Es la fecha de inicio de la solicitud de pago. 
        /// </summary>
        /// <value>Es la fecha de inicio de la solicitud de pago. </value>
        [DataMember(Name="from_date", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? FromDate { get; set; }


        /// <summary>
        /// Número de orden asignado por el cliente de Wire4
        /// </summary>
        /// <value>Número de orden asignado por el cliente de Wire4</value>
        [DataMember(Name="order_id", EmitDefaultValue=false)]
        public string OrderId { get; set; }

        /// <summary>
        /// Es la dirección URL a la que se redirigirá en caso de éxito.
        /// </summary>
        /// <value>Es la dirección URL a la que se redirigirá en caso de éxito.</value>
        [DataMember(Name="return_url", EmitDefaultValue=false)]
        public string ReturnUrl { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentRequestReq {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  CancelReturnUrl: ").Append(CancelReturnUrl).Append("\n");
            sb.Append("  Customer: ").Append(Customer).Append("\n");
            sb.Append("  DepositantAccount: ").Append(DepositantAccount).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  FromDate: ").Append(FromDate).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  ReturnUrl: ").Append(ReturnUrl).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentRequestReq);
        }

        /// <summary>
        /// Returns true if PaymentRequestReq instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentRequestReq to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentRequestReq input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.CancelReturnUrl == input.CancelReturnUrl ||
                    (this.CancelReturnUrl != null &&
                    this.CancelReturnUrl.Equals(input.CancelReturnUrl))
                ) && 
                (
                    this.Customer == input.Customer ||
                    (this.Customer != null &&
                    this.Customer.Equals(input.Customer))
                ) && 
                (
                    this.DepositantAccount == input.DepositantAccount ||
                    (this.DepositantAccount != null &&
                    this.DepositantAccount.Equals(input.DepositantAccount))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DueDate == input.DueDate ||
                    (this.DueDate != null &&
                    this.DueDate.Equals(input.DueDate))
                ) && 
                (
                    this.FromDate == input.FromDate ||
                    (this.FromDate != null &&
                    this.FromDate.Equals(input.FromDate))
                ) && 
                (
                    this.Method == input.Method ||
                    (this.Method != null &&
                    this.Method.Equals(input.Method))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.ReturnUrl == input.ReturnUrl ||
                    (this.ReturnUrl != null &&
                    this.ReturnUrl.Equals(input.ReturnUrl))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.CancelReturnUrl != null)
                    hashCode = hashCode * 59 + this.CancelReturnUrl.GetHashCode();
                if (this.Customer != null)
                    hashCode = hashCode * 59 + this.Customer.GetHashCode();
                if (this.DepositantAccount != null)
                    hashCode = hashCode * 59 + this.DepositantAccount.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DueDate != null)
                    hashCode = hashCode * 59 + this.DueDate.GetHashCode();
                if (this.FromDate != null)
                    hashCode = hashCode * 59 + this.FromDate.GetHashCode();
                if (this.Method != null)
                    hashCode = hashCode * 59 + this.Method.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.ReturnUrl != null)
                    hashCode = hashCode * 59 + this.ReturnUrl.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
