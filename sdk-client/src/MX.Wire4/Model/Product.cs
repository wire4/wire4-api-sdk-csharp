/* 
 * Wire4RestAPI
 *
 * Referencia de la API de Wire4
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = MX.Wire4.Client.SwaggerDateConverter;
namespace MX.Wire4.Model
{
    /// <summary>
    /// Información del producto sobre el cual se aplicarán los cobros recurrentes
    /// </summary>
    [DataContract]
        public partial class Product :  IEquatable<Product>, IValidatableObject
    {
        /// <summary>
        /// Periodo en el cual se aplicará el cargo, si no se especifica la propiedad frequency por defecto sera la unidad
        /// </summary>
        /// <value>Periodo en el cual se aplicará el cargo, si no se especifica la propiedad frequency por defecto sera la unidad</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum BillingPeriodEnum
        {
            /// <summary>
            /// Enum WEEKLY for value: WEEKLY
            /// </summary>
            [EnumMember(Value = "WEEKLY")]
            WEEKLY = 1,
            /// <summary>
            /// Enum MONTHLY for value: MONTHLY
            /// </summary>
            [EnumMember(Value = "MONTHLY")]
            MONTHLY = 2,
            /// <summary>
            /// Enum YEARLY for value: YEARLY
            /// </summary>
            [EnumMember(Value = "YEARLY")]
            YEARLY = 3        }
        /// <summary>
        /// Periodo en el cual se aplicará el cargo, si no se especifica la propiedad frequency por defecto sera la unidad
        /// </summary>
        /// <value>Periodo en el cual se aplicará el cargo, si no se especifica la propiedad frequency por defecto sera la unidad</value>
        [DataMember(Name="billing_period", EmitDefaultValue=false)]
        public BillingPeriodEnum BillingPeriod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Product" /> class.
        /// </summary>
        /// <param name="amount">Monto del calgo que se aplicará de forma periodica (required).</param>
        /// <param name="billingPeriod">Periodo en el cual se aplicará el cargo, si no se especifica la propiedad frequency por defecto sera la unidad (required).</param>
        /// <param name="frequency">La frecuencia en la que se aplicará el cargo, trabaja en conjunto con la propiedad billingPeriod (required).</param>
        /// <param name="name">Nombre del producto sobre el cual se aplicará el cobro recurrente (required).</param>
        public Product(decimal? amount = default(decimal?), BillingPeriodEnum billingPeriod = default(BillingPeriodEnum), int? frequency = default(int?), string name = default(string))
        {
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new InvalidDataException("amount is a required property for Product and cannot be null");
            }
            else
            {
                this.Amount = amount;
            }
            // to ensure "billingPeriod" is required (not null)
            if (billingPeriod == null)
            {
                throw new InvalidDataException("billingPeriod is a required property for Product and cannot be null");
            }
            else
            {
                this.BillingPeriod = billingPeriod;
            }
            // to ensure "frequency" is required (not null)
            if (frequency == null)
            {
                throw new InvalidDataException("frequency is a required property for Product and cannot be null");
            }
            else
            {
                this.Frequency = frequency;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Product and cannot be null");
            }
            else
            {
                this.Name = name;
            }
        }
        
        /// <summary>
        /// Monto del calgo que se aplicará de forma periodica
        /// </summary>
        /// <value>Monto del calgo que se aplicará de forma periodica</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public decimal? Amount { get; set; }


        /// <summary>
        /// La frecuencia en la que se aplicará el cargo, trabaja en conjunto con la propiedad billingPeriod
        /// </summary>
        /// <value>La frecuencia en la que se aplicará el cargo, trabaja en conjunto con la propiedad billingPeriod</value>
        [DataMember(Name="frequency", EmitDefaultValue=false)]
        public int? Frequency { get; set; }

        /// <summary>
        /// Nombre del producto sobre el cual se aplicará el cobro recurrente
        /// </summary>
        /// <value>Nombre del producto sobre el cual se aplicará el cobro recurrente</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Product {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  BillingPeriod: ").Append(BillingPeriod).Append("\n");
            sb.Append("  Frequency: ").Append(Frequency).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Product);
        }

        /// <summary>
        /// Returns true if Product instances are equal
        /// </summary>
        /// <param name="input">Instance of Product to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Product input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.BillingPeriod == input.BillingPeriod ||
                    (this.BillingPeriod != null &&
                    this.BillingPeriod.Equals(input.BillingPeriod))
                ) && 
                (
                    this.Frequency == input.Frequency ||
                    (this.Frequency != null &&
                    this.Frequency.Equals(input.Frequency))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.BillingPeriod != null)
                    hashCode = hashCode * 59 + this.BillingPeriod.GetHashCode();
                if (this.Frequency != null)
                    hashCode = hashCode * 59 + this.Frequency.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
